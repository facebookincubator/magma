// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.
syntax = "proto3";

import "orc8r/protos/common.proto";

package magma.orc8r;

option go_package = "magma/orc8r/cloud/go/protos";

// --------------------------------------------------------------------------
// Directory Service
//
//
//
// --------------------------------------------------------------------------

enum TableID {
  IMSI_TO_HWID = 0;
  HWID_TO_HOSTNAME = 1;
}

message GetLocationRequest {
  string id = 1;
  TableID table = 2;
}

message DeleteLocationRequest {
  string id = 1;
  TableID table = 2;
}

message LocationRecord {
  // Object location. Client is responsible for location encoding and decoding
  string location = 1;
}

message UpdateDirectoryLocationRequest {
  string id = 1;
  LocationRecord record = 2;
  TableID table = 3;
}


// DirectoryService provides a central directory on the Orchestrator that
// associates an ID with a location.
service DirectoryService {

  // Get location of an object from the directory service
  // Throws UNKNOWN if object ID does not exist
  rpc GetLocation (GetLocationRequest) returns (LocationRecord) {};

  // Update the location record of an object in the directory service
  rpc UpdateLocation (UpdateDirectoryLocationRequest) returns (Void) {};

  // Delete location record of an object from the directory service
  // Throws UNKNOWN if object ID does not exist
  rpc DeleteLocation (DeleteLocationRequest) returns (Void) {};
}

message UpdateRecordRequest {
  string id = 1;
  string location = 2;
  repeated DirectoryField fields = 3;
}

message DirectoryField {
  string key = 1;
  string value = 2;
}

message DeleteRecordRequest {
  string id = 1;
}

message GetDirectoryFieldRequest {
  string id = 1;
  string field_key = 2;
}

// GatewayDirectoryService allows for associating various identities to a
// record. This service runs on the gateways.
service GatewayDirectoryService {

  // Update the directory record of an object in the directory service
  rpc UpdateRecord (UpdateRecordRequest) returns (Void) {};

  // Delete directory record of an object from the directory service
  // Throws UNKNOWN if object ID does not exist
  rpc DeleteRecord (DeleteRecordRequest) returns (Void) {};

  // Get directory field for a given id and key
  rpc GetDirectoryField (GetDirectoryFieldRequest) returns (DirectoryField) {};
}