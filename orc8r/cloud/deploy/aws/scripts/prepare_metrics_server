#!/bin/bash

error_exit() {
    local message=$1
    echo "[FATAL] $message" 1>&2
    exit 1
}

sudo apt-get install -y jq

export AWS_DEFAULT_REGION=eu-west-1

# Use the instance metadata to find out about the network the instance has been lauched into (the IP is the standard AWS metadata IP)
AWS_METADATA_IP=169.254.169.254
SELF_INSTANCE_ID=`curl http://${AWS_METADATA_IP}/latest/meta-data/instance-id`
AVAILABILITY_ZONE=`curl http://${AWS_METADATA_IP}/latest/dynamic/instance-identity/document | jq -r '.availabilityZone'`

S3_CONFIG_BUCKET=magma-deployment
PROMETHEUS_CONFIG_FILE=prometheus.config

ASGROUP=`aws autoscaling describe-auto-scaling-instances --instance-ids ${SELF_INSTANCE_ID} --region eu-west-1 --output=text | cut -f 2`
DEPLOY_ENV=`aws autoscaling describe-tags --filters Name="auto-scaling-group",Values=${ASGROUP} Name=Key,Values=environment --region eu-west-1 --output=text | cut -f6`
if [[ $? != 0 ]]; then
    error_exit "Couldn't get deployment environment."
fi

setup_box() {
    # Remove unused packages
    sudo apt autoremove --purge -y

    # Prepare for using envdir
    sudo apt-get -y install daemontools
    mkdir -p /var/opt/magma/envdir

    # Copy specified envdir from S3
    sudo aws s3 cp s3://magma-deployment/environments/${DEPLOY_ENV} /var/opt/magma/envdir --region eu-west-1 --recursive

    if [[ $? != 0 ]]; then
        error_exit "Couldn't pull settings for environment $DEPLOY_ENV."
    fi

    # Get HOST_NAME and add it to envdir
    HOST_NAME=$(wget -q -O - http://${AWS_METADATA_IP}/latest/meta-data/public-hostname)
    echo ${HOST_NAME} > /var/opt/magma/envdir/HOST_NAME

    # Copy certs and private keys from S3
    sudo aws s3 cp s3://magma-deployment/certs /var/opt/magma/certs --region eu-west-1 --recursive

    if [[ $? != 0 ]]; then
        error_exit "Couldn't pull settings for environment $DEPLOY_ENV."
    fi
}

attach_ebs() {
    DEVICE=/dev/xvdk

    INSTANCE_ID=$(curl -s http://${AWS_METADATA_IP}/latest/meta-data/instance-id)
    echo INSTANCE_ID: "$INSTANCE_ID"

    IS_ALREADY_ATTACHED=$(sudo aws ec2 describe-volumes --region eu-west-1 --filters Name=tag:Name,Values=tip-magma Name=availability-zone,Values=${AVAILABILITY_ZONE} Name=attachment.instance-id,Values=${INSTANCE_ID} --query 'Volumes[*].[VolumeId, State==`in-use`]' --output text | grep True | awk '{print $1}' | head -n 1)
    echo IS_ALREADY_ATTACHED:

    if [[ "$IS_ALREADY_ATTACHED" ]]; then
        echo Returning from attach_ebs
        return 0
    fi

    # getting available ebs volume-id
    EBS_VOLUME=$(sudo aws ec2 describe-volumes --region eu-west-1 --filters Name=tag:Name,Values=tip-magma Name=availability-zone,Values=${AVAILABILITY_ZONE} --query 'Volumes[*].[VolumeId, State==`available`]' --output text  | grep True | awk '{print $1}' | head -n 1)
    #check if there are available ebs volumes

    if [[ -z "$EBS_VOLUME" ]]; then
        # See if the EBS volume is still attached to an instance
        ATTACHED_EBS_VOLUME=$(sudo aws ec2 describe-volumes --region eu-west-1 --filters Name=tag:Name,Values=tip-magma Name=availability-zone,Values=${AVAILABILITY_ZONE} --query 'Volumes[*].[VolumeId, State==`in-use`]' --output text | grep True | awk '{print $1}' | head -n 1)
        if [[ -n "$ATTACHED_EBS_VOLUME" ]]; then

            # detach volume if it is attached
            aws ec2 detach-volume --volume-id ${ATTACHED_EBS_VOLUME}

            sleep 10

            RETRY_LIMIT=5
            RETRIES=0
            EBS_VOLUME=$(sudo aws ec2 describe-volumes --region eu-west-1 --filters Name=tag:Name,Values=tip-magma Name=availability-zone,Values=${AVAILABILITY_ZONE} --query 'Volumes[*].[VolumeId, State==`available`]' --output text  | grep True | awk '{print $1}' | head -n 1)
            # Allow timed retries to find the now unattached volume
            while [[ ${EBS_VOLUME}"X" == "X" ]]; do
                echo "retries = ${RETRIES}"
                RETRIES=$((RETRIES + 1))
                if [[ ${RETRIES} -ge ${RETRY_LIMIT} ]]; then
                    error_exit "Could not find available EBS within retry limit"
                fi

                echo "No available ebs volumes found, sleeping 10 seconds and retrying..."
                sleep 10
                EBS_VOLUME=$(sudo aws ec2 describe-volumes --region eu-west-1 --filters Name=tag:Name,Values=tip-magma Name=availability-zone,Values=${AVAILABILITY_ZONE} --query 'Volumes[*].[VolumeId, State==`available`]' --output text  | grep True | awk '{print $1}' | head -n 1)
            done
        else
            error_exit "could not find ebs volume"
        fi
    fi


    # attaching ebs
    sudo aws ec2 attach-volume --region eu-west-1 --volume-id ${EBS_VOLUME} --instance-id ${INSTANCE_ID} --device ${DEVICE}

    sleep 10
    IS_ATTACHED=$(sudo aws ec2 describe-volumes --region eu-west-1 --filters Name=attachment.instance-id,Values=${INSTANCE_ID} Name=volume-id,Values=${EBS_VOLUME} --query 'Volumes[*].[VolumeId]' --output text)

    # Allow timed retries for EBS volume to attach
    RETRIES=0
    while [[ -z "${IS_ATTACHED}" ]]; do
        RETRIES=$((RETRIES + 1))
        if [[ ${RETRIES} -ge ${RETRY_LIMIT} ]]; then
            error_exit "Could not find available EBS within retry limit"
        fi

        echo "Volume not attached yet, sleeping 10 seconds and retrying..."
        sleep 10
        IS_ATTACHED=$(sudo aws ec2 describe-volumes --region eu-west-1 --filters Name=attachment.instance-id,Values=${INSTANCE_ID} Name=volume-id,Values=${EBS_VOLUME} --query 'Volumes[*].[VolumeId]' --output text)
    done
    # Make the device a filesystem device if it isn't already
    DEVICE_TYPE=$(sudo file -s ${DEVICE} | awk '{print $2}')
    if [[ "$DEVICE_TYPE" == "data" ]]; then
        sudo mkfs -t ext4 ${DEVICE}
    fi

    # mount ebs to /data
    sudo mkdir /data
    sudo mount ${DEVICE} /data
}

configure_prometheus() {
    PRIMARY_IP=`curl http://${AWS_METADATA_IP}/latest/meta-data/local-ipv4`
    HOST_NAME=`curl http://${AWS_METADATA_IP}/latest/meta-data/local-hostname`
    SHORT_HOST_NAME=`echo ${HOST_NAME} | awk --field-separator \. '{ print $1 }'`

    echo >> /etc/hosts
    echo ${PRIMARY_IP} ${SHORT_HOST_NAME} ${HOST_NAME} >> /etc/hosts
}

setup_box
attach_ebs
configure_prometheus
