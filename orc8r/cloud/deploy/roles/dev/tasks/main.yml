---
# Copyright (c) 2016-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. An additional grant
# of patent rights can be found in the PATENTS file in the same directory.

- name: Check that Ansible version is >=2.2
  assert:
    that: ansible_version.major > 2 or
      (ansible_version.major == 2 and ansible_version.minor >= 2)
    msg: "Ansible upgrade needed. Current version is {{ ansible_version.full }}"
  when: preburn

- name: Update Repository
  apt_repository: repo='ppa:ubuntu-lxc/stable' state=present update_cache=true
  when: preburn

- name: Install prereqs for magma cloud
  apt: pkg={{ item }} state=present update_cache=true
  with_items:
    - vim
    - git
    - curl
    - realpath
    - unzip
    - daemontools
    - parallel
    - build-essential
    - bzr
  when: preburn

- name: Create the /var/opt/magma directory
  file: path=/var/opt/magma state=directory
  when: full_provision

- name: Create a directory for test_certs if not exist
  file: path=/home/{{ user }}/magma/.cache/test_certs state=directory
  when: full_provision

- name: Create a symlink for the test certs folder
  file: src=/home/{{ user }}/magma/.cache/test_certs path=/var/opt/magma/certs state=link force=yes
  when: full_provision

- name: Generate the cloud VM's certs if they are not already generated
  command: '{{ magma_root }}/orc8r/cloud/scripts/create_test_certs {{ magma_root }}/.cache/test_certs'
  args:
    creates: '{{ magma_root }}/.cache/test_certs/rootCA.pem'
  when: full_provision

- name: Generate vpn certs for certifier if they are not already generated
  command: '{{ magma_root }}/orc8r/cloud/scripts/create_test_vpn_certs {{ magma_root }}/.cache/test_certs'
  args:
    creates: '{{ magma_root }}/.cache/test_certs/vpn_ca.crt'
  when: full_provision

- name: Create a symlink for the binaries
  file: src=/home/{{ user }}/go/bin path=/var/opt/magma/bin state=link force=yes
  when: full_provision

- name: Create a symlink for the envdir
  file: src=/home/{{ user }}/magma/orc8r/cloud/deploy/files/envdir path=/var/opt/magma/envdir state=link force=yes
  when: full_provision

- name: Create a symlink for the plugins directory
  file: src=/home/{{ user }}/go/plugins path=/var/opt/magma/plugins state=link force=yes
  when: full_provision

########################################
# Setup Swagger and Protobuf
########################################

- name: Create the /var/opt/magma/static directory
  file: path=/var/opt/magma/static state=directory
  when: full_provision

- name: Create a symlink for the apidocs files
  file: src=/home/{{ user }}/magma/orc8r/cloud/deploy/files/static/apidocs path=/var/opt/magma/static/apidocs state=link force=yes
  when: full_provision

- name: Setup Swagger UI
  script: scripts/setup_swagger_ui
  when: full_provision

- name: Get protoc version
  command: protoc --version
  ignore_errors: true
  register: pbversion
  when: preburn

- name: Install protobuf compiler
  command: "{{ item }}"
  with_items:
    - curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip
    - unzip protoc3.zip -d protoc3
    - mv protoc3/bin/protoc /bin/protoc
    - chmod a+rx /bin/protoc
    - mv protoc3/include/google /usr/include/
    - chmod -R a+Xr /usr/include/google
    - rm -rf protoc3.zip protoc3
  when: preburn and ((pbversion is failed) or not (pbversion.stdout|match("^libprotoc 3.")))

########################################
# Building third party .deb packages
########################################

- name: Install prereqs for FPM
  apt: pkg={{ item }} state=present update_cache=no
  with_items:
      - ruby
      - ruby-dev
      - libffi-dev
  when: preburn

- name: Setup FPM so we can build packages
  shell: gem install fpm
  when: preburn

##############################################
# Service Config related directories and links
##############################################
- name: Create magma config directory
  file: path=/etc/magma/configs state=directory mode=0755
  when: full_provision

- name: Create a symlink to config directory for each module
  file:
    src: '{{ item }}/cloud/configs'
    path: /etc/magma/configs/{{ item | basename }}
    state: link
    force: yes
  loop: '{{ magma_modules.split(" ") }}'
  when: full_provision

- name: Set environment vars in profile
  lineinfile:
    dest: "/home/{{ user }}/.profile"
    state: present
    line: "{{ item }}"
  with_items:
    - export MAGMA_ROOT=/home/{{ user }}/magma
  when: full_provision
