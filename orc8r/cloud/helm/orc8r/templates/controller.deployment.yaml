{{/*
Copyright (c) 2018-present, Facebook, Inc.
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.
*/}}
{{- $serviceName := print .Release.Name "-controller" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    app.kubernetes.io/component: controller
{{ include "labels" . | indent 4 }}
spec:
  replicas: {{ .Values.controller.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
{{ include "selector-labels" . | indent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
{{ include "selector-labels" . | indent 8 }}
    spec:
      {{- with .Values.controller.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.controller.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.controller.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | trimSuffix "\n" | indent 8 }}
      {{- end }}
      volumes:
        - name: certs
          secret:
            secretName: {{ required "secret.certs must be provided" .Values.secret.certs }}
        - name: envdir
          secret:
            secretName: {{ required "secret.envdir must be provided" .Values.secret.envdir }}
        - name: configs
          {{- if .Values.secret.configs }}
          secret:
            secretName: {{ .Values.secret.configs }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      containers:
        - name: {{ $serviceName }}
          image: {{ required "controller.image.repository must be provided" .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}
          imagePullPolicy: {{ .Values.controller.image.pullPolicy }}
          volumeMounts:
            {{- range tuple "certs" "envdir" "configs" }}
            - name: {{ . }}
              mountPath: /var/opt/magma/{{ . }}
              readOnly: true
            {{- end }}
          ports:
            {{- with .Values.controller.service }}
            - containerPort: {{ .targetPort }}
            {{- range $_, $port := untilStep (.portStart | int) (.portEnd | add1 | int) 1 }}
            - containerPort: {{ $port }}
            {{- end }}
            {{- end }}
          env:
            - name: DATABASE_SOURCE
              valueFrom:
                secretKeyRef:
                  name: {{ $serviceName }}
                  key: postgres.connstr
            - name: SQL_DRIVER
              value: postgres
            # Hostname override for dispatcher
            - name: SERVICE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          livenessProbe:
            tcpSocket:
              port: 9081
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            tcpSocket:
              port: 9081
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
{{ toYaml .Values.proxy.resources | indent 12 }}
