{{/*
Copyright (c) 2018-present, Facebook, Inc.
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.
*/}}
{{- if .Values.graphite.create }}
{{- $serviceName := print .Release.Name "-graphite" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    app.kubernetes.io/component: graphite
{{ include "metrics.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.graphite.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/component: graphite
{{ include "selector-labels" . | indent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: graphite
{{ include "selector-labels" . | indent 8 }}
    spec:
      {{- with .Values.graphite.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.graphite.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.graphite.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | trimSuffix "\n" | indent 8 }}
      {{- end }}

      volumes:
        - name: "graphite-data"
{{ toYaml .Values.graphite.volumes.graphiteData.volumeSpec | indent 10 }}
        - name: "graphite-configs"
          configMap:
            name: graphite-conf

      containers:
        - name: "graphite"
          image: {{ required "graphite.image.respository must be provided" .Values.graphite.image.repository }}:{{ .Values.graphite.image.tag }}
          imagePullPolicy: {{ .Values.graphite.image.pullPolicy }}
          ports:
            - containerPort: 80
            - containerPort: 2003
          volumeMounts:
            - name: "graphite-data"
              mountPath: /opt/graphite/storage/whisper
            - name: "graphite-configs"
              mountPath: /opt/graphite/conf
          env:
            - name: REDIS_TAGDB
              value: "1"
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 30
          resources:
{{ toYaml .Values.graphite.resources | indent 12 }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: graphite-conf
data:
  carbon.conf: |
    [cache]
    DATABASE = whisper
    ENABLE_LOGROTATION = True
    USER =
    MAX_CACHE_SIZE = inf
    MAX_UPDATES_PER_SECOND = 2000
    MAX_CREATES_PER_MINUTE = 1000
    MIN_TIMESTAMP_RESOLUTION = 1
    LINE_RECEIVER_INTERFACE = 0.0.0.0
    LINE_RECEIVER_PORT = 2003
    ENABLE_UDP_LISTENER = False
    UDP_RECEIVER_INTERFACE = 0.0.0.0
    UDP_RECEIVER_PORT = 2003
    USE_INSECURE_UNPICKLER = False
    CACHE_QUERY_INTERFACE = 0.0.0.0
    CACHE_QUERY_PORT = 7002
    USE_FLOW_CONTROL = True
    LOG_UPDATES = False
    LOG_CREATES = False
    LOG_CACHE_HITS = False
    LOG_CACHE_QUEUE_SORTS = False
    CACHE_WRITE_STRATEGY = sorted
    WHISPER_AUTOFLUSH = False
    WHISPER_FALLOCATE_CREATE = True
    CARBON_METRIC_INTERVAL = 10
    GRAPHITE_URL = http://127.0.0.1:8080

  storage-schemas.conf: |
    [carbon]
    pattern = ^carbon\.
    retentions = 10s:6h,1m:90d

    [default_1min_for_1day]
    pattern = .*
    retentions = 1m:14d,15m:180d,1h:2y
{{- end }}
