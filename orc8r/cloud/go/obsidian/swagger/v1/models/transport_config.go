// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportConfig APN transport configuration
// swagger:model transport_config
type TransportConfig struct {

	// egress type
	// Required: true
	// Enum: [VLAN]
	EgressType string `json:"egress_type"`

	// gateway ip
	// Required: true
	// Format: ipv4
	GatewayIP *strfmt.IPv4 `json:"gateway_ip"`

	// gateway mac
	// Required: true
	// Format: mac
	GatewayMac *strfmt.MAC `json:"gateway_mac"`

	// vlan config
	VlanConfig *VlanConfig `json:"vlan_config,omitempty"`
}

// Validate validates this transport config
func (m *TransportConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEgressType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var transportConfigTypeEgressTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transportConfigTypeEgressTypePropEnum = append(transportConfigTypeEgressTypePropEnum, v)
	}
}

const (

	// TransportConfigEgressTypeVLAN captures enum value "VLAN"
	TransportConfigEgressTypeVLAN string = "VLAN"
)

// prop value enum
func (m *TransportConfig) validateEgressTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transportConfigTypeEgressTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransportConfig) validateEgressType(formats strfmt.Registry) error {

	if err := validate.RequiredString("egress_type", "body", string(m.EgressType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateEgressTypeEnum("egress_type", "body", m.EgressType); err != nil {
		return err
	}

	return nil
}

func (m *TransportConfig) validateGatewayIP(formats strfmt.Registry) error {

	if err := validate.Required("gateway_ip", "body", m.GatewayIP); err != nil {
		return err
	}

	if err := validate.FormatOf("gateway_ip", "body", "ipv4", m.GatewayIP.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportConfig) validateGatewayMac(formats strfmt.Registry) error {

	if err := validate.Required("gateway_mac", "body", m.GatewayMac); err != nil {
		return err
	}

	if err := validate.FormatOf("gateway_mac", "body", "mac", m.GatewayMac.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportConfig) validateVlanConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.VlanConfig) { // not required
		return nil
	}

	if m.VlanConfig != nil {
		if err := m.VlanConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportConfig) UnmarshalBinary(b []byte) error {
	var res TransportConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
