// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/protos/magmad.proto

package protos // import "magma/orc8r/cloud/go/protos"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _struct "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingParams struct {
	HostOrIp             string   `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	NumPackets           int32    `protobuf:"varint,2,opt,name=num_packets,json=numPackets,proto3" json:"num_packets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingParams) Reset()         { *m = PingParams{} }
func (m *PingParams) String() string { return proto.CompactTextString(m) }
func (*PingParams) ProtoMessage()    {}
func (*PingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{0}
}
func (m *PingParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingParams.Unmarshal(m, b)
}
func (m *PingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingParams.Marshal(b, m, deterministic)
}
func (dst *PingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingParams.Merge(dst, src)
}
func (m *PingParams) XXX_Size() int {
	return xxx_messageInfo_PingParams.Size(m)
}
func (m *PingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PingParams.DiscardUnknown(m)
}

var xxx_messageInfo_PingParams proto.InternalMessageInfo

func (m *PingParams) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *PingParams) GetNumPackets() int32 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

type TracerouteParams struct {
	HostOrIp             string   `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	MaxHops              int32    `protobuf:"varint,2,opt,name=max_hops,json=maxHops,proto3" json:"max_hops,omitempty"`
	BytesPerPacket       int32    `protobuf:"varint,3,opt,name=bytes_per_packet,json=bytesPerPacket,proto3" json:"bytes_per_packet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerouteParams) Reset()         { *m = TracerouteParams{} }
func (m *TracerouteParams) String() string { return proto.CompactTextString(m) }
func (*TracerouteParams) ProtoMessage()    {}
func (*TracerouteParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{1}
}
func (m *TracerouteParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteParams.Unmarshal(m, b)
}
func (m *TracerouteParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteParams.Marshal(b, m, deterministic)
}
func (dst *TracerouteParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteParams.Merge(dst, src)
}
func (m *TracerouteParams) XXX_Size() int {
	return xxx_messageInfo_TracerouteParams.Size(m)
}
func (m *TracerouteParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteParams.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteParams proto.InternalMessageInfo

func (m *TracerouteParams) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *TracerouteParams) GetMaxHops() int32 {
	if m != nil {
		return m.MaxHops
	}
	return 0
}

func (m *TracerouteParams) GetBytesPerPacket() int32 {
	if m != nil {
		return m.BytesPerPacket
	}
	return 0
}

type NetworkTestRequest struct {
	Pings                []*PingParams       `protobuf:"bytes,1,rep,name=pings,proto3" json:"pings,omitempty"`
	Traceroutes          []*TracerouteParams `protobuf:"bytes,2,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NetworkTestRequest) Reset()         { *m = NetworkTestRequest{} }
func (m *NetworkTestRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkTestRequest) ProtoMessage()    {}
func (*NetworkTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{2}
}
func (m *NetworkTestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkTestRequest.Unmarshal(m, b)
}
func (m *NetworkTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkTestRequest.Marshal(b, m, deterministic)
}
func (dst *NetworkTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTestRequest.Merge(dst, src)
}
func (m *NetworkTestRequest) XXX_Size() int {
	return xxx_messageInfo_NetworkTestRequest.Size(m)
}
func (m *NetworkTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTestRequest proto.InternalMessageInfo

func (m *NetworkTestRequest) GetPings() []*PingParams {
	if m != nil {
		return m.Pings
	}
	return nil
}

func (m *NetworkTestRequest) GetTraceroutes() []*TracerouteParams {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

type PingResult struct {
	HostOrIp             string   `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	NumPackets           int32    `protobuf:"varint,2,opt,name=num_packets,json=numPackets,proto3" json:"num_packets,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	PacketsTransmitted   int32    `protobuf:"varint,4,opt,name=packets_transmitted,json=packetsTransmitted,proto3" json:"packets_transmitted,omitempty"`
	PacketsReceived      int32    `protobuf:"varint,5,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	AvgResponseMs        float32  `protobuf:"fixed32,6,opt,name=avg_response_ms,json=avgResponseMs,proto3" json:"avg_response_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResult) Reset()         { *m = PingResult{} }
func (m *PingResult) String() string { return proto.CompactTextString(m) }
func (*PingResult) ProtoMessage()    {}
func (*PingResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{3}
}
func (m *PingResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResult.Unmarshal(m, b)
}
func (m *PingResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResult.Marshal(b, m, deterministic)
}
func (dst *PingResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResult.Merge(dst, src)
}
func (m *PingResult) XXX_Size() int {
	return xxx_messageInfo_PingResult.Size(m)
}
func (m *PingResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResult.DiscardUnknown(m)
}

var xxx_messageInfo_PingResult proto.InternalMessageInfo

func (m *PingResult) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *PingResult) GetNumPackets() int32 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

func (m *PingResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PingResult) GetPacketsTransmitted() int32 {
	if m != nil {
		return m.PacketsTransmitted
	}
	return 0
}

func (m *PingResult) GetPacketsReceived() int32 {
	if m != nil {
		return m.PacketsReceived
	}
	return 0
}

func (m *PingResult) GetAvgResponseMs() float32 {
	if m != nil {
		return m.AvgResponseMs
	}
	return 0
}

type TracerouteProbe struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	RttMs                float32  `protobuf:"fixed32,3,opt,name=rtt_ms,json=rttMs,proto3" json:"rtt_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerouteProbe) Reset()         { *m = TracerouteProbe{} }
func (m *TracerouteProbe) String() string { return proto.CompactTextString(m) }
func (*TracerouteProbe) ProtoMessage()    {}
func (*TracerouteProbe) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{4}
}
func (m *TracerouteProbe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteProbe.Unmarshal(m, b)
}
func (m *TracerouteProbe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteProbe.Marshal(b, m, deterministic)
}
func (dst *TracerouteProbe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteProbe.Merge(dst, src)
}
func (m *TracerouteProbe) XXX_Size() int {
	return xxx_messageInfo_TracerouteProbe.Size(m)
}
func (m *TracerouteProbe) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteProbe.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteProbe proto.InternalMessageInfo

func (m *TracerouteProbe) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *TracerouteProbe) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *TracerouteProbe) GetRttMs() float32 {
	if m != nil {
		return m.RttMs
	}
	return 0
}

type TracerouteHop struct {
	Idx                  int32              `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Probes               []*TracerouteProbe `protobuf:"bytes,2,rep,name=probes,proto3" json:"probes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TracerouteHop) Reset()         { *m = TracerouteHop{} }
func (m *TracerouteHop) String() string { return proto.CompactTextString(m) }
func (*TracerouteHop) ProtoMessage()    {}
func (*TracerouteHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{5}
}
func (m *TracerouteHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteHop.Unmarshal(m, b)
}
func (m *TracerouteHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteHop.Marshal(b, m, deterministic)
}
func (dst *TracerouteHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteHop.Merge(dst, src)
}
func (m *TracerouteHop) XXX_Size() int {
	return xxx_messageInfo_TracerouteHop.Size(m)
}
func (m *TracerouteHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteHop.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteHop proto.InternalMessageInfo

func (m *TracerouteHop) GetIdx() int32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *TracerouteHop) GetProbes() []*TracerouteProbe {
	if m != nil {
		return m.Probes
	}
	return nil
}

type TracerouteResult struct {
	Error                string           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	HostOrIp             string           `protobuf:"bytes,2,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	Hops                 []*TracerouteHop `protobuf:"bytes,3,rep,name=hops,proto3" json:"hops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TracerouteResult) Reset()         { *m = TracerouteResult{} }
func (m *TracerouteResult) String() string { return proto.CompactTextString(m) }
func (*TracerouteResult) ProtoMessage()    {}
func (*TracerouteResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{6}
}
func (m *TracerouteResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteResult.Unmarshal(m, b)
}
func (m *TracerouteResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteResult.Marshal(b, m, deterministic)
}
func (dst *TracerouteResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteResult.Merge(dst, src)
}
func (m *TracerouteResult) XXX_Size() int {
	return xxx_messageInfo_TracerouteResult.Size(m)
}
func (m *TracerouteResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteResult.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteResult proto.InternalMessageInfo

func (m *TracerouteResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TracerouteResult) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *TracerouteResult) GetHops() []*TracerouteHop {
	if m != nil {
		return m.Hops
	}
	return nil
}

type NetworkTestResponse struct {
	Pings                []*PingResult       `protobuf:"bytes,1,rep,name=pings,proto3" json:"pings,omitempty"`
	Traceroutes          []*TracerouteResult `protobuf:"bytes,2,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NetworkTestResponse) Reset()         { *m = NetworkTestResponse{} }
func (m *NetworkTestResponse) String() string { return proto.CompactTextString(m) }
func (*NetworkTestResponse) ProtoMessage()    {}
func (*NetworkTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{7}
}
func (m *NetworkTestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkTestResponse.Unmarshal(m, b)
}
func (m *NetworkTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkTestResponse.Marshal(b, m, deterministic)
}
func (dst *NetworkTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTestResponse.Merge(dst, src)
}
func (m *NetworkTestResponse) XXX_Size() int {
	return xxx_messageInfo_NetworkTestResponse.Size(m)
}
func (m *NetworkTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTestResponse proto.InternalMessageInfo

func (m *NetworkTestResponse) GetPings() []*PingResult {
	if m != nil {
		return m.Pings
	}
	return nil
}

func (m *NetworkTestResponse) GetTraceroutes() []*TracerouteResult {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

type GetGatewayIdResponse struct {
	GatewayId            string   `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGatewayIdResponse) Reset()         { *m = GetGatewayIdResponse{} }
func (m *GetGatewayIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetGatewayIdResponse) ProtoMessage()    {}
func (*GetGatewayIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{8}
}
func (m *GetGatewayIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayIdResponse.Unmarshal(m, b)
}
func (m *GetGatewayIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayIdResponse.Marshal(b, m, deterministic)
}
func (dst *GetGatewayIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayIdResponse.Merge(dst, src)
}
func (m *GetGatewayIdResponse) XXX_Size() int {
	return xxx_messageInfo_GetGatewayIdResponse.Size(m)
}
func (m *GetGatewayIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayIdResponse proto.InternalMessageInfo

func (m *GetGatewayIdResponse) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

type RestartServicesRequest struct {
	Services             []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartServicesRequest) Reset()         { *m = RestartServicesRequest{} }
func (m *RestartServicesRequest) String() string { return proto.CompactTextString(m) }
func (*RestartServicesRequest) ProtoMessage()    {}
func (*RestartServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{9}
}
func (m *RestartServicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartServicesRequest.Unmarshal(m, b)
}
func (m *RestartServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartServicesRequest.Marshal(b, m, deterministic)
}
func (dst *RestartServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartServicesRequest.Merge(dst, src)
}
func (m *RestartServicesRequest) XXX_Size() int {
	return xxx_messageInfo_RestartServicesRequest.Size(m)
}
func (m *RestartServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartServicesRequest proto.InternalMessageInfo

func (m *RestartServicesRequest) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type GenericCommandParams struct {
	Command              string          `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Params               *_struct.Struct `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GenericCommandParams) Reset()         { *m = GenericCommandParams{} }
func (m *GenericCommandParams) String() string { return proto.CompactTextString(m) }
func (*GenericCommandParams) ProtoMessage()    {}
func (*GenericCommandParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{10}
}
func (m *GenericCommandParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericCommandParams.Unmarshal(m, b)
}
func (m *GenericCommandParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericCommandParams.Marshal(b, m, deterministic)
}
func (dst *GenericCommandParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericCommandParams.Merge(dst, src)
}
func (m *GenericCommandParams) XXX_Size() int {
	return xxx_messageInfo_GenericCommandParams.Size(m)
}
func (m *GenericCommandParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericCommandParams.DiscardUnknown(m)
}

var xxx_messageInfo_GenericCommandParams proto.InternalMessageInfo

func (m *GenericCommandParams) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *GenericCommandParams) GetParams() *_struct.Struct {
	if m != nil {
		return m.Params
	}
	return nil
}

type GenericCommandResponse struct {
	Response             *_struct.Struct `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GenericCommandResponse) Reset()         { *m = GenericCommandResponse{} }
func (m *GenericCommandResponse) String() string { return proto.CompactTextString(m) }
func (*GenericCommandResponse) ProtoMessage()    {}
func (*GenericCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{11}
}
func (m *GenericCommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericCommandResponse.Unmarshal(m, b)
}
func (m *GenericCommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericCommandResponse.Marshal(b, m, deterministic)
}
func (dst *GenericCommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericCommandResponse.Merge(dst, src)
}
func (m *GenericCommandResponse) XXX_Size() int {
	return xxx_messageInfo_GenericCommandResponse.Size(m)
}
func (m *GenericCommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericCommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericCommandResponse proto.InternalMessageInfo

func (m *GenericCommandResponse) GetResponse() *_struct.Struct {
	if m != nil {
		return m.Response
	}
	return nil
}

type TailLogsRequest struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TailLogsRequest) Reset()         { *m = TailLogsRequest{} }
func (m *TailLogsRequest) String() string { return proto.CompactTextString(m) }
func (*TailLogsRequest) ProtoMessage()    {}
func (*TailLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{12}
}
func (m *TailLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TailLogsRequest.Unmarshal(m, b)
}
func (m *TailLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TailLogsRequest.Marshal(b, m, deterministic)
}
func (dst *TailLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TailLogsRequest.Merge(dst, src)
}
func (m *TailLogsRequest) XXX_Size() int {
	return xxx_messageInfo_TailLogsRequest.Size(m)
}
func (m *TailLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TailLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TailLogsRequest proto.InternalMessageInfo

func (m *TailLogsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type LogLine struct {
	Line                 string   `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogLine) Reset()         { *m = LogLine{} }
func (m *LogLine) String() string { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()    {}
func (*LogLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_43040f8e59f24b09, []int{13}
}
func (m *LogLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLine.Unmarshal(m, b)
}
func (m *LogLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLine.Marshal(b, m, deterministic)
}
func (dst *LogLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLine.Merge(dst, src)
}
func (m *LogLine) XXX_Size() int {
	return xxx_messageInfo_LogLine.Size(m)
}
func (m *LogLine) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLine.DiscardUnknown(m)
}

var xxx_messageInfo_LogLine proto.InternalMessageInfo

func (m *LogLine) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func init() {
	proto.RegisterType((*PingParams)(nil), "magma.orc8r.PingParams")
	proto.RegisterType((*TracerouteParams)(nil), "magma.orc8r.TracerouteParams")
	proto.RegisterType((*NetworkTestRequest)(nil), "magma.orc8r.NetworkTestRequest")
	proto.RegisterType((*PingResult)(nil), "magma.orc8r.PingResult")
	proto.RegisterType((*TracerouteProbe)(nil), "magma.orc8r.TracerouteProbe")
	proto.RegisterType((*TracerouteHop)(nil), "magma.orc8r.TracerouteHop")
	proto.RegisterType((*TracerouteResult)(nil), "magma.orc8r.TracerouteResult")
	proto.RegisterType((*NetworkTestResponse)(nil), "magma.orc8r.NetworkTestResponse")
	proto.RegisterType((*GetGatewayIdResponse)(nil), "magma.orc8r.GetGatewayIdResponse")
	proto.RegisterType((*RestartServicesRequest)(nil), "magma.orc8r.RestartServicesRequest")
	proto.RegisterType((*GenericCommandParams)(nil), "magma.orc8r.GenericCommandParams")
	proto.RegisterType((*GenericCommandResponse)(nil), "magma.orc8r.GenericCommandResponse")
	proto.RegisterType((*TailLogsRequest)(nil), "magma.orc8r.TailLogsRequest")
	proto.RegisterType((*LogLine)(nil), "magma.orc8r.LogLine")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MagmadClient is the client API for Magmad service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MagmadClient interface {
	// Starts all magma services
	StartServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Stops all magma services
	StopServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Reboot the gateway device
	Reboot(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Restart specified magma services
	RestartServices(ctx context.Context, in *RestartServicesRequest, opts ...grpc.CallOption) (*Void, error)
	// Updates AG configs and restarts affected AG services
	SetConfigs(ctx context.Context, in *GatewayConfigs, opts ...grpc.CallOption) (*Void, error)
	// Get current AG configs
	GetConfigs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GatewayConfigs, error)
	// Execute some network commands to check gateway network health
	RunNetworkTests(ctx context.Context, in *NetworkTestRequest, opts ...grpc.CallOption) (*NetworkTestResponse, error)
	// Get gateway hardware ID
	GetGatewayId(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetGatewayIdResponse, error)
	// Execute generic command
	GenericCommand(ctx context.Context, in *GenericCommandParams, opts ...grpc.CallOption) (*GenericCommandResponse, error)
	// Get stream of logs
	TailLogs(ctx context.Context, in *TailLogsRequest, opts ...grpc.CallOption) (Magmad_TailLogsClient, error)
}

type magmadClient struct {
	cc *grpc.ClientConn
}

func NewMagmadClient(cc *grpc.ClientConn) MagmadClient {
	return &magmadClient{cc}
}

func (c *magmadClient) StartServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/StartServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) StopServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/StopServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) Reboot(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/Reboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) RestartServices(ctx context.Context, in *RestartServicesRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/RestartServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) SetConfigs(ctx context.Context, in *GatewayConfigs, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/SetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) GetConfigs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GatewayConfigs, error) {
	out := new(GatewayConfigs)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/GetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) RunNetworkTests(ctx context.Context, in *NetworkTestRequest, opts ...grpc.CallOption) (*NetworkTestResponse, error) {
	out := new(NetworkTestResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/RunNetworkTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) GetGatewayId(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetGatewayIdResponse, error) {
	out := new(GetGatewayIdResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/GetGatewayId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) GenericCommand(ctx context.Context, in *GenericCommandParams, opts ...grpc.CallOption) (*GenericCommandResponse, error) {
	out := new(GenericCommandResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/GenericCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) TailLogs(ctx context.Context, in *TailLogsRequest, opts ...grpc.CallOption) (Magmad_TailLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Magmad_serviceDesc.Streams[0], "/magma.orc8r.Magmad/TailLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &magmadTailLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Magmad_TailLogsClient interface {
	Recv() (*LogLine, error)
	grpc.ClientStream
}

type magmadTailLogsClient struct {
	grpc.ClientStream
}

func (x *magmadTailLogsClient) Recv() (*LogLine, error) {
	m := new(LogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MagmadServer is the server API for Magmad service.
type MagmadServer interface {
	// Starts all magma services
	StartServices(context.Context, *Void) (*Void, error)
	// Stops all magma services
	StopServices(context.Context, *Void) (*Void, error)
	// Reboot the gateway device
	Reboot(context.Context, *Void) (*Void, error)
	// Restart specified magma services
	RestartServices(context.Context, *RestartServicesRequest) (*Void, error)
	// Updates AG configs and restarts affected AG services
	SetConfigs(context.Context, *GatewayConfigs) (*Void, error)
	// Get current AG configs
	GetConfigs(context.Context, *Void) (*GatewayConfigs, error)
	// Execute some network commands to check gateway network health
	RunNetworkTests(context.Context, *NetworkTestRequest) (*NetworkTestResponse, error)
	// Get gateway hardware ID
	GetGatewayId(context.Context, *Void) (*GetGatewayIdResponse, error)
	// Execute generic command
	GenericCommand(context.Context, *GenericCommandParams) (*GenericCommandResponse, error)
	// Get stream of logs
	TailLogs(*TailLogsRequest, Magmad_TailLogsServer) error
}

func RegisterMagmadServer(s *grpc.Server, srv MagmadServer) {
	s.RegisterService(&_Magmad_serviceDesc, srv)
}

func _Magmad_StartServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).StartServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/StartServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).StartServices(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_StopServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).StopServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/StopServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).StopServices(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).Reboot(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_RestartServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).RestartServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/RestartServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).RestartServices(ctx, req.(*RestartServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_SetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).SetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/SetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).SetConfigs(ctx, req.(*GatewayConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_GetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).GetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/GetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).GetConfigs(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_RunNetworkTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).RunNetworkTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/RunNetworkTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).RunNetworkTests(ctx, req.(*NetworkTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_GetGatewayId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).GetGatewayId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/GetGatewayId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).GetGatewayId(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_GenericCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericCommandParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).GenericCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/GenericCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).GenericCommand(ctx, req.(*GenericCommandParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_TailLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MagmadServer).TailLogs(m, &magmadTailLogsServer{stream})
}

type Magmad_TailLogsServer interface {
	Send(*LogLine) error
	grpc.ServerStream
}

type magmadTailLogsServer struct {
	grpc.ServerStream
}

func (x *magmadTailLogsServer) Send(m *LogLine) error {
	return x.ServerStream.SendMsg(m)
}

var _Magmad_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Magmad",
	HandlerType: (*MagmadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServices",
			Handler:    _Magmad_StartServices_Handler,
		},
		{
			MethodName: "StopServices",
			Handler:    _Magmad_StopServices_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _Magmad_Reboot_Handler,
		},
		{
			MethodName: "RestartServices",
			Handler:    _Magmad_RestartServices_Handler,
		},
		{
			MethodName: "SetConfigs",
			Handler:    _Magmad_SetConfigs_Handler,
		},
		{
			MethodName: "GetConfigs",
			Handler:    _Magmad_GetConfigs_Handler,
		},
		{
			MethodName: "RunNetworkTests",
			Handler:    _Magmad_RunNetworkTests_Handler,
		},
		{
			MethodName: "GetGatewayId",
			Handler:    _Magmad_GetGatewayId_Handler,
		},
		{
			MethodName: "GenericCommand",
			Handler:    _Magmad_GenericCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailLogs",
			Handler:       _Magmad_TailLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orc8r/protos/magmad.proto",
}

func init() { proto.RegisterFile("orc8r/protos/magmad.proto", fileDescriptor_magmad_43040f8e59f24b09) }

var fileDescriptor_magmad_43040f8e59f24b09 = []byte{
	// 872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xb6, 0xec, 0xd8, 0xb1, 0x4f, 0x9a, 0x38, 0x63, 0xb3, 0x4e, 0x55, 0x63, 0xd4, 0x63, 0x81,
	0xc1, 0xc3, 0x30, 0x3b, 0x68, 0xba, 0x9f, 0xab, 0x0d, 0x68, 0x81, 0x25, 0x45, 0x93, 0x2d, 0xa0,
	0x8d, 0x0e, 0xe8, 0x8d, 0x40, 0x4b, 0xac, 0x2a, 0xd4, 0x12, 0x35, 0x92, 0x72, 0xd3, 0xfb, 0xed,
	0x9d, 0xf6, 0x42, 0x7b, 0x8f, 0x41, 0x14, 0xe5, 0x88, 0x8e, 0x93, 0x65, 0xdb, 0x95, 0x7d, 0xce,
	0xf9, 0xce, 0xff, 0xc7, 0x63, 0xc3, 0x43, 0x2e, 0x82, 0xef, 0xc5, 0x24, 0x13, 0x5c, 0x71, 0x39,
	0x49, 0x68, 0x94, 0xd0, 0x70, 0xac, 0x25, 0xb4, 0xa3, 0xa5, 0xb1, 0x06, 0x78, 0x36, 0x2e, 0xe0,
	0x49, 0xc2, 0xd3, 0x12, 0xe7, 0x79, 0x76, 0x88, 0x80, 0xa7, 0x6f, 0xe3, 0xc8, 0xd8, 0x06, 0x96,
	0x4d, 0x32, 0xb1, 0x8c, 0x03, 0x76, 0x7c, 0x74, 0x6c, 0xcc, 0x87, 0x11, 0xe7, 0xd1, 0x82, 0x95,
	0xf6, 0x79, 0xfe, 0x76, 0x22, 0x95, 0xc8, 0x03, 0x55, 0x5a, 0xf1, 0x2b, 0x80, 0x8b, 0x38, 0x8d,
	0x2e, 0xa8, 0xa0, 0x89, 0x44, 0x87, 0x00, 0xef, 0xb8, 0x54, 0x3e, 0x17, 0x7e, 0x9c, 0xb9, 0xce,
	0xd0, 0x19, 0xf5, 0x48, 0xb7, 0xd0, 0xfc, 0x22, 0x5e, 0x66, 0xe8, 0x31, 0xec, 0xa4, 0x79, 0xe2,
	0x67, 0x34, 0x78, 0xcf, 0x94, 0x74, 0x9b, 0x43, 0x67, 0xd4, 0x26, 0x90, 0xe6, 0xc9, 0x45, 0xa9,
	0xc1, 0x39, 0xec, 0xcf, 0x04, 0x0d, 0x98, 0xe0, 0xb9, 0x62, 0x77, 0x0a, 0xf9, 0x10, 0xba, 0x09,
	0xbd, 0xf4, 0xdf, 0xf1, 0xac, 0x8a, 0xb7, 0x9d, 0xd0, 0xcb, 0x53, 0x9e, 0x49, 0x34, 0x82, 0xfd,
	0xf9, 0x47, 0xc5, 0xa4, 0x9f, 0x31, 0x61, 0x72, 0xba, 0x2d, 0x0d, 0xd9, 0xd3, 0xfa, 0x0b, 0x26,
	0xca, 0xbc, 0xf8, 0x77, 0x07, 0xd0, 0xcf, 0x4c, 0x7d, 0xe0, 0xe2, 0xfd, 0x8c, 0x49, 0x45, 0xd8,
	0x6f, 0x39, 0x93, 0x0a, 0x7d, 0x0d, 0xed, 0x2c, 0x4e, 0x23, 0xe9, 0x3a, 0xc3, 0xd6, 0x68, 0xe7,
	0xe9, 0x67, 0xe3, 0xda, 0xac, 0xc7, 0x57, 0x4d, 0x93, 0x12, 0x85, 0x7e, 0x84, 0x1d, 0xb5, 0x2a,
	0xbe, 0xa8, 0xa6, 0x70, 0x1a, 0x58, 0x4e, 0xeb, 0xcd, 0x91, 0xba, 0x07, 0xfe, 0xcb, 0x29, 0x67,
	0x49, 0x98, 0xcc, 0x17, 0xea, 0x7f, 0xce, 0x12, 0x1d, 0x40, 0x9b, 0x09, 0xc1, 0x85, 0xee, 0xb9,
	0x47, 0x4a, 0x01, 0x4d, 0xe0, 0xbe, 0x71, 0xf1, 0x95, 0xa0, 0xa9, 0x4c, 0x62, 0xa5, 0x58, 0xe8,
	0x6e, 0x69, 0x77, 0x64, 0x4c, 0xb3, 0x2b, 0x0b, 0xfa, 0x12, 0xf6, 0x2b, 0x07, 0xc1, 0x02, 0x16,
	0x2f, 0x59, 0xe8, 0xb6, 0x35, 0xba, 0x6f, 0xf4, 0xc4, 0xa8, 0xd1, 0x17, 0xd0, 0xa7, 0xcb, 0xc8,
	0x17, 0x4c, 0x66, 0x3c, 0x95, 0xcc, 0x4f, 0xa4, 0xdb, 0x19, 0x3a, 0xa3, 0x26, 0xd9, 0xa5, 0xcb,
	0xa2, 0x29, 0xad, 0x3d, 0x97, 0x78, 0x06, 0xfd, 0xda, 0x20, 0x04, 0x9f, 0x33, 0xe4, 0x81, 0xee,
	0x2c, 0xa5, 0x09, 0xab, 0x77, 0x5a, 0xc8, 0x68, 0x0f, 0x9a, 0x71, 0xa6, 0x1b, 0xec, 0x91, 0x66,
	0x9c, 0xa1, 0x4f, 0xa1, 0x23, 0x94, 0x2a, 0xa2, 0xb7, 0x74, 0xf4, 0xb6, 0x50, 0xea, 0x5c, 0xe2,
	0x5f, 0x61, 0xf7, 0x2a, 0xea, 0x29, 0xcf, 0xd0, 0x3e, 0xb4, 0xe2, 0xf0, 0x52, 0x87, 0x6b, 0x93,
	0xe2, 0x2b, 0x7a, 0x06, 0x9d, 0xac, 0x48, 0x57, 0x2d, 0xe7, 0xf0, 0xa6, 0xe5, 0x14, 0x20, 0x62,
	0xb0, 0x78, 0x59, 0x27, 0xa5, 0xd9, 0xcd, 0x6a, 0xb8, 0x4e, 0x7d, 0xb8, 0xf6, 0xc6, 0x9a, 0x6b,
	0x1b, 0x1b, 0xc3, 0x96, 0xa6, 0x69, 0x4b, 0xe7, 0xf6, 0x6e, 0xc8, 0x7d, 0xca, 0x33, 0xa2, 0x71,
	0xf8, 0x0f, 0x07, 0xee, 0x5b, 0xac, 0x2c, 0x07, 0xf8, 0xcf, 0xb4, 0x2c, 0x6b, 0xfc, 0x4f, 0xb4,
	0x34, 0xae, 0x16, 0x2d, 0xbf, 0x81, 0x83, 0x13, 0xa6, 0x4e, 0xa8, 0x62, 0x1f, 0xe8, 0xc7, 0x97,
	0xe1, 0xaa, 0x8e, 0x01, 0x40, 0x54, 0x2a, 0xfd, 0x38, 0x34, 0x83, 0xe8, 0x45, 0x15, 0x0c, 0x3f,
	0x83, 0x07, 0x84, 0x49, 0x45, 0x85, 0x9a, 0x96, 0x17, 0x45, 0x56, 0xef, 0xca, 0x83, 0xae, 0x39,
	0x32, 0x65, 0x0f, 0x3d, 0xb2, 0x92, 0x31, 0x2d, 0x92, 0xa5, 0x4c, 0xc4, 0xc1, 0x0b, 0x9e, 0x24,
	0x34, 0x0d, 0xcd, 0x15, 0x70, 0x61, 0x3b, 0x28, 0x15, 0x26, 0x53, 0x25, 0xa2, 0x09, 0x74, 0x32,
	0x8d, 0xd1, 0x03, 0x2f, 0xe6, 0x51, 0xde, 0xab, 0x71, 0x75, 0xaf, 0xc6, 0x53, 0x7d, 0xaf, 0x88,
	0x81, 0xe1, 0x73, 0x78, 0x60, 0xa7, 0x58, 0x75, 0x74, 0x0c, 0xdd, 0x8a, 0xbc, 0x3a, 0xcb, 0x2d,
	0xc1, 0x56, 0x40, 0xfc, 0x15, 0xf4, 0x67, 0x34, 0x5e, 0x9c, 0xf1, 0x68, 0xd5, 0xa0, 0x0b, 0xdb,
	0xa6, 0xa1, 0xaa, 0x58, 0x23, 0xe2, 0x01, 0x6c, 0x9f, 0xf1, 0xe8, 0x2c, 0x4e, 0x19, 0x42, 0xb0,
	0xb5, 0x88, 0xd3, 0x0a, 0xa1, 0xbf, 0x3f, 0xfd, 0xb3, 0x0d, 0x9d, 0x73, 0x7d, 0xde, 0xd1, 0x77,
	0xb0, 0x3b, 0xad, 0x0f, 0x0f, 0x7d, 0x62, 0xad, 0xec, 0x35, 0x8f, 0x43, 0xef, 0xba, 0x0a, 0x37,
	0xd0, 0xb7, 0x70, 0x6f, 0xaa, 0x78, 0xf6, 0xaf, 0xfd, 0x8e, 0xa0, 0x43, 0xd8, 0x9c, 0x73, 0x75,
	0x67, 0x8f, 0x57, 0xd0, 0x5f, 0xdb, 0x30, 0x7a, 0x62, 0xe1, 0x36, 0xef, 0x7f, 0x73, 0xb0, 0x1f,
	0x00, 0xa6, 0x4c, 0xbd, 0xd0, 0xbf, 0x4b, 0x12, 0x3d, 0xb2, 0x20, 0x86, 0x7b, 0xc6, 0x78, 0xa3,
	0xff, 0xc9, 0x95, 0xff, 0x86, 0x16, 0x6e, 0x0b, 0x89, 0x1b, 0xe8, 0x35, 0xf4, 0x49, 0x9e, 0xd6,
	0xde, 0x9b, 0x44, 0x8f, 0x2d, 0x8f, 0xeb, 0x3f, 0x10, 0xde, 0xf0, 0x66, 0x80, 0x21, 0x47, 0x03,
	0xfd, 0x04, 0xf7, 0xea, 0xaf, 0x67, 0x53, 0x65, 0x9f, 0xdb, 0x95, 0x6d, 0x78, 0x6b, 0xb8, 0x81,
	0xde, 0xc0, 0x9e, 0xcd, 0x5a, 0xb4, 0xee, 0x76, 0xfd, 0xd5, 0x78, 0x4f, 0x6e, 0x81, 0xd4, 0x62,
	0x3f, 0x87, 0x6e, 0x45, 0x61, 0xb4, 0x76, 0x13, 0x6d, 0x66, 0x7b, 0x07, 0x96, 0xd5, 0x50, 0x19,
	0x37, 0x8e, 0x9c, 0xe7, 0x83, 0x37, 0x8f, 0xb4, 0x69, 0x52, 0xfe, 0x99, 0x08, 0x16, 0x3c, 0x0f,
	0x27, 0x11, 0x37, 0xff, 0x2a, 0xe6, 0x1d, 0xfd, 0x79, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x3f, 0x18, 0xc5, 0xcb, 0x08, 0x00, 0x00,
}
