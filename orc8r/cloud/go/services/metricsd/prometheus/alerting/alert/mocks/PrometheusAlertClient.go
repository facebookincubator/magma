// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import alert "magma/orc8r/cloud/go/services/metricsd/prometheus/alerting/alert"
import mock "github.com/stretchr/testify/mock"
import rulefmt "github.com/prometheus/prometheus/pkg/rulefmt"

// PrometheusAlertClient is an autogenerated mock type for the PrometheusAlertClient type
type PrometheusAlertClient struct {
	mock.Mock
}

// BulkUpdateRules provides a mock function with given fields: rules, networkID
func (_m *PrometheusAlertClient) BulkUpdateRules(rules []rulefmt.Rule, networkID string) (alert.BulkUpdateResults, error) {
	ret := _m.Called(rules, networkID)

	var r0 alert.BulkUpdateResults
	if rf, ok := ret.Get(0).(func([]rulefmt.Rule, string) alert.BulkUpdateResults); ok {
		r0 = rf(rules, networkID)
	} else {
		r0 = ret.Get(0).(alert.BulkUpdateResults)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]rulefmt.Rule, string) error); ok {
		r1 = rf(rules, networkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function with given fields: ruleName, networkID
func (_m *PrometheusAlertClient) DeleteRule(ruleName string, networkID string) error {
	ret := _m.Called(ruleName, networkID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(ruleName, networkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadRules provides a mock function with given fields: ruleName, networkID
func (_m *PrometheusAlertClient) ReadRules(ruleName string, networkID string) ([]rulefmt.Rule, error) {
	ret := _m.Called(ruleName, networkID)

	var r0 []rulefmt.Rule
	if rf, ok := ret.Get(0).(func(string, string) []rulefmt.Rule); ok {
		r0 = rf(ruleName, networkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rulefmt.Rule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ruleName, networkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuleExists provides a mock function with given fields: rulename, networkID
func (_m *PrometheusAlertClient) RuleExists(rulename string, networkID string) bool {
	ret := _m.Called(rulename, networkID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(rulename, networkID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateRule provides a mock function with given fields: rule, networkID
func (_m *PrometheusAlertClient) UpdateRule(rule rulefmt.Rule, networkID string) error {
	ret := _m.Called(rule, networkID)

	var r0 error
	if rf, ok := ret.Get(0).(func(rulefmt.Rule, string) error); ok {
		r0 = rf(rule, networkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRule provides a mock function with given fields: rule
func (_m *PrometheusAlertClient) ValidateRule(rule rulefmt.Rule) error {
	ret := _m.Called(rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(rulefmt.Rule) error); ok {
		r0 = rf(rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteRule provides a mock function with given fields: rule, networkID
func (_m *PrometheusAlertClient) WriteRule(rule rulefmt.Rule, networkID string) error {
	ret := _m.Called(rule, networkID)

	var r0 error
	if rf, ok := ret.Get(0).(func(rulefmt.Rule, string) error); ok {
		r0 = rf(rule, networkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
