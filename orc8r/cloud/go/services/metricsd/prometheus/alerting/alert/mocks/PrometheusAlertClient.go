// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import alert "magma/orc8r/cloud/go/services/metricsd/prometheus/alerting/alert"
import mock "github.com/stretchr/testify/mock"
import rulefmt "github.com/prometheus/prometheus/pkg/rulefmt"

// PrometheusAlertClient is an autogenerated mock type for the PrometheusAlertClient type
type PrometheusAlertClient struct {
	mock.Mock
}

// BulkUpdateRules provides a mock function with given fields: networkID, rules
func (_m *PrometheusAlertClient) BulkUpdateRules(networkID string, rules []rulefmt.Rule) (alert.BulkUpdateResults, error) {
	ret := _m.Called(networkID, rules)

	var r0 alert.BulkUpdateResults
	if rf, ok := ret.Get(0).(func(string, []rulefmt.Rule) alert.BulkUpdateResults); ok {
		r0 = rf(networkID, rules)
	} else {
		r0 = ret.Get(0).(alert.BulkUpdateResults)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []rulefmt.Rule) error); ok {
		r1 = rf(networkID, rules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function with given fields: networkID, ruleName
func (_m *PrometheusAlertClient) DeleteRule(networkID string, ruleName string) error {
	ret := _m.Called(networkID, ruleName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(networkID, ruleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadRules provides a mock function with given fields: networkID, ruleName
func (_m *PrometheusAlertClient) ReadRules(networkID string, ruleName string) ([]rulefmt.Rule, error) {
	ret := _m.Called(networkID, ruleName)

	var r0 []rulefmt.Rule
	if rf, ok := ret.Get(0).(func(string, string) []rulefmt.Rule); ok {
		r0 = rf(networkID, ruleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rulefmt.Rule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(networkID, ruleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuleExists provides a mock function with given fields: networkID, rulename
func (_m *PrometheusAlertClient) RuleExists(networkID string, rulename string) bool {
	ret := _m.Called(networkID, rulename)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(networkID, rulename)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateRule provides a mock function with given fields: networkID, rule
func (_m *PrometheusAlertClient) UpdateRule(networkID string, rule rulefmt.Rule) error {
	ret := _m.Called(networkID, rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, rulefmt.Rule) error); ok {
		r0 = rf(networkID, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRule provides a mock function with given fields: rule
func (_m *PrometheusAlertClient) ValidateRule(rule rulefmt.Rule) error {
	ret := _m.Called(rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(rulefmt.Rule) error); ok {
		r0 = rf(rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteRule provides a mock function with given fields: networkID, rule
func (_m *PrometheusAlertClient) WriteRule(networkID string, rule rulefmt.Rule) error {
	ret := _m.Called(networkID, rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, rulefmt.Rule) error); ok {
		r0 = rf(networkID, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
