// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ACLEntity Access Controlled Entity
// swagger:model acl_entity
type ACLEntity struct {

	// entity type
	// Enum: [OPERATOR NETWORK OPERATOR_WILDCARD NETWORK_WILDCARD]
	EntityType string `json:"entity_type,omitempty"`

	// network id
	NetworkID NetworkID `json:"network_id,omitempty"`

	// operator id
	OperatorID OperatorID `json:"operator_id,omitempty"`

	// permissions
	Permissions PermissionsMask `json:"permissions,omitempty"`
}

// Validate validates this acl entity
func (m *ACLEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var aclEntityTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPERATOR","NETWORK","OPERATOR_WILDCARD","NETWORK_WILDCARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aclEntityTypeEntityTypePropEnum = append(aclEntityTypeEntityTypePropEnum, v)
	}
}

const (

	// ACLEntityEntityTypeOPERATOR captures enum value "OPERATOR"
	ACLEntityEntityTypeOPERATOR string = "OPERATOR"

	// ACLEntityEntityTypeNETWORK captures enum value "NETWORK"
	ACLEntityEntityTypeNETWORK string = "NETWORK"

	// ACLEntityEntityTypeOPERATORWILDCARD captures enum value "OPERATOR_WILDCARD"
	ACLEntityEntityTypeOPERATORWILDCARD string = "OPERATOR_WILDCARD"

	// ACLEntityEntityTypeNETWORKWILDCARD captures enum value "NETWORK_WILDCARD"
	ACLEntityEntityTypeNETWORKWILDCARD string = "NETWORK_WILDCARD"
)

// prop value enum
func (m *ACLEntity) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, aclEntityTypeEntityTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ACLEntity) validateEntityType(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *ACLEntity) validateNetworkID(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkID) { // not required
		return nil
	}

	if err := m.NetworkID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("network_id")
		}
		return err
	}

	return nil
}

func (m *ACLEntity) validateOperatorID(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatorID) { // not required
		return nil
	}

	if err := m.OperatorID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operator_id")
		}
		return err
	}

	return nil
}

func (m *ACLEntity) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if err := m.Permissions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("permissions")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ACLEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ACLEntity) UnmarshalBinary(b []byte) error {
	var res ACLEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
