// Code generated by protoc-gen-go. DO NOT EDIT.
// source: configurator.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protos "magma/orc8r/cloud/go/protos"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Magmad gateway configuration
type MagmadGatewayConfig struct {
	// Interval for the gateways to send checkin rpc calls to the cloud.
	CheckinInterval int32 `protobuf:"varint,1,opt,name=checkin_interval,json=checkinInterval,proto3" json:"checkin_interval,omitempty"`
	// Checkin rpc timeout
	CheckinTimeout int32 `protobuf:"varint,2,opt,name=checkin_timeout,json=checkinTimeout,proto3" json:"checkin_timeout,omitempty"`
	// Enables autoupgrading of the magma package
	AutoupgradeEnabled bool `protobuf:"varint,3,opt,name=autoupgrade_enabled,json=autoupgradeEnabled,proto3" json:"autoupgrade_enabled,omitempty"`
	// Interval to poll for package upgrades
	AutoupgradePollInterval int32 `protobuf:"varint,4,opt,name=autoupgrade_poll_interval,json=autoupgradePollInterval,proto3" json:"autoupgrade_poll_interval,omitempty"`
	// The tier the gateway belongs in
	Tier string `protobuf:"bytes,5,opt,name=tier,proto3" json:"tier,omitempty"`
	// Feature flags which turn off/on new features for limited roll-out
	FeatureFlags map[string]bool `protobuf:"bytes,6,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// List of dynamic_services
	DynamicServices      []string `protobuf:"bytes,7,rep,name=dynamic_services,json=dynamicServices,proto3" json:"dynamic_services,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MagmadGatewayConfig) Reset()         { *m = MagmadGatewayConfig{} }
func (m *MagmadGatewayConfig) String() string { return proto.CompactTextString(m) }
func (*MagmadGatewayConfig) ProtoMessage()    {}
func (*MagmadGatewayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{0}
}
func (m *MagmadGatewayConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MagmadGatewayConfig.Unmarshal(m, b)
}
func (m *MagmadGatewayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MagmadGatewayConfig.Marshal(b, m, deterministic)
}
func (dst *MagmadGatewayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MagmadGatewayConfig.Merge(dst, src)
}
func (m *MagmadGatewayConfig) XXX_Size() int {
	return xxx_messageInfo_MagmadGatewayConfig.Size(m)
}
func (m *MagmadGatewayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MagmadGatewayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MagmadGatewayConfig proto.InternalMessageInfo

func (m *MagmadGatewayConfig) GetCheckinInterval() int32 {
	if m != nil {
		return m.CheckinInterval
	}
	return 0
}

func (m *MagmadGatewayConfig) GetCheckinTimeout() int32 {
	if m != nil {
		return m.CheckinTimeout
	}
	return 0
}

func (m *MagmadGatewayConfig) GetAutoupgradeEnabled() bool {
	if m != nil {
		return m.AutoupgradeEnabled
	}
	return false
}

func (m *MagmadGatewayConfig) GetAutoupgradePollInterval() int32 {
	if m != nil {
		return m.AutoupgradePollInterval
	}
	return 0
}

func (m *MagmadGatewayConfig) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *MagmadGatewayConfig) GetFeatureFlags() map[string]bool {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *MagmadGatewayConfig) GetDynamicServices() []string {
	if m != nil {
		return m.DynamicServices
	}
	return nil
}

// Network entity to be stored in networks table. Name is required.
type MagmadNetworkRecord struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Features             map[string]string `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MagmadNetworkRecord) Reset()         { *m = MagmadNetworkRecord{} }
func (m *MagmadNetworkRecord) String() string { return proto.CompactTextString(m) }
func (*MagmadNetworkRecord) ProtoMessage()    {}
func (*MagmadNetworkRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{1}
}
func (m *MagmadNetworkRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MagmadNetworkRecord.Unmarshal(m, b)
}
func (m *MagmadNetworkRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MagmadNetworkRecord.Marshal(b, m, deterministic)
}
func (dst *MagmadNetworkRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MagmadNetworkRecord.Merge(dst, src)
}
func (m *MagmadNetworkRecord) XXX_Size() int {
	return xxx_messageInfo_MagmadNetworkRecord.Size(m)
}
func (m *MagmadNetworkRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MagmadNetworkRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MagmadNetworkRecord proto.InternalMessageInfo

func (m *MagmadNetworkRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MagmadNetworkRecord) GetFeatures() map[string]string {
	if m != nil {
		return m.Features
	}
	return nil
}

type NetworkRecordRequest struct {
	Record               *MagmadNetworkRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	Id                   string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NetworkRecordRequest) Reset()         { *m = NetworkRecordRequest{} }
func (m *NetworkRecordRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkRecordRequest) ProtoMessage()    {}
func (*NetworkRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{2}
}
func (m *NetworkRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkRecordRequest.Unmarshal(m, b)
}
func (m *NetworkRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkRecordRequest.Marshal(b, m, deterministic)
}
func (dst *NetworkRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkRecordRequest.Merge(dst, src)
}
func (m *NetworkRecordRequest) XXX_Size() int {
	return xxx_messageInfo_NetworkRecordRequest.Size(m)
}
func (m *NetworkRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkRecordRequest proto.InternalMessageInfo

func (m *NetworkRecordRequest) GetRecord() *MagmadNetworkRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *NetworkRecordRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AccessGatewayRecord struct {
	HwId *protos.AccessGatewayID `protobuf:"bytes,1,opt,name=hw_id,json=hwId,proto3" json:"hw_id,omitempty"`
	Name string                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Key  *protos.ChallengeKey    `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	// DEPRECATED
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessGatewayRecord) Reset()         { *m = AccessGatewayRecord{} }
func (m *AccessGatewayRecord) String() string { return proto.CompactTextString(m) }
func (*AccessGatewayRecord) ProtoMessage()    {}
func (*AccessGatewayRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{3}
}
func (m *AccessGatewayRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessGatewayRecord.Unmarshal(m, b)
}
func (m *AccessGatewayRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessGatewayRecord.Marshal(b, m, deterministic)
}
func (dst *AccessGatewayRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessGatewayRecord.Merge(dst, src)
}
func (m *AccessGatewayRecord) XXX_Size() int {
	return xxx_messageInfo_AccessGatewayRecord.Size(m)
}
func (m *AccessGatewayRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessGatewayRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AccessGatewayRecord proto.InternalMessageInfo

func (m *AccessGatewayRecord) GetHwId() *protos.AccessGatewayID {
	if m != nil {
		return m.HwId
	}
	return nil
}

func (m *AccessGatewayRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessGatewayRecord) GetKey() *protos.ChallengeKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *AccessGatewayRecord) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AccessGatewayRecord) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type GatewayRecordRequest struct {
	GatewayId            *protos.Identity     `protobuf:"bytes,1,opt,name=gatewayId,proto3" json:"gatewayId,omitempty"`
	Record               *AccessGatewayRecord `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GatewayRecordRequest) Reset()         { *m = GatewayRecordRequest{} }
func (m *GatewayRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayRecordRequest) ProtoMessage()    {}
func (*GatewayRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{4}
}
func (m *GatewayRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayRecordRequest.Unmarshal(m, b)
}
func (m *GatewayRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayRecordRequest.Marshal(b, m, deterministic)
}
func (dst *GatewayRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRecordRequest.Merge(dst, src)
}
func (m *GatewayRecordRequest) XXX_Size() int {
	return xxx_messageInfo_GatewayRecordRequest.Size(m)
}
func (m *GatewayRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRecordRequest proto.InternalMessageInfo

func (m *GatewayRecordRequest) GetGatewayId() *protos.Identity {
	if m != nil {
		return m.GatewayId
	}
	return nil
}

func (m *GatewayRecordRequest) GetRecord() *AccessGatewayRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type MarshaledConfigs struct {
	Configs              []byte   `protobuf:"bytes,2,opt,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarshaledConfigs) Reset()         { *m = MarshaledConfigs{} }
func (m *MarshaledConfigs) String() string { return proto.CompactTextString(m) }
func (*MarshaledConfigs) ProtoMessage()    {}
func (*MarshaledConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{5}
}
func (m *MarshaledConfigs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarshaledConfigs.Unmarshal(m, b)
}
func (m *MarshaledConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarshaledConfigs.Marshal(b, m, deterministic)
}
func (dst *MarshaledConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarshaledConfigs.Merge(dst, src)
}
func (m *MarshaledConfigs) XXX_Size() int {
	return xxx_messageInfo_MarshaledConfigs.Size(m)
}
func (m *MarshaledConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_MarshaledConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_MarshaledConfigs proto.InternalMessageInfo

func (m *MarshaledConfigs) GetConfigs() []byte {
	if m != nil {
		return m.Configs
	}
	return nil
}

type GatewayConfigsRequestKey struct {
	GatewayId            *protos.Identity `protobuf:"bytes,1,opt,name=gatewayId,proto3" json:"gatewayId,omitempty"`
	ConfigKey            string           `protobuf:"bytes,2,opt,name=configKey,proto3" json:"configKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GatewayConfigsRequestKey) Reset()         { *m = GatewayConfigsRequestKey{} }
func (m *GatewayConfigsRequestKey) String() string { return proto.CompactTextString(m) }
func (*GatewayConfigsRequestKey) ProtoMessage()    {}
func (*GatewayConfigsRequestKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{6}
}
func (m *GatewayConfigsRequestKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayConfigsRequestKey.Unmarshal(m, b)
}
func (m *GatewayConfigsRequestKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayConfigsRequestKey.Marshal(b, m, deterministic)
}
func (dst *GatewayConfigsRequestKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayConfigsRequestKey.Merge(dst, src)
}
func (m *GatewayConfigsRequestKey) XXX_Size() int {
	return xxx_messageInfo_GatewayConfigsRequestKey.Size(m)
}
func (m *GatewayConfigsRequestKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayConfigsRequestKey.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayConfigsRequestKey proto.InternalMessageInfo

func (m *GatewayConfigsRequestKey) GetGatewayId() *protos.Identity {
	if m != nil {
		return m.GatewayId
	}
	return nil
}

func (m *GatewayConfigsRequestKey) GetConfigKey() string {
	if m != nil {
		return m.ConfigKey
	}
	return ""
}

type GatewayConfigsRequest struct {
	Key                  *GatewayConfigsRequestKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Configs              *MarshaledConfigs         `protobuf:"bytes,2,opt,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GatewayConfigsRequest) Reset()         { *m = GatewayConfigsRequest{} }
func (m *GatewayConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayConfigsRequest) ProtoMessage()    {}
func (*GatewayConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{7}
}
func (m *GatewayConfigsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayConfigsRequest.Unmarshal(m, b)
}
func (m *GatewayConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayConfigsRequest.Marshal(b, m, deterministic)
}
func (dst *GatewayConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayConfigsRequest.Merge(dst, src)
}
func (m *GatewayConfigsRequest) XXX_Size() int {
	return xxx_messageInfo_GatewayConfigsRequest.Size(m)
}
func (m *GatewayConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayConfigsRequest proto.InternalMessageInfo

func (m *GatewayConfigsRequest) GetKey() *GatewayConfigsRequestKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GatewayConfigsRequest) GetConfigs() *MarshaledConfigs {
	if m != nil {
		return m.Configs
	}
	return nil
}

type NetworkConfigRequestKey struct {
	NetworkId            *protos.Identity `protobuf:"bytes,1,opt,name=networkId,proto3" json:"networkId,omitempty"`
	ConfigKey            string           `protobuf:"bytes,2,opt,name=configKey,proto3" json:"configKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NetworkConfigRequestKey) Reset()         { *m = NetworkConfigRequestKey{} }
func (m *NetworkConfigRequestKey) String() string { return proto.CompactTextString(m) }
func (*NetworkConfigRequestKey) ProtoMessage()    {}
func (*NetworkConfigRequestKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{8}
}
func (m *NetworkConfigRequestKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkConfigRequestKey.Unmarshal(m, b)
}
func (m *NetworkConfigRequestKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkConfigRequestKey.Marshal(b, m, deterministic)
}
func (dst *NetworkConfigRequestKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkConfigRequestKey.Merge(dst, src)
}
func (m *NetworkConfigRequestKey) XXX_Size() int {
	return xxx_messageInfo_NetworkConfigRequestKey.Size(m)
}
func (m *NetworkConfigRequestKey) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkConfigRequestKey.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkConfigRequestKey proto.InternalMessageInfo

func (m *NetworkConfigRequestKey) GetNetworkId() *protos.Identity {
	if m != nil {
		return m.NetworkId
	}
	return nil
}

func (m *NetworkConfigRequestKey) GetConfigKey() string {
	if m != nil {
		return m.ConfigKey
	}
	return ""
}

type NetworkConfigRequest struct {
	Key                  *NetworkConfigRequestKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Configs              *MarshaledConfigs        `protobuf:"bytes,2,opt,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NetworkConfigRequest) Reset()         { *m = NetworkConfigRequest{} }
func (m *NetworkConfigRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkConfigRequest) ProtoMessage()    {}
func (*NetworkConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_configurator_2d5fb78b6d60bdd8, []int{9}
}
func (m *NetworkConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkConfigRequest.Unmarshal(m, b)
}
func (m *NetworkConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkConfigRequest.Marshal(b, m, deterministic)
}
func (dst *NetworkConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkConfigRequest.Merge(dst, src)
}
func (m *NetworkConfigRequest) XXX_Size() int {
	return xxx_messageInfo_NetworkConfigRequest.Size(m)
}
func (m *NetworkConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkConfigRequest proto.InternalMessageInfo

func (m *NetworkConfigRequest) GetKey() *NetworkConfigRequestKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *NetworkConfigRequest) GetConfigs() *MarshaledConfigs {
	if m != nil {
		return m.Configs
	}
	return nil
}

func init() {
	proto.RegisterType((*MagmadGatewayConfig)(nil), "magma.orc8r.magmad.MagmadGatewayConfig")
	proto.RegisterMapType((map[string]bool)(nil), "magma.orc8r.magmad.MagmadGatewayConfig.FeatureFlagsEntry")
	proto.RegisterType((*MagmadNetworkRecord)(nil), "magma.orc8r.magmad.MagmadNetworkRecord")
	proto.RegisterMapType((map[string]string)(nil), "magma.orc8r.magmad.MagmadNetworkRecord.FeaturesEntry")
	proto.RegisterType((*NetworkRecordRequest)(nil), "magma.orc8r.magmad.NetworkRecordRequest")
	proto.RegisterType((*AccessGatewayRecord)(nil), "magma.orc8r.magmad.AccessGatewayRecord")
	proto.RegisterType((*GatewayRecordRequest)(nil), "magma.orc8r.magmad.GatewayRecordRequest")
	proto.RegisterType((*MarshaledConfigs)(nil), "magma.orc8r.magmad.MarshaledConfigs")
	proto.RegisterType((*GatewayConfigsRequestKey)(nil), "magma.orc8r.magmad.GatewayConfigsRequestKey")
	proto.RegisterType((*GatewayConfigsRequest)(nil), "magma.orc8r.magmad.GatewayConfigsRequest")
	proto.RegisterType((*NetworkConfigRequestKey)(nil), "magma.orc8r.magmad.NetworkConfigRequestKey")
	proto.RegisterType((*NetworkConfigRequest)(nil), "magma.orc8r.magmad.NetworkConfigRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MagmadConfiguratorClient is the client API for MagmadConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MagmadConfiguratorClient interface {
	// RegisterGateway adds new records for AG with HW ID specified by
	// record.hw_id into all corresponding tables using gatewayId.logical_id as
	// the the newly registered gateway's logical ID, initializes the newly
	// created AG's configs to defaults
	// Will return error if a device with the given HW ID or requested by
	// gatewayId.logical_id logical id is already registered if
	// gatewayId.logical_id is empty - will register the network with a new
	// unique ID
	RegisterGateway(ctx context.Context, in *GatewayRecordRequest, opts ...grpc.CallOption) (*protos.Identity, error)
	// Lists all registered logical device Identities for the network specified
	// by Identity parameter
	ListGateways(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Identity_List, error)
	// FindGatewayId returns AG Identity with set logical_id
	// (Identity.Gateway.logical_id) for the given
	// registered HW Id (Identity.Gateway.hardware_id) on the network
	// (Identity.Gateway.network_id)
	FindGatewayId(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Identity, error)
	// FindGatewayRecord returns AG Record for a given registered logical ID
	// (Identity:Gateway.logical_id)
	FindGatewayRecord(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*AccessGatewayRecord, error)
	// Finds and Updates the GW record, the record's HwId must be either omitted
	// or must match the GW's registered HW ID, the HwId is not mutable
	UpdateGatewayRecord(ctx context.Context, in *GatewayRecordRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// FindGatewayNetworkId returns Network Id of the network, the Gatway HW ID
	// is registered on
	FindGatewayNetworkId(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Identity, error)
	// RemoveGateway deletes all logical device & corresponding HW ID records &
	// configs and effectively performs de-registration of the AG with the cloud
	RemoveGateway(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error)
	// RegisterNetwork registers new network with ID specified by
	// NetworkRecordRequest.networkId, it will return error if the network with
	// the ID already exist
	// RegisterNetwork Returns the registered network Identity
	// If NetworkRecordRequest.networkId is not set, RegisterNetwork will
	// generate a new, unique network ID and use it for registration
	RegisterNetwork(ctx context.Context, in *NetworkRecordRequest, opts ...grpc.CallOption) (*protos.Identity, error)
	// ListNetworks returns a list of all registered network Identities
	ListNetworks(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Identity_List, error)
	// Returns the network record for a network ID
	GetNetwork(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*MagmadNetworkRecord, error)
	// Deletes given network if its Gateway & Subscriber tables are empty
	RemoveNetwork(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error)
	// Update a network record
	UpdateNetwork(ctx context.Context, in *NetworkRecordRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Deletes given network and its Gateway & Subscriber tables
	ForceRemoveNetwork(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error)
}

type magmadConfiguratorClient struct {
	cc *grpc.ClientConn
}

func NewMagmadConfiguratorClient(cc *grpc.ClientConn) MagmadConfiguratorClient {
	return &magmadConfiguratorClient{cc}
}

func (c *magmadConfiguratorClient) RegisterGateway(ctx context.Context, in *GatewayRecordRequest, opts ...grpc.CallOption) (*protos.Identity, error) {
	out := new(protos.Identity)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/RegisterGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) ListGateways(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Identity_List, error) {
	out := new(protos.Identity_List)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/ListGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) FindGatewayId(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Identity, error) {
	out := new(protos.Identity)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/FindGatewayId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) FindGatewayRecord(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*AccessGatewayRecord, error) {
	out := new(AccessGatewayRecord)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/FindGatewayRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) UpdateGatewayRecord(ctx context.Context, in *GatewayRecordRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/UpdateGatewayRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) FindGatewayNetworkId(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Identity, error) {
	out := new(protos.Identity)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/FindGatewayNetworkId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) RemoveGateway(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/RemoveGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) RegisterNetwork(ctx context.Context, in *NetworkRecordRequest, opts ...grpc.CallOption) (*protos.Identity, error) {
	out := new(protos.Identity)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/RegisterNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) ListNetworks(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Identity_List, error) {
	out := new(protos.Identity_List)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) GetNetwork(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*MagmadNetworkRecord, error) {
	out := new(MagmadNetworkRecord)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) RemoveNetwork(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/RemoveNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) UpdateNetwork(ctx context.Context, in *NetworkRecordRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/UpdateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadConfiguratorClient) ForceRemoveNetwork(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.magmad.MagmadConfigurator/ForceRemoveNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MagmadConfiguratorServer is the server API for MagmadConfigurator service.
type MagmadConfiguratorServer interface {
	// RegisterGateway adds new records for AG with HW ID specified by
	// record.hw_id into all corresponding tables using gatewayId.logical_id as
	// the the newly registered gateway's logical ID, initializes the newly
	// created AG's configs to defaults
	// Will return error if a device with the given HW ID or requested by
	// gatewayId.logical_id logical id is already registered if
	// gatewayId.logical_id is empty - will register the network with a new
	// unique ID
	RegisterGateway(context.Context, *GatewayRecordRequest) (*protos.Identity, error)
	// Lists all registered logical device Identities for the network specified
	// by Identity parameter
	ListGateways(context.Context, *protos.Identity) (*protos.Identity_List, error)
	// FindGatewayId returns AG Identity with set logical_id
	// (Identity.Gateway.logical_id) for the given
	// registered HW Id (Identity.Gateway.hardware_id) on the network
	// (Identity.Gateway.network_id)
	FindGatewayId(context.Context, *protos.Identity) (*protos.Identity, error)
	// FindGatewayRecord returns AG Record for a given registered logical ID
	// (Identity:Gateway.logical_id)
	FindGatewayRecord(context.Context, *protos.Identity) (*AccessGatewayRecord, error)
	// Finds and Updates the GW record, the record's HwId must be either omitted
	// or must match the GW's registered HW ID, the HwId is not mutable
	UpdateGatewayRecord(context.Context, *GatewayRecordRequest) (*protos.Void, error)
	// FindGatewayNetworkId returns Network Id of the network, the Gatway HW ID
	// is registered on
	FindGatewayNetworkId(context.Context, *protos.Identity) (*protos.Identity, error)
	// RemoveGateway deletes all logical device & corresponding HW ID records &
	// configs and effectively performs de-registration of the AG with the cloud
	RemoveGateway(context.Context, *protos.Identity) (*protos.Void, error)
	// RegisterNetwork registers new network with ID specified by
	// NetworkRecordRequest.networkId, it will return error if the network with
	// the ID already exist
	// RegisterNetwork Returns the registered network Identity
	// If NetworkRecordRequest.networkId is not set, RegisterNetwork will
	// generate a new, unique network ID and use it for registration
	RegisterNetwork(context.Context, *NetworkRecordRequest) (*protos.Identity, error)
	// ListNetworks returns a list of all registered network Identities
	ListNetworks(context.Context, *protos.Void) (*protos.Identity_List, error)
	// Returns the network record for a network ID
	GetNetwork(context.Context, *protos.Identity) (*MagmadNetworkRecord, error)
	// Deletes given network if its Gateway & Subscriber tables are empty
	RemoveNetwork(context.Context, *protos.Identity) (*protos.Void, error)
	// Update a network record
	UpdateNetwork(context.Context, *NetworkRecordRequest) (*protos.Void, error)
	// Deletes given network and its Gateway & Subscriber tables
	ForceRemoveNetwork(context.Context, *protos.Identity) (*protos.Void, error)
}

func RegisterMagmadConfiguratorServer(s *grpc.Server, srv MagmadConfiguratorServer) {
	s.RegisterService(&_MagmadConfigurator_serviceDesc, srv)
}

func _MagmadConfigurator_RegisterGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).RegisterGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/RegisterGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).RegisterGateway(ctx, req.(*GatewayRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).ListGateways(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_FindGatewayId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).FindGatewayId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/FindGatewayId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).FindGatewayId(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_FindGatewayRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).FindGatewayRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/FindGatewayRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).FindGatewayRecord(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_UpdateGatewayRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).UpdateGatewayRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/UpdateGatewayRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).UpdateGatewayRecord(ctx, req.(*GatewayRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_FindGatewayNetworkId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).FindGatewayNetworkId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/FindGatewayNetworkId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).FindGatewayNetworkId(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_RemoveGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).RemoveGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/RemoveGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).RemoveGateway(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_RegisterNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).RegisterNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/RegisterNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).RegisterNetwork(ctx, req.(*NetworkRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).ListNetworks(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).GetNetwork(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_RemoveNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).RemoveNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/RemoveNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).RemoveNetwork(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).UpdateNetwork(ctx, req.(*NetworkRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagmadConfigurator_ForceRemoveNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadConfiguratorServer).ForceRemoveNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.magmad.MagmadConfigurator/ForceRemoveNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadConfiguratorServer).ForceRemoveNetwork(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

var _MagmadConfigurator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.magmad.MagmadConfigurator",
	HandlerType: (*MagmadConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGateway",
			Handler:    _MagmadConfigurator_RegisterGateway_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _MagmadConfigurator_ListGateways_Handler,
		},
		{
			MethodName: "FindGatewayId",
			Handler:    _MagmadConfigurator_FindGatewayId_Handler,
		},
		{
			MethodName: "FindGatewayRecord",
			Handler:    _MagmadConfigurator_FindGatewayRecord_Handler,
		},
		{
			MethodName: "UpdateGatewayRecord",
			Handler:    _MagmadConfigurator_UpdateGatewayRecord_Handler,
		},
		{
			MethodName: "FindGatewayNetworkId",
			Handler:    _MagmadConfigurator_FindGatewayNetworkId_Handler,
		},
		{
			MethodName: "RemoveGateway",
			Handler:    _MagmadConfigurator_RemoveGateway_Handler,
		},
		{
			MethodName: "RegisterNetwork",
			Handler:    _MagmadConfigurator_RegisterNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _MagmadConfigurator_ListNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _MagmadConfigurator_GetNetwork_Handler,
		},
		{
			MethodName: "RemoveNetwork",
			Handler:    _MagmadConfigurator_RemoveNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _MagmadConfigurator_UpdateNetwork_Handler,
		},
		{
			MethodName: "ForceRemoveNetwork",
			Handler:    _MagmadConfigurator_ForceRemoveNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configurator.proto",
}

func init() { proto.RegisterFile("configurator.proto", fileDescriptor_configurator_2d5fb78b6d60bdd8) }

var fileDescriptor_configurator_2d5fb78b6d60bdd8 = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5f, 0x4f, 0x1b, 0x47,
	0x10, 0xd7, 0x19, 0x0c, 0x78, 0xc0, 0x01, 0x16, 0xa2, 0x1c, 0x6e, 0xa4, 0x5a, 0x56, 0xa5, 0xb8,
	0x4a, 0x64, 0x54, 0x47, 0x95, 0x92, 0x54, 0x10, 0xa5, 0x24, 0x44, 0x16, 0x24, 0x6a, 0x37, 0x6d,
	0x1f, 0xfa, 0x50, 0x6b, 0xb9, 0x1b, 0xec, 0x13, 0x77, 0xb7, 0xd7, 0xdd, 0x35, 0xc8, 0xdf, 0xa1,
	0xaf, 0x55, 0x3f, 0x45, 0x5f, 0x2b, 0xf5, 0xa5, 0x9f, 0xad, 0xf2, 0xee, 0x9e, 0x7d, 0x2b, 0xee,
	0x02, 0x44, 0x79, 0xf2, 0xde, 0xfc, 0xf9, 0xcd, 0x6f, 0x7e, 0xb3, 0x73, 0x67, 0x20, 0x01, 0x4f,
	0xcf, 0xa3, 0xd1, 0x44, 0x30, 0xc5, 0x45, 0x2f, 0x13, 0x5c, 0x71, 0x42, 0x12, 0x36, 0x4a, 0x58,
	0x8f, 0x8b, 0xe0, 0x99, 0xe8, 0xe9, 0x73, 0xd8, 0xfa, 0x52, 0x3f, 0xed, 0xeb, 0x00, 0xb9, 0x7f,
	0xc6, 0xb9, 0x92, 0x4a, 0xb0, 0x2c, 0x43, 0x9b, 0xd4, 0xda, 0x73, 0x02, 0x02, 0x9e, 0x24, 0x3c,
	0xb5, 0xae, 0x2f, 0x1c, 0x57, 0x14, 0x62, 0xaa, 0x22, 0x35, 0x35, 0xce, 0xce, 0x3f, 0x4b, 0xb0,
	0xf3, 0x4e, 0xd7, 0x78, 0xcb, 0x14, 0x5e, 0xb1, 0xe9, 0x91, 0x26, 0x44, 0xbe, 0x86, 0xad, 0x60,
	0x8c, 0xc1, 0x45, 0x94, 0x0e, 0xa3, 0x54, 0xa1, 0xb8, 0x64, 0xb1, 0xef, 0xb5, 0xbd, 0x6e, 0x9d,
	0x6e, 0x5a, 0xfb, 0xc0, 0x9a, 0xc9, 0x23, 0xc8, 0x4d, 0x43, 0x15, 0x25, 0xc8, 0x27, 0xca, 0xaf,
	0xe9, 0xc8, 0x7b, 0xd6, 0xfc, 0x93, 0xb1, 0x92, 0x7d, 0xd8, 0x61, 0x13, 0xc5, 0x27, 0xd9, 0x48,
	0xb0, 0x10, 0x87, 0x98, 0xb2, 0xb3, 0x18, 0x43, 0x7f, 0xa9, 0xed, 0x75, 0xd7, 0x28, 0x29, 0xb8,
	0xde, 0x18, 0x0f, 0x79, 0x01, 0x7b, 0xc5, 0x84, 0x8c, 0xc7, 0xf1, 0x82, 0xcd, 0xb2, 0xae, 0xf1,
	0xa0, 0x10, 0xf0, 0x03, 0x8f, 0xe3, 0x39, 0x2b, 0x02, 0xcb, 0x2a, 0x42, 0xe1, 0xd7, 0xdb, 0x5e,
	0xb7, 0x41, 0xf5, 0x99, 0xfc, 0x06, 0xcd, 0x73, 0x64, 0x6a, 0x22, 0x70, 0x78, 0x1e, 0xb3, 0x91,
	0xf4, 0x57, 0xda, 0x4b, 0xdd, 0xf5, 0xfe, 0xf3, 0xde, 0x75, 0xc5, 0x7b, 0x25, 0xa2, 0xf4, 0x8e,
	0x4d, 0xf2, 0xf1, 0x2c, 0xf7, 0x4d, 0xaa, 0xc4, 0x94, 0x6e, 0x9c, 0x17, 0x4c, 0x33, 0xd1, 0xc2,
	0x69, 0xca, 0x92, 0x28, 0x18, 0x4a, 0x14, 0x97, 0x51, 0x80, 0xd2, 0x5f, 0x6d, 0x2f, 0x75, 0x1b,
	0x74, 0xd3, 0xda, 0x3f, 0x58, 0x73, 0xeb, 0x25, 0x6c, 0x5f, 0x43, 0x23, 0x5b, 0xb0, 0x74, 0x81,
	0x53, 0xad, 0x73, 0x83, 0xce, 0x8e, 0x64, 0x17, 0xea, 0x97, 0x2c, 0x9e, 0xa0, 0x56, 0x74, 0x8d,
	0x9a, 0x87, 0x17, 0xb5, 0x67, 0x5e, 0xe7, 0x5f, 0x2f, 0x1f, 0xdc, 0x7b, 0x54, 0x57, 0x5c, 0x5c,
	0x50, 0x0c, 0xb8, 0x08, 0x67, 0x7d, 0xa7, 0x2c, 0x41, 0x0b, 0xa2, 0xcf, 0xe4, 0x47, 0x58, 0xb3,
	0x3c, 0xa5, 0x5f, 0xd3, 0x2d, 0x7f, 0x5b, 0xdd, 0xb2, 0x03, 0x97, 0xb7, 0x6c, 0xdb, 0x9d, 0xc3,
	0xb4, 0xbe, 0x83, 0xa6, 0xe3, 0xba, 0x89, 0x7b, 0xa3, 0xc8, 0x7d, 0x04, 0xbb, 0x4e, 0x15, 0x8a,
	0xbf, 0x4f, 0x50, 0x2a, 0xf2, 0x12, 0x56, 0x84, 0x36, 0x68, 0x98, 0xf5, 0xfe, 0xa3, 0x5b, 0xb2,
	0xa4, 0x36, 0x8d, 0xdc, 0x83, 0x5a, 0x14, 0xda, 0x7a, 0xb5, 0x28, 0xec, 0xfc, 0xed, 0xc1, 0xce,
	0xab, 0x20, 0x40, 0x29, 0xed, 0x20, 0xad, 0x48, 0xdf, 0x40, 0x7d, 0x7c, 0x35, 0x8c, 0xf2, 0x3a,
	0x0f, 0x9d, 0x3a, 0x4e, 0xc2, 0xe0, 0x35, 0x5d, 0x1e, 0x5f, 0x0d, 0x16, 0xba, 0x2e, 0x17, 0x74,
	0x7d, 0x6c, 0x7a, 0xae, 0x6b, 0x90, 0x3d, 0x07, 0xe4, 0x68, 0xcc, 0xe2, 0x18, 0xd3, 0x11, 0x9e,
	0xe0, 0xd4, 0xc8, 0x31, 0xe3, 0x96, 0xcd, 0xb9, 0x65, 0x33, 0xc0, 0x8c, 0x0b, 0xa5, 0xaf, 0x7f,
	0x9d, 0xea, 0x73, 0xe7, 0x0f, 0x0f, 0x76, 0x1d, 0xa6, 0xb9, 0x32, 0x4f, 0xa1, 0x31, 0xb2, 0x84,
	0x72, 0xd2, 0xf7, 0x9d, 0x7a, 0x03, 0xbb, 0xd6, 0x74, 0x11, 0x57, 0x90, 0xb3, 0x56, 0x2d, 0x67,
	0x89, 0x3c, 0xb9, 0x9c, 0x9d, 0x27, 0xb0, 0xf5, 0x8e, 0x09, 0x39, 0x66, 0x31, 0x86, 0x66, 0x05,
	0x24, 0xf1, 0x61, 0xd5, 0xbc, 0xb3, 0xa4, 0x46, 0xdd, 0xa0, 0xf9, 0x63, 0x27, 0x01, 0xdf, 0x59,
	0x17, 0x69, 0xc9, 0x9f, 0xe0, 0xf4, 0xd3, 0xf8, 0x3f, 0x84, 0x86, 0xc1, 0x3e, 0xc1, 0xa9, 0x15,
	0x6e, 0x61, 0xe8, 0xfc, 0xe5, 0xc1, 0xfd, 0xd2, 0x7a, 0xe4, 0x70, 0x71, 0x15, 0xd7, 0xfb, 0x4f,
	0xca, 0x9a, 0xae, 0xe2, 0x69, 0x26, 0x75, 0xe8, 0xb6, 0xb8, 0xde, 0xff, 0xaa, 0xfc, 0x1e, 0xba,
	0xca, 0x2c, 0x84, 0x88, 0xe1, 0x81, 0xbd, 0x9e, 0xc6, 0xe5, 0xea, 0x90, 0x1a, 0xd7, 0x8d, 0x3a,
	0xcc, 0xe3, 0x6e, 0xd0, 0xe1, 0x4f, 0x6f, 0xbe, 0x4d, 0x4e, 0x39, 0x72, 0x50, 0x94, 0xe1, 0x71,
	0x59, 0x0b, 0x15, 0x2c, 0x3f, 0x8b, 0x0a, 0xfd, 0xff, 0x56, 0x81, 0x98, 0x5d, 0x3d, 0x2a, 0x7c,
	0xe3, 0x08, 0x85, 0x4d, 0x8a, 0xa3, 0x48, 0x2a, 0x14, 0x76, 0x0a, 0xa4, 0xfb, 0x91, 0x11, 0x39,
	0x6b, 0xd0, 0x2a, 0xd7, 0x8a, 0xbc, 0x82, 0x8d, 0xd3, 0x48, 0x2a, 0x9b, 0x22, 0x49, 0x79, 0x58,
	0xab, 0x55, 0x6a, 0xee, 0xcd, 0x52, 0xc9, 0x01, 0x34, 0x8f, 0xa3, 0x34, 0x7f, 0xdf, 0x0f, 0xc2,
	0x2a, 0x8c, 0x0a, 0x06, 0x1f, 0x60, 0xbb, 0x90, 0x6e, 0xdf, 0x32, 0x15, 0x10, 0xb7, 0x5d, 0x43,
	0x42, 0x61, 0xe7, 0xe7, 0x2c, 0x64, 0x0a, 0x5d, 0xf3, 0xed, 0xe5, 0xda, 0x76, 0x22, 0x7f, 0xe1,
	0x51, 0x48, 0x5e, 0xc3, 0x6e, 0x81, 0xe8, 0xfb, 0xf9, 0x1d, 0xbb, 0x5b, 0xbb, 0xcf, 0xa1, 0x49,
	0x31, 0xe1, 0x97, 0x39, 0xb3, 0xaa, 0xf4, 0x12, 0x02, 0x85, 0xf9, 0xdb, 0xea, 0xe5, 0x0d, 0x95,
	0x7d, 0x20, 0xaa, 0xe8, 0x1c, 0x98, 0xf9, 0xdb, 0x14, 0x49, 0xae, 0x97, 0xfd, 0xe8, 0xec, 0x4f,
	0x01, 0xde, 0x62, 0x9e, 0x7d, 0xa7, 0xa9, 0x95, 0x7d, 0x80, 0xe7, 0xda, 0xdc, 0x00, 0x58, 0xa2,
	0xcd, 0x29, 0x34, 0xcd, 0xc0, 0xef, 0xae, 0x4c, 0x09, 0xda, 0x21, 0x90, 0x63, 0x2e, 0x02, 0xfc,
	0x44, 0x36, 0xdf, 0xaf, 0xfd, 0xba, 0x62, 0xfe, 0x33, 0x9e, 0x99, 0xdf, 0xa7, 0xff, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x32, 0x30, 0x79, 0x72, 0xae, 0x0a, 0x00, 0x00,
}
