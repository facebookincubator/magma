// Copyright (c) Facebook, Inc. and its affiliates.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.
//
syntax = "proto3";

package magma.orc8r.magmad;
option go_package = "protos";

import "orc8r/protos/bootstrapper.proto";
import "orc8r/protos/common.proto";
import "orc8r/protos/identity.proto";

//==============================================================================
// Namespaced configuration messages for cloud magmad
//==============================================================================

// Magmad gateway configuration
message MagmadGatewayConfig {
    // Interval for the gateways to send checkin rpc calls to the cloud.
    int32 checkin_interval = 1;
    // Checkin rpc timeout
    int32 checkin_timeout = 2;
    // Enables autoupgrading of the magma package
    bool autoupgrade_enabled = 3;
    // Interval to poll for package upgrades
    int32 autoupgrade_poll_interval = 4;
    // The tier the gateway belongs in
    string tier = 5;

    // Feature flags which turn off/on new features for limited roll-out
    map<string, bool> feature_flags = 6;
    // List of dynamic_services
    repeated string dynamic_services = 7;
}

// Network entity to be stored in networks table. Name is required.
message MagmadNetworkRecord {
    string name = 1;
    map<string, string> features = 2;
}

message NetworkRecordRequest {
    MagmadNetworkRecord record =1;
    string id = 2;
}

message AccessGatewayRecord {
    AccessGatewayID hw_id = 1;
    string name = 4;
    ChallengeKey key = 5;

    // DEPRECATED
    string ip = 2;
    int32 port = 3;
}

message GatewayRecordRequest {
    Identity gatewayId = 1;
    AccessGatewayRecord record = 2;
}

message MarshaledConfigs {
    bytes configs = 2;
}

message GatewayConfigsRequestKey {
    Identity gatewayId = 1;
    string configKey = 2;
}

message GatewayConfigsRequest {
    GatewayConfigsRequestKey key = 1;
    MarshaledConfigs configs = 2;
}

message NetworkConfigRequestKey {
    Identity networkId = 1;
    string configKey = 2;
}

message NetworkConfigRequest {
    NetworkConfigRequestKey key = 1;
    MarshaledConfigs configs = 2;
}

service MagmadConfigurator {
	// RegisterGateway adds new records for AG with HW ID specified by
    // record.hw_id into all corresponding tables using gatewayId.logical_id as
	// the the newly registered gateway's logical ID, initializes the newly
	// created AG's configs to defaults
	// Will return error if a device with the given HW ID or requested by
    // gatewayId.logical_id logical id is already registered if
	// gatewayId.logical_id is empty - will register the network with a new
	// unique ID
	rpc RegisterGateway(GatewayRecordRequest) returns (Identity /* Identity:Gateway) */);

	// Lists all registered logical device Identities for the network specified
	// by Identity parameter
	rpc ListGateways(Identity /* Identity:Network) */) returns (Identity.List);

	// FindGatewayId returns AG Identity with set logical_id
	// (Identity.Gateway.logical_id) for the given
    // registered HW Id (Identity.Gateway.hardware_id) on the network
	// (Identity.Gateway.network_id)
	rpc FindGatewayId(Identity /* Identity:Gateway) */) returns (Identity);

	// FindGatewayRecord returns AG Record for a given registered logical ID
	// (Identity:Gateway.logical_id)
	rpc FindGatewayRecord(Identity /* Identity:Gateway) */) returns (AccessGatewayRecord);

	// Finds and Updates the GW record, the record's HwId must be either omitted
	// or must match the GW's registered HW ID, the HwId is not mutable
	rpc UpdateGatewayRecord(GatewayRecordRequest) returns (Void);

	// FindGatewayNetworkId returns Network Id of the network, the Gatway HW ID
	// is registered on
	rpc FindGatewayNetworkId(Identity /* Identity:Gateway) */) returns (Identity /* Identity:Network) */);

	// RemoveGateway deletes all logical device & corresponding HW ID records &
	// configs and effectively performs de-registration of the AG with the cloud
	rpc RemoveGateway(Identity/* Identity.Gateway) */) returns (Void);

	// RegisterNetwork registers new network with ID specified by
	// NetworkRecordRequest.networkId, it will return error if the network with
	// the ID already exist
	// RegisterNetwork Returns the registered network Identity
    // If NetworkRecordRequest.networkId is not set, RegisterNetwork will
	// generate a new, unique network ID and use it for registration
	rpc RegisterNetwork(NetworkRecordRequest) returns (Identity  /* Identity:Network) */);

	// ListNetworks returns a list of all registered network Identities
	rpc ListNetworks(Void) returns (Identity.List);

    // Returns the network record for a network ID
    rpc GetNetwork(Identity /* Identity:Network) */) returns (MagmadNetworkRecord);

	// Deletes given network if its Gateway & Subscriber tables are empty
	rpc RemoveNetwork(Identity /* Identity:Network) */) returns (Void);

    // Update a network record
    rpc UpdateNetwork(NetworkRecordRequest) returns (Void);

	// Deletes given network and its Gateway & Subscriber tables
	rpc ForceRemoveNetwork(Identity /* Identity:Network) */) returns (Void);
}
