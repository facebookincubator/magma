// Code generated by protoc-gen-go. DO NOT EDIT.
// source: southbound.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protos "magma/orc8r/cloud/go/protos"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SouthboundConfiguratorClient is the client API for SouthboundConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SouthboundConfiguratorClient interface {
	GetMconfig(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.GatewayConfigs, error)
}

type southboundConfiguratorClient struct {
	cc *grpc.ClientConn
}

func NewSouthboundConfiguratorClient(cc *grpc.ClientConn) SouthboundConfiguratorClient {
	return &southboundConfiguratorClient{cc}
}

func (c *southboundConfiguratorClient) GetMconfig(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.GatewayConfigs, error) {
	out := new(protos.GatewayConfigs)
	err := c.cc.Invoke(ctx, "/magma.orc8r.configurator.SouthboundConfigurator/GetMconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SouthboundConfiguratorServer is the server API for SouthboundConfigurator service.
type SouthboundConfiguratorServer interface {
	GetMconfig(context.Context, *protos.Void) (*protos.GatewayConfigs, error)
}

func RegisterSouthboundConfiguratorServer(s *grpc.Server, srv SouthboundConfiguratorServer) {
	s.RegisterService(&_SouthboundConfigurator_serviceDesc, srv)
}

func _SouthboundConfigurator_GetMconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundConfiguratorServer).GetMconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.configurator.SouthboundConfigurator/GetMconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundConfiguratorServer).GetMconfig(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _SouthboundConfigurator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.configurator.SouthboundConfigurator",
	HandlerType: (*SouthboundConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMconfig",
			Handler:    _SouthboundConfigurator_GetMconfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "southbound.proto",
}

func init() { proto.RegisterFile("southbound.proto", fileDescriptor_southbound_0a3e03e0ed756833) }

var fileDescriptor_southbound_0a3e03e0ed756833 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xce, 0x2f, 0x2d,
	0xc9, 0x48, 0xca, 0x2f, 0xcd, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xc8, 0x4d,
	0x4c, 0xcf, 0x4d, 0xd4, 0xcb, 0x2f, 0x4a, 0xb6, 0x28, 0xd2, 0x4b, 0xce, 0xcf, 0x4b, 0xcb, 0x4c,
	0x2f, 0x2d, 0x4a, 0x2c, 0xc9, 0x2f, 0x92, 0x52, 0x00, 0xcb, 0xe8, 0x83, 0x65, 0xf4, 0xc1, 0x8a,
	0x8b, 0xf5, 0x73, 0x21, 0x2a, 0x20, 0x7a, 0xa5, 0xe4, 0xb1, 0xa8, 0x48, 0xce, 0xcf, 0xcd, 0xcd,
	0xcf, 0x83, 0x28, 0x30, 0x8a, 0xe0, 0x12, 0x0b, 0x86, 0x5b, 0xe8, 0x8c, 0x64, 0xb8, 0x90, 0x1d,
	0x17, 0x97, 0x7b, 0x6a, 0x89, 0x2f, 0xc4, 0x38, 0x21, 0x41, 0x3d, 0x64, 0x57, 0x84, 0xe5, 0x67,
	0xa6, 0x48, 0x49, 0xa3, 0x08, 0xb9, 0x27, 0x96, 0xa4, 0x96, 0x27, 0x56, 0x42, 0x8c, 0x28, 0x56,
	0x62, 0x70, 0xe2, 0x88, 0x62, 0x83, 0x58, 0x98, 0x04, 0xa1, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x33, 0x44, 0x88, 0x0f, 0xdb, 0x00, 0x00, 0x00,
}
