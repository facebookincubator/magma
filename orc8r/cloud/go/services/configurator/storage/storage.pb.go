//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: storage.proto

package storage

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OWN grants READ and WRITE
type ACL_Permission int32

const (
	ACL_NO_PERM ACL_Permission = 0
	ACL_READ    ACL_Permission = 1
	ACL_WRITE   ACL_Permission = 2
	ACL_OWN     ACL_Permission = 3
)

// Enum value maps for ACL_Permission.
var (
	ACL_Permission_name = map[int32]string{
		0: "NO_PERM",
		1: "READ",
		2: "WRITE",
		3: "OWN",
	}
	ACL_Permission_value = map[string]int32{
		"NO_PERM": 0,
		"READ":    1,
		"WRITE":   2,
		"OWN":     3,
	}
)

func (x ACL_Permission) Enum() *ACL_Permission {
	p := new(ACL_Permission)
	*p = x
	return p
}

func (x ACL_Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[0].Descriptor()
}

func (ACL_Permission) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[0]
}

func (x ACL_Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACL_Permission.Descriptor instead.
func (ACL_Permission) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{7, 0}
}

type ACL_Wildcard int32

const (
	ACL_NO_WILDCARD  ACL_Wildcard = 0
	ACL_WILDCARD_ALL ACL_Wildcard = 1
)

// Enum value maps for ACL_Wildcard.
var (
	ACL_Wildcard_name = map[int32]string{
		0: "NO_WILDCARD",
		1: "WILDCARD_ALL",
	}
	ACL_Wildcard_value = map[string]int32{
		"NO_WILDCARD":  0,
		"WILDCARD_ALL": 1,
	}
)

func (x ACL_Wildcard) Enum() *ACL_Wildcard {
	p := new(ACL_Wildcard)
	*p = x
	return p
}

func (x ACL_Wildcard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_Wildcard) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[1].Descriptor()
}

func (ACL_Wildcard) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[1]
}

func (x ACL_Wildcard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACL_Wildcard.Descriptor instead.
func (ACL_Wildcard) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{7, 1}
}

// A network represents a tenant. Networks can be configured in a hierarchical
// manner - network-level configurations are assumed to apply across multiple
// entities within the network.
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name        string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// Configs maps between a type value and a serialized representation of the
	// configuration value. The type value will point to the Serde
	// implementation which can deserialize the associated value.
	Configs map[string][]byte `protobuf:"bytes,20,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Version uint64            `protobuf:"varint,30,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{0}
}

func (x *Network) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Network) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Network) GetConfigs() map[string][]byte {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *Network) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type NetworkLoadFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If IDs is provided, the query will return all entities matching the
	// provided ids. TypeFilter is ignored if IDs is
	// provided.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// If TypeFilter is provided, the query will return all entities matching
	// the given type.
	TypeFilter *wrappers.StringValue `protobuf:"bytes,2,opt,name=type_filter,json=typeFilter,proto3" json:"type_filter,omitempty"`
}

func (x *NetworkLoadFilter) Reset() {
	*x = NetworkLoadFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLoadFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLoadFilter) ProtoMessage() {}

func (x *NetworkLoadFilter) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLoadFilter.ProtoReflect.Descriptor instead.
func (*NetworkLoadFilter) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkLoadFilter) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *NetworkLoadFilter) GetTypeFilter() *wrappers.StringValue {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

// NetworkLoadCriteria specifies how much of a network to load
type NetworkLoadCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set LoadMetadata to true to load metadata fields (name, description)
	LoadMetadata bool `protobuf:"varint,1,opt,name=load_metadata,json=loadMetadata,proto3" json:"load_metadata,omitempty"`
	LoadConfigs  bool `protobuf:"varint,2,opt,name=load_configs,json=loadConfigs,proto3" json:"load_configs,omitempty"`
}

func (x *NetworkLoadCriteria) Reset() {
	*x = NetworkLoadCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLoadCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLoadCriteria) ProtoMessage() {}

func (x *NetworkLoadCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLoadCriteria.ProtoReflect.Descriptor instead.
func (*NetworkLoadCriteria) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkLoadCriteria) GetLoadMetadata() bool {
	if x != nil {
		return x.LoadMetadata
	}
	return false
}

func (x *NetworkLoadCriteria) GetLoadConfigs() bool {
	if x != nil {
		return x.LoadConfigs
	}
	return false
}

type NetworkLoadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks           []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	NetworkIDsNotFound []string   `protobuf:"bytes,2,rep,name=networkIDs_not_found,json=networkIDsNotFound,proto3" json:"networkIDs_not_found,omitempty"`
}

func (x *NetworkLoadResult) Reset() {
	*x = NetworkLoadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLoadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLoadResult) ProtoMessage() {}

func (x *NetworkLoadResult) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLoadResult.ProtoReflect.Descriptor instead.
func (*NetworkLoadResult) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkLoadResult) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *NetworkLoadResult) GetNetworkIDsNotFound() []string {
	if x != nil {
		return x.NetworkIDsNotFound
	}
	return nil
}

// NetworkUpdateCriteria specifies how to update a network
type NetworkUpdateCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the network to update
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Set DeleteNetwork to true to delete the network
	DeleteNetwork bool `protobuf:"varint,10,opt,name=delete_network,json=deleteNetwork,proto3" json:"delete_network,omitempty"`
	// Set NewName, NewDescription, or NewType to nil to indicate that no update is
	// desired. To clear the value of name or description, set these fields to
	// a wrapper to an empty string.
	NewName        *wrappers.StringValue `protobuf:"bytes,20,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	NewDescription *wrappers.StringValue `protobuf:"bytes,21,opt,name=new_description,json=newDescription,proto3" json:"new_description,omitempty"`
	NewType        *wrappers.StringValue `protobuf:"bytes,22,opt,name=new_type,json=newType,proto3" json:"new_type,omitempty"`
	// New config values to add or existing ones to update
	ConfigsToAddOrUpdate map[string][]byte `protobuf:"bytes,30,rep,name=configs_to_add_or_update,json=configsToAddOrUpdate,proto3" json:"configs_to_add_or_update,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Config values to delete
	ConfigsToDelete []string `protobuf:"bytes,31,rep,name=configs_to_delete,json=configsToDelete,proto3" json:"configs_to_delete,omitempty"`
}

func (x *NetworkUpdateCriteria) Reset() {
	*x = NetworkUpdateCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkUpdateCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkUpdateCriteria) ProtoMessage() {}

func (x *NetworkUpdateCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkUpdateCriteria.ProtoReflect.Descriptor instead.
func (*NetworkUpdateCriteria) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkUpdateCriteria) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NetworkUpdateCriteria) GetDeleteNetwork() bool {
	if x != nil {
		return x.DeleteNetwork
	}
	return false
}

func (x *NetworkUpdateCriteria) GetNewName() *wrappers.StringValue {
	if x != nil {
		return x.NewName
	}
	return nil
}

func (x *NetworkUpdateCriteria) GetNewDescription() *wrappers.StringValue {
	if x != nil {
		return x.NewDescription
	}
	return nil
}

func (x *NetworkUpdateCriteria) GetNewType() *wrappers.StringValue {
	if x != nil {
		return x.NewType
	}
	return nil
}

func (x *NetworkUpdateCriteria) GetConfigsToAddOrUpdate() map[string][]byte {
	if x != nil {
		return x.ConfigsToAddOrUpdate
	}
	return nil
}

func (x *NetworkUpdateCriteria) GetConfigsToDelete() []string {
	if x != nil {
		return x.ConfigsToDelete
	}
	return nil
}

type EntityID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *EntityID) Reset() {
	*x = EntityID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityID) ProtoMessage() {}

func (x *EntityID) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityID.ProtoReflect.Descriptor instead.
func (*EntityID) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{5}
}

func (x *EntityID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EntityID) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// NetworkEntity is the storage representation of a logical component of a
// network. Networks are partitioned into DAGs of entities.
type NetworkEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID string `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	// (Type, Key) forms a unique identifier for the network entity within its
	// network.
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Key         string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Name        string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// PhysicalID will be non-empty if the entity corresponds to a physical
	// asset.
	PhysicalID string `protobuf:"bytes,20,opt,name=physicalID,proto3" json:"physicalID,omitempty"`
	// Serialized view of the entity's configuration. The value of the Type
	// field will determine the Serde implementation for this value.
	Config []byte `protobuf:"bytes,30,opt,name=config,proto3" json:"config,omitempty"`
	// GraphID is a mostly-internal field to designate the DAG that this
	// network entity belongs to. This field is system-generated and will be
	// ignored if set during entity creation.
	GraphID string `protobuf:"bytes,40,opt,name=graphID,proto3" json:"graphID,omitempty"`
	// Associations are the directed edges originating from this entity.
	Associations []*EntityID `protobuf:"bytes,50,rep,name=associations,proto3" json:"associations,omitempty"`
	// ParentAssociations are the directed edges ending at this entity.
	// This is a read-only field and will be ignored if set during entity
	// creation.
	ParentAssociations []*EntityID `protobuf:"bytes,51,rep,name=parent_associations,json=parentAssociations,proto3" json:"parent_associations,omitempty"`
	// Permissions defines the access control for this entity.
	Permissions []*ACL `protobuf:"bytes,60,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Version     uint64 `protobuf:"varint,70,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *NetworkEntity) Reset() {
	*x = NetworkEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEntity) ProtoMessage() {}

func (x *NetworkEntity) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEntity.ProtoReflect.Descriptor instead.
func (*NetworkEntity) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkEntity) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *NetworkEntity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkEntity) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NetworkEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkEntity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkEntity) GetPhysicalID() string {
	if x != nil {
		return x.PhysicalID
	}
	return ""
}

func (x *NetworkEntity) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NetworkEntity) GetGraphID() string {
	if x != nil {
		return x.GraphID
	}
	return ""
}

func (x *NetworkEntity) GetAssociations() []*EntityID {
	if x != nil {
		return x.Associations
	}
	return nil
}

func (x *NetworkEntity) GetParentAssociations() []*EntityID {
	if x != nil {
		return x.ParentAssociations
	}
	return nil
}

func (x *NetworkEntity) GetPermissions() []*ACL {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *NetworkEntity) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// ACL (Access Control List) defines a specific permission for an entity on
// access to other entities.
type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique system-generated identifier for this ACL.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// An ACL can apply to one or more networks.
	//
	// Types that are assignable to Scope:
	//	*ACL_ScopeNetworkIDs
	//	*ACL_ScopeWildcard
	Scope      isACL_Scope    `protobuf_oneof:"scope"`
	Permission ACL_Permission `protobuf:"varint,20,opt,name=permission,proto3,enum=magma.orc8r.configurator.storage.ACL_Permission" json:"permission,omitempty"`
	// An ACL can define access permissions to a specific type of entity, or
	// all entities.
	//
	// Types that are assignable to Type:
	//	*ACL_EntityType
	//	*ACL_TypeWildcard
	Type isACL_Type `protobuf_oneof:"type"`
	// An ACL can optionally define access permissions to specific entity IDs
	// If empty, the ACL will apply to all entities of the specified type.
	IDFilter []string `protobuf:"bytes,40,rep,name=IDFilter,proto3" json:"IDFilter,omitempty"`
	Version  uint64   `protobuf:"varint,50,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{7}
}

func (x *ACL) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (m *ACL) GetScope() isACL_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ACL) GetScopeNetworkIDs() *ACL_NetworkIDs {
	if x, ok := x.GetScope().(*ACL_ScopeNetworkIDs); ok {
		return x.ScopeNetworkIDs
	}
	return nil
}

func (x *ACL) GetScopeWildcard() ACL_Wildcard {
	if x, ok := x.GetScope().(*ACL_ScopeWildcard); ok {
		return x.ScopeWildcard
	}
	return ACL_NO_WILDCARD
}

func (x *ACL) GetPermission() ACL_Permission {
	if x != nil {
		return x.Permission
	}
	return ACL_NO_PERM
}

func (m *ACL) GetType() isACL_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ACL) GetEntityType() string {
	if x, ok := x.GetType().(*ACL_EntityType); ok {
		return x.EntityType
	}
	return ""
}

func (x *ACL) GetTypeWildcard() ACL_Wildcard {
	if x, ok := x.GetType().(*ACL_TypeWildcard); ok {
		return x.TypeWildcard
	}
	return ACL_NO_WILDCARD
}

func (x *ACL) GetIDFilter() []string {
	if x != nil {
		return x.IDFilter
	}
	return nil
}

func (x *ACL) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type isACL_Scope interface {
	isACL_Scope()
}

type ACL_ScopeNetworkIDs struct {
	ScopeNetworkIDs *ACL_NetworkIDs `protobuf:"bytes,10,opt,name=scope_networkIDs,json=scopeNetworkIDs,proto3,oneof"`
}

type ACL_ScopeWildcard struct {
	ScopeWildcard ACL_Wildcard `protobuf:"varint,11,opt,name=scope_wildcard,json=scopeWildcard,proto3,enum=magma.orc8r.configurator.storage.ACL_Wildcard,oneof"`
}

func (*ACL_ScopeNetworkIDs) isACL_Scope() {}

func (*ACL_ScopeWildcard) isACL_Scope() {}

type isACL_Type interface {
	isACL_Type()
}

type ACL_EntityType struct {
	EntityType string `protobuf:"bytes,30,opt,name=entity_type,json=entityType,proto3,oneof"`
}

type ACL_TypeWildcard struct {
	TypeWildcard ACL_Wildcard `protobuf:"varint,31,opt,name=type_wildcard,json=typeWildcard,proto3,enum=magma.orc8r.configurator.storage.ACL_Wildcard,oneof"`
}

func (*ACL_EntityType) isACL_Type() {}

func (*ACL_TypeWildcard) isACL_Type() {}

// EntityLoadFilter specifies which entities to load from storage
type EntityLoadFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If TypeFilter is provided, the query will return all entities matching
	// the given type.
	TypeFilter *wrappers.StringValue `protobuf:"bytes,1,opt,name=type_filter,json=typeFilter,proto3" json:"type_filter,omitempty"`
	// If KeyFilter is provided, the query will return all entities matching the
	// given ID.
	KeyFilter *wrappers.StringValue `protobuf:"bytes,2,opt,name=key_filter,json=keyFilter,proto3" json:"key_filter,omitempty"`
	// If IDs is provided, the query will return all entities matching the
	// provided TypeAndKeys. TypeFilter and KeyFilter are ignored if IDs is
	// provided.
	IDs []*EntityID `protobuf:"bytes,3,rep,name=IDs,proto3" json:"IDs,omitempty"`
	// Internal-only
	GraphID *wrappers.StringValue `protobuf:"bytes,4,opt,name=graphID,proto3" json:"graphID,omitempty"`
	// If PhysicalID is provided, the query will return all entities matching
	// the provided ID. All other fields are ignored if this is set.
	PhysicalID *wrappers.StringValue `protobuf:"bytes,5,opt,name=physicalID,proto3" json:"physicalID,omitempty"`
}

func (x *EntityLoadFilter) Reset() {
	*x = EntityLoadFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLoadFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLoadFilter) ProtoMessage() {}

func (x *EntityLoadFilter) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLoadFilter.ProtoReflect.Descriptor instead.
func (*EntityLoadFilter) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{8}
}

func (x *EntityLoadFilter) GetTypeFilter() *wrappers.StringValue {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

func (x *EntityLoadFilter) GetKeyFilter() *wrappers.StringValue {
	if x != nil {
		return x.KeyFilter
	}
	return nil
}

func (x *EntityLoadFilter) GetIDs() []*EntityID {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *EntityLoadFilter) GetGraphID() *wrappers.StringValue {
	if x != nil {
		return x.GraphID
	}
	return nil
}

func (x *EntityLoadFilter) GetPhysicalID() *wrappers.StringValue {
	if x != nil {
		return x.PhysicalID
	}
	return nil
}

// EntityLoadCriteria specifies how much of an entity to load
type EntityLoadCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set LoadMetadata to true to load the metadata fields (name, description)
	LoadMetadata       bool `protobuf:"varint,1,opt,name=load_metadata,json=loadMetadata,proto3" json:"load_metadata,omitempty"`
	LoadConfig         bool `protobuf:"varint,2,opt,name=load_config,json=loadConfig,proto3" json:"load_config,omitempty"`
	LoadAssocsToThis   bool `protobuf:"varint,3,opt,name=load_assocs_to_this,json=loadAssocsToThis,proto3" json:"load_assocs_to_this,omitempty"`
	LoadAssocsFromThis bool `protobuf:"varint,4,opt,name=load_assocs_from_this,json=loadAssocsFromThis,proto3" json:"load_assocs_from_this,omitempty"`
	LoadPermissions    bool `protobuf:"varint,5,opt,name=load_permissions,json=loadPermissions,proto3" json:"load_permissions,omitempty"`
}

func (x *EntityLoadCriteria) Reset() {
	*x = EntityLoadCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLoadCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLoadCriteria) ProtoMessage() {}

func (x *EntityLoadCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLoadCriteria.ProtoReflect.Descriptor instead.
func (*EntityLoadCriteria) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{9}
}

func (x *EntityLoadCriteria) GetLoadMetadata() bool {
	if x != nil {
		return x.LoadMetadata
	}
	return false
}

func (x *EntityLoadCriteria) GetLoadConfig() bool {
	if x != nil {
		return x.LoadConfig
	}
	return false
}

func (x *EntityLoadCriteria) GetLoadAssocsToThis() bool {
	if x != nil {
		return x.LoadAssocsToThis
	}
	return false
}

func (x *EntityLoadCriteria) GetLoadAssocsFromThis() bool {
	if x != nil {
		return x.LoadAssocsFromThis
	}
	return false
}

func (x *EntityLoadCriteria) GetLoadPermissions() bool {
	if x != nil {
		return x.LoadPermissions
	}
	return false
}

type EntityLoadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities         []*NetworkEntity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	EntitiesNotFound []*EntityID      `protobuf:"bytes,2,rep,name=entities_not_found,json=entitiesNotFound,proto3" json:"entities_not_found,omitempty"`
}

func (x *EntityLoadResult) Reset() {
	*x = EntityLoadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLoadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLoadResult) ProtoMessage() {}

func (x *EntityLoadResult) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLoadResult.ProtoReflect.Descriptor instead.
func (*EntityLoadResult) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{10}
}

func (x *EntityLoadResult) GetEntities() []*NetworkEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *EntityLoadResult) GetEntitiesNotFound() []*EntityID {
	if x != nil {
		return x.EntitiesNotFound
	}
	return nil
}

// EntityUpdateCriteria specifies a patch operation on a network entity.
type EntityUpdateCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Type, Key) of the entity to update
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Set DeleteEntity to true to mark the entity for deletion
	DeleteEntity   bool                  `protobuf:"varint,10,opt,name=delete_entity,json=deleteEntity,proto3" json:"delete_entity,omitempty"`
	NewName        *wrappers.StringValue `protobuf:"bytes,20,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	NewDescription *wrappers.StringValue `protobuf:"bytes,21,opt,name=new_description,json=newDescription,proto3" json:"new_description,omitempty"`
	NewPhysicalID  *wrappers.StringValue `protobuf:"bytes,22,opt,name=new_physicalID,json=newPhysicalID,proto3" json:"new_physicalID,omitempty"`
	// A nil value here indicates no update.
	NewConfig *wrappers.BytesValue `protobuf:"bytes,23,opt,name=new_config,json=newConfig,proto3" json:"new_config,omitempty"`
	// Wrap the repeated field in a message because a nil struct and a struct
	// with an empty associations list mean different things.
	AssociationsToSet    *EntityAssociationsToSet `protobuf:"bytes,30,opt,name=associations_to_set,json=associationsToSet,proto3" json:"associations_to_set,omitempty"`
	AssociationsToAdd    []*EntityID              `protobuf:"bytes,31,rep,name=associations_to_add,json=associationsToAdd,proto3" json:"associations_to_add,omitempty"`
	AssociationsToDelete []*EntityID              `protobuf:"bytes,32,rep,name=associations_to_delete,json=associationsToDelete,proto3" json:"associations_to_delete,omitempty"`
	// New ACLs to add. ACL IDs are ignored and generated by the system.
	PermissionsToCreate []*ACL   `protobuf:"bytes,40,rep,name=permissions_to_create,json=permissionsToCreate,proto3" json:"permissions_to_create,omitempty"`
	PermissionsToUpdate []*ACL   `protobuf:"bytes,41,rep,name=permissions_to_update,json=permissionsToUpdate,proto3" json:"permissions_to_update,omitempty"`
	PermissionsToDelete []string `protobuf:"bytes,42,rep,name=permissions_to_delete,json=permissionsToDelete,proto3" json:"permissions_to_delete,omitempty"`
}

func (x *EntityUpdateCriteria) Reset() {
	*x = EntityUpdateCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityUpdateCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityUpdateCriteria) ProtoMessage() {}

func (x *EntityUpdateCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityUpdateCriteria.ProtoReflect.Descriptor instead.
func (*EntityUpdateCriteria) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{11}
}

func (x *EntityUpdateCriteria) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EntityUpdateCriteria) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EntityUpdateCriteria) GetDeleteEntity() bool {
	if x != nil {
		return x.DeleteEntity
	}
	return false
}

func (x *EntityUpdateCriteria) GetNewName() *wrappers.StringValue {
	if x != nil {
		return x.NewName
	}
	return nil
}

func (x *EntityUpdateCriteria) GetNewDescription() *wrappers.StringValue {
	if x != nil {
		return x.NewDescription
	}
	return nil
}

func (x *EntityUpdateCriteria) GetNewPhysicalID() *wrappers.StringValue {
	if x != nil {
		return x.NewPhysicalID
	}
	return nil
}

func (x *EntityUpdateCriteria) GetNewConfig() *wrappers.BytesValue {
	if x != nil {
		return x.NewConfig
	}
	return nil
}

func (x *EntityUpdateCriteria) GetAssociationsToSet() *EntityAssociationsToSet {
	if x != nil {
		return x.AssociationsToSet
	}
	return nil
}

func (x *EntityUpdateCriteria) GetAssociationsToAdd() []*EntityID {
	if x != nil {
		return x.AssociationsToAdd
	}
	return nil
}

func (x *EntityUpdateCriteria) GetAssociationsToDelete() []*EntityID {
	if x != nil {
		return x.AssociationsToDelete
	}
	return nil
}

func (x *EntityUpdateCriteria) GetPermissionsToCreate() []*ACL {
	if x != nil {
		return x.PermissionsToCreate
	}
	return nil
}

func (x *EntityUpdateCriteria) GetPermissionsToUpdate() []*ACL {
	if x != nil {
		return x.PermissionsToUpdate
	}
	return nil
}

func (x *EntityUpdateCriteria) GetPermissionsToDelete() []string {
	if x != nil {
		return x.PermissionsToDelete
	}
	return nil
}

type EntityAssociationsToSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociationsToSet []*EntityID `protobuf:"bytes,1,rep,name=associations_to_set,json=associationsToSet,proto3" json:"associations_to_set,omitempty"`
}

func (x *EntityAssociationsToSet) Reset() {
	*x = EntityAssociationsToSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityAssociationsToSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityAssociationsToSet) ProtoMessage() {}

func (x *EntityAssociationsToSet) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityAssociationsToSet.ProtoReflect.Descriptor instead.
func (*EntityAssociationsToSet) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{12}
}

func (x *EntityAssociationsToSet) GetAssociationsToSet() []*EntityID {
	if x != nil {
		return x.AssociationsToSet
	}
	return nil
}

// EntityGraph represents a DAG of associated network entities.
type EntityGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All nodes in the graph
	Entities []*NetworkEntity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	// All nodes in the graph which don't have any edges terminating at them.
	RootEntities []*EntityID `protobuf:"bytes,2,rep,name=root_entities,json=rootEntities,proto3" json:"root_entities,omitempty"`
	// All edges in the graph.
	Edges []*GraphEdge `protobuf:"bytes,3,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *EntityGraph) Reset() {
	*x = EntityGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityGraph) ProtoMessage() {}

func (x *EntityGraph) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityGraph.ProtoReflect.Descriptor instead.
func (*EntityGraph) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{13}
}

func (x *EntityGraph) GetEntities() []*NetworkEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *EntityGraph) GetRootEntities() []*EntityID {
	if x != nil {
		return x.RootEntities
	}
	return nil
}

func (x *EntityGraph) GetEdges() []*GraphEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

// GraphEdge represents a directed edge within a graph
type GraphEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To   *EntityID `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	From *EntityID `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *GraphEdge) Reset() {
	*x = GraphEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphEdge) ProtoMessage() {}

func (x *GraphEdge) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphEdge.ProtoReflect.Descriptor instead.
func (*GraphEdge) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{14}
}

func (x *GraphEdge) GetTo() *EntityID {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GraphEdge) GetFrom() *EntityID {
	if x != nil {
		return x.From
	}
	return nil
}

type ACL_NetworkIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *ACL_NetworkIDs) Reset() {
	*x = ACL_NetworkIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_NetworkIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_NetworkIDs) ProtoMessage() {}

func (x *ACL_NetworkIDs) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_NetworkIDs.ProtoReflect.Descriptor instead.
func (*ACL_NetworkIDs) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ACL_NetworkIDs) GetIDs() []string {
	if x != nil {
		return x.IDs
	}
	return nil
}

var File_storage_proto protoreflect.FileDescriptor

var file_storage_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x20, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8b, 0x02, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x64, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x88, 0x04, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x89, 0x01,
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x54, 0x6f, 0x41, 0x64,
	0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x54, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30,
	0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0xeb, 0x03, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x44, 0x12, 0x4e,
	0x0a, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x32,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x52, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b,
	0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe8,
	0x04, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x5d, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x44, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x44, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x77,
	0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x50,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x77, 0x69, 0x6c, 0x64,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x43,
	0x4c, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x79,
	0x70, 0x65, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x44,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x49, 0x44,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49, 0x44, 0x73,
	0x22, 0x37, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0x2d, 0x0a, 0x08, 0x57, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x57, 0x49, 0x4c, 0x44,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x49, 0x4c, 0x44, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x10, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x03, 0x49, 0x44,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x44, 0x52, 0x03, 0x49, 0x44, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x44,
	0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x22, 0xe7,
	0x01, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x13, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68,
	0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x73, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74,
	0x68, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0xf5, 0x06, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x3a, 0x0a,
	0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x13, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x53, 0x65,
	0x74, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54,
	0x6f, 0x53, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x11, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x12, 0x60, 0x0a, 0x16, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x14, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a,
	0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x41, 0x43, 0x4c, 0x52, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x17,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f,
	0x53, 0x65, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x4b, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x44, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x64,
	0x67, 0x65, 0x12, 0x3a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3e,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x09,
	0x5a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_storage_proto_rawDescOnce sync.Once
	file_storage_proto_rawDescData = file_storage_proto_rawDesc
)

func file_storage_proto_rawDescGZIP() []byte {
	file_storage_proto_rawDescOnce.Do(func() {
		file_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_proto_rawDescData)
	})
	return file_storage_proto_rawDescData
}

var file_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_storage_proto_goTypes = []interface{}{
	(ACL_Permission)(0),             // 0: magma.orc8r.configurator.storage.ACL.Permission
	(ACL_Wildcard)(0),               // 1: magma.orc8r.configurator.storage.ACL.Wildcard
	(*Network)(nil),                 // 2: magma.orc8r.configurator.storage.Network
	(*NetworkLoadFilter)(nil),       // 3: magma.orc8r.configurator.storage.NetworkLoadFilter
	(*NetworkLoadCriteria)(nil),     // 4: magma.orc8r.configurator.storage.NetworkLoadCriteria
	(*NetworkLoadResult)(nil),       // 5: magma.orc8r.configurator.storage.NetworkLoadResult
	(*NetworkUpdateCriteria)(nil),   // 6: magma.orc8r.configurator.storage.NetworkUpdateCriteria
	(*EntityID)(nil),                // 7: magma.orc8r.configurator.storage.EntityID
	(*NetworkEntity)(nil),           // 8: magma.orc8r.configurator.storage.NetworkEntity
	(*ACL)(nil),                     // 9: magma.orc8r.configurator.storage.ACL
	(*EntityLoadFilter)(nil),        // 10: magma.orc8r.configurator.storage.EntityLoadFilter
	(*EntityLoadCriteria)(nil),      // 11: magma.orc8r.configurator.storage.EntityLoadCriteria
	(*EntityLoadResult)(nil),        // 12: magma.orc8r.configurator.storage.EntityLoadResult
	(*EntityUpdateCriteria)(nil),    // 13: magma.orc8r.configurator.storage.EntityUpdateCriteria
	(*EntityAssociationsToSet)(nil), // 14: magma.orc8r.configurator.storage.EntityAssociationsToSet
	(*EntityGraph)(nil),             // 15: magma.orc8r.configurator.storage.EntityGraph
	(*GraphEdge)(nil),               // 16: magma.orc8r.configurator.storage.GraphEdge
	nil,                             // 17: magma.orc8r.configurator.storage.Network.ConfigsEntry
	nil,                             // 18: magma.orc8r.configurator.storage.NetworkUpdateCriteria.ConfigsToAddOrUpdateEntry
	(*ACL_NetworkIDs)(nil),          // 19: magma.orc8r.configurator.storage.ACL.NetworkIDs
	(*wrappers.StringValue)(nil),    // 20: google.protobuf.StringValue
	(*wrappers.BytesValue)(nil),     // 21: google.protobuf.BytesValue
}
var file_storage_proto_depIdxs = []int32{
	17, // 0: magma.orc8r.configurator.storage.Network.configs:type_name -> magma.orc8r.configurator.storage.Network.ConfigsEntry
	20, // 1: magma.orc8r.configurator.storage.NetworkLoadFilter.type_filter:type_name -> google.protobuf.StringValue
	2,  // 2: magma.orc8r.configurator.storage.NetworkLoadResult.networks:type_name -> magma.orc8r.configurator.storage.Network
	20, // 3: magma.orc8r.configurator.storage.NetworkUpdateCriteria.new_name:type_name -> google.protobuf.StringValue
	20, // 4: magma.orc8r.configurator.storage.NetworkUpdateCriteria.new_description:type_name -> google.protobuf.StringValue
	20, // 5: magma.orc8r.configurator.storage.NetworkUpdateCriteria.new_type:type_name -> google.protobuf.StringValue
	18, // 6: magma.orc8r.configurator.storage.NetworkUpdateCriteria.configs_to_add_or_update:type_name -> magma.orc8r.configurator.storage.NetworkUpdateCriteria.ConfigsToAddOrUpdateEntry
	7,  // 7: magma.orc8r.configurator.storage.NetworkEntity.associations:type_name -> magma.orc8r.configurator.storage.EntityID
	7,  // 8: magma.orc8r.configurator.storage.NetworkEntity.parent_associations:type_name -> magma.orc8r.configurator.storage.EntityID
	9,  // 9: magma.orc8r.configurator.storage.NetworkEntity.permissions:type_name -> magma.orc8r.configurator.storage.ACL
	19, // 10: magma.orc8r.configurator.storage.ACL.scope_networkIDs:type_name -> magma.orc8r.configurator.storage.ACL.NetworkIDs
	1,  // 11: magma.orc8r.configurator.storage.ACL.scope_wildcard:type_name -> magma.orc8r.configurator.storage.ACL.Wildcard
	0,  // 12: magma.orc8r.configurator.storage.ACL.permission:type_name -> magma.orc8r.configurator.storage.ACL.Permission
	1,  // 13: magma.orc8r.configurator.storage.ACL.type_wildcard:type_name -> magma.orc8r.configurator.storage.ACL.Wildcard
	20, // 14: magma.orc8r.configurator.storage.EntityLoadFilter.type_filter:type_name -> google.protobuf.StringValue
	20, // 15: magma.orc8r.configurator.storage.EntityLoadFilter.key_filter:type_name -> google.protobuf.StringValue
	7,  // 16: magma.orc8r.configurator.storage.EntityLoadFilter.IDs:type_name -> magma.orc8r.configurator.storage.EntityID
	20, // 17: magma.orc8r.configurator.storage.EntityLoadFilter.graphID:type_name -> google.protobuf.StringValue
	20, // 18: magma.orc8r.configurator.storage.EntityLoadFilter.physicalID:type_name -> google.protobuf.StringValue
	8,  // 19: magma.orc8r.configurator.storage.EntityLoadResult.entities:type_name -> magma.orc8r.configurator.storage.NetworkEntity
	7,  // 20: magma.orc8r.configurator.storage.EntityLoadResult.entities_not_found:type_name -> magma.orc8r.configurator.storage.EntityID
	20, // 21: magma.orc8r.configurator.storage.EntityUpdateCriteria.new_name:type_name -> google.protobuf.StringValue
	20, // 22: magma.orc8r.configurator.storage.EntityUpdateCriteria.new_description:type_name -> google.protobuf.StringValue
	20, // 23: magma.orc8r.configurator.storage.EntityUpdateCriteria.new_physicalID:type_name -> google.protobuf.StringValue
	21, // 24: magma.orc8r.configurator.storage.EntityUpdateCriteria.new_config:type_name -> google.protobuf.BytesValue
	14, // 25: magma.orc8r.configurator.storage.EntityUpdateCriteria.associations_to_set:type_name -> magma.orc8r.configurator.storage.EntityAssociationsToSet
	7,  // 26: magma.orc8r.configurator.storage.EntityUpdateCriteria.associations_to_add:type_name -> magma.orc8r.configurator.storage.EntityID
	7,  // 27: magma.orc8r.configurator.storage.EntityUpdateCriteria.associations_to_delete:type_name -> magma.orc8r.configurator.storage.EntityID
	9,  // 28: magma.orc8r.configurator.storage.EntityUpdateCriteria.permissions_to_create:type_name -> magma.orc8r.configurator.storage.ACL
	9,  // 29: magma.orc8r.configurator.storage.EntityUpdateCriteria.permissions_to_update:type_name -> magma.orc8r.configurator.storage.ACL
	7,  // 30: magma.orc8r.configurator.storage.EntityAssociationsToSet.associations_to_set:type_name -> magma.orc8r.configurator.storage.EntityID
	8,  // 31: magma.orc8r.configurator.storage.EntityGraph.entities:type_name -> magma.orc8r.configurator.storage.NetworkEntity
	7,  // 32: magma.orc8r.configurator.storage.EntityGraph.root_entities:type_name -> magma.orc8r.configurator.storage.EntityID
	16, // 33: magma.orc8r.configurator.storage.EntityGraph.edges:type_name -> magma.orc8r.configurator.storage.GraphEdge
	7,  // 34: magma.orc8r.configurator.storage.GraphEdge.to:type_name -> magma.orc8r.configurator.storage.EntityID
	7,  // 35: magma.orc8r.configurator.storage.GraphEdge.from:type_name -> magma.orc8r.configurator.storage.EntityID
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_storage_proto_init() }
func file_storage_proto_init() {
	if File_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLoadFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLoadCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLoadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkUpdateCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityLoadFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityLoadCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityLoadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityUpdateCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityAssociationsToSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_NetworkIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ACL_ScopeNetworkIDs)(nil),
		(*ACL_ScopeWildcard)(nil),
		(*ACL_EntityType)(nil),
		(*ACL_TypeWildcard)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_proto_goTypes,
		DependencyIndexes: file_storage_proto_depIdxs,
		EnumInfos:         file_storage_proto_enumTypes,
		MessageInfos:      file_storage_proto_msgTypes,
	}.Build()
	File_storage_proto = out.File
	file_storage_proto_rawDesc = nil
	file_storage_proto_goTypes = nil
	file_storage_proto_depIdxs = nil
}
