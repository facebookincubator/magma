#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from functools import partial
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import dataclass_json
from marshmallow import fields as marshmallow_fields

from .datetime_utils import fromisoformat


DATETIME_FIELD = field(
    metadata={
        "dataclasses_json": {
            "encoder": datetime.isoformat,
            "decoder": fromisoformat,
            "mm_field": marshmallow_fields.DateTime(format="iso"),
        }
    }
)


@dataclass_json
@dataclass
class ServiceDetailsQuery:
    __QUERY__ = """
    query ServiceDetailsQuery($id: ID!) {
  service: node(id: $id) {
    ... on Service {
      id
      name
      externalId
      customer {
        id
        name
        externalId
      }
      terminationPoints {
        id
        name
      }
      links {
        id
      }
    }
  }
}

    """

    @dataclass_json
    @dataclass
    class ServiceDetailsQueryData:
        @dataclass_json
        @dataclass
        class Node:
            @dataclass_json
            @dataclass
            class Customer:
                id: str
                name: str
                externalId: Optional[str] = None

            @dataclass_json
            @dataclass
            class Equipment:
                id: str
                name: str

            @dataclass_json
            @dataclass
            class Link:
                id: str

            id: str
            name: str
            terminationPoints: List[Equipment]
            links: List[Link]
            externalId: Optional[str] = None
            customer: Optional[Customer] = None

        service: Optional[Node] = None

    data: Optional[ServiceDetailsQueryData] = None
    errors: Any = None

    @classmethod
    # fmt: off
    def execute(cls, client, id: str):
        # fmt: off
        variables = {"id": id}
        response_text = client.call(cls.__QUERY__, variables=variables)
        return cls.from_json(response_text).data
