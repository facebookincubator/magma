#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import dataclass_json
from marshmallow import fields as marshmallow_fields

from .datetime_utils import fromisoformat


DATETIME_FIELD = field(
    metadata={
        "dataclasses_json": {
            "encoder": datetime.isoformat,
            "decoder": fromisoformat,
            "mm_field": marshmallow_fields.DateTime(format="iso"),
        }
    }
)


@dataclass_json
@dataclass
class AddLinkInput:
    @dataclass_json
    @dataclass
    class LinkSide:
        equipment: str
        port: str

    @dataclass_json
    @dataclass
    class PropertyInput:
        propertyTypeID: str
        id: Optional[str] = None
        stringValue: Optional[str] = None
        intValue: Optional[int] = None
        booleanValue: Optional[bool] = None
        floatValue: Optional[Number] = None
        latitudeValue: Optional[Number] = None
        longitudeValue: Optional[Number] = None
        rangeFromValue: Optional[Number] = None
        rangeToValue: Optional[Number] = None
        equipmentIDValue: Optional[str] = None
        locationIDValue: Optional[str] = None
        serviceIDValue: Optional[str] = None
        isEditable: Optional[bool] = None
        isInstanceProperty: Optional[bool] = None

    sides: List[LinkSide]
    properties: List[PropertyInput]
    serviceIds: List[str]
    workOrder: Optional[str] = None


@dataclass_json
@dataclass
class AddLinkMutation:
    __QUERY__ = """
    mutation AddLinkMutation($input: AddLinkInput!) {
  addLink(input: $input) {
    id
  }
}

    """

    @dataclass_json
    @dataclass
    class AddLinkMutationData:
        @dataclass_json
        @dataclass
        class Link:
            id: str

        addLink: Optional[Link] = None

    data: Optional[AddLinkMutationData] = None
    errors: Optional[Any] = None

    @classmethod
    # fmt: off
    def execute(cls, client, input: AddLinkInput):
        # fmt: off
        variables = {"input": input}
        response_text = client.call(cls.__QUERY__, variables=variables)
        return cls.from_json(response_text).data
