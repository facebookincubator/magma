#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field
from datetime import datetime
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import dataclass_json
from marshmallow import fields as marshmallow_fields

from .datetime_utils import fromisoformat

from .property_kind_enum import PropertyKind


DATETIME_FIELD = field(
    metadata={
        "dataclasses_json": {
            "encoder": datetime.isoformat,
            "decoder": fromisoformat,
            "mm_field": marshmallow_fields.DateTime(format="iso"),
        }
    }
)


def enum_field(enum_type):
    def encode_enum(value):
        return value.value

    def decode_enum(t, value):
        return t(value)

    return field(
        metadata={
            "dataclasses_json": {
                "encoder": encode_enum,
                "decoder": partial(decode_enum, enum_type),
            }
        }
    )



@dataclass_json
@dataclass
class AddEquipmentPortTypeInput:
    @dataclass_json
    @dataclass
    class PropertyTypeInput:
        name: str
        type: PropertyKind = enum_field(PropertyKind)
        id: Optional[str] = None
        index: Optional[int] = None
        category: Optional[str] = None
        stringValue: Optional[str] = None
        intValue: Optional[int] = None
        booleanValue: Optional[bool] = None
        floatValue: Optional[Number] = None
        latitudeValue: Optional[Number] = None
        longitudeValue: Optional[Number] = None
        rangeFromValue: Optional[Number] = None
        rangeToValue: Optional[Number] = None
        isEditable: Optional[bool] = None
        isInstanceProperty: Optional[bool] = None
        isMandatory: Optional[bool] = None
        isDeleted: Optional[bool] = None

    name: str
    properties: List[PropertyTypeInput]
    linkProperties: List[PropertyTypeInput]


@dataclass_json
@dataclass
class AddEquipmentPortTypeMutation:
    __QUERY__ = """
    mutation AddEquipmentPortTypeMutation($input: AddEquipmentPortTypeInput!) {
  addEquipmentPortType(input: $input) {
    id
    name
  }
}

    """

    @dataclass_json
    @dataclass
    class AddEquipmentPortTypeMutationData:
        @dataclass_json
        @dataclass
        class EquipmentPortType:
            id: str
            name: str

        addEquipmentPortType: Optional[EquipmentPortType] = None

    data: Optional[AddEquipmentPortTypeMutationData] = None
    errors: Optional[Any] = None

    @classmethod
    # fmt: off
    def execute(cls, client, input: AddEquipmentPortTypeInput):
        # fmt: off
        variables = {"input": input}
        response_text = client.call(cls.__QUERY__, variables=variables)
        return cls.from_json(response_text).data
