#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from functools import partial
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import dataclass_json
from marshmallow import fields as marshmallow_fields

from .datetime_utils import fromisoformat


DATETIME_FIELD = field(
    metadata={
        "dataclasses_json": {
            "encoder": datetime.isoformat,
            "decoder": fromisoformat,
            "mm_field": marshmallow_fields.DateTime(format="iso"),
        }
    }
)


@dataclass_json
@dataclass
class ServiceTypeServicesQuery:
    __QUERY__ = """
    query ServiceTypeServicesQuery($id: ID!) {
  serviceType: node(id: $id) {
    ... on ServiceType {
      services {
        id
        name
        externalId
        customer {
          id
          name
          externalId
        }
      }
    }
  }
}

    """

    @dataclass_json
    @dataclass
    class ServiceTypeServicesQueryData:
        @dataclass_json
        @dataclass
        class Node:
            @dataclass_json
            @dataclass
            class Service:
                @dataclass_json
                @dataclass
                class Customer:
                    id: str
                    name: str
                    externalId: Optional[str] = None

                id: str
                name: str
                externalId: Optional[str] = None
                customer: Optional[Customer] = None

            services: List[Service]

        serviceType: Optional[Node] = None

    data: Optional[ServiceTypeServicesQueryData] = None
    errors: Any = None

    @classmethod
    # fmt: off
    def execute(cls, client, id: str):
        # fmt: off
        variables = {"id": id}
        response_text = client.call(cls.__QUERY__, variables=variables)
        return cls.from_json(response_text).data
