// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/facebookincubator/symphony/cloud/log"
	"github.com/facebookincubator/symphony/cloud/mysql"
	"github.com/facebookincubator/symphony/cloud/server"
	"github.com/facebookincubator/symphony/graph/graphgrpc"
	"github.com/facebookincubator/symphony/graph/graphhttp"
	"github.com/facebookincubator/symphony/graph/viewer"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func NewApplication(flags *cliFlags) (*application, func(), error) {
	config := flags.Log
	logger, cleanup, err := log.New(config)
	if err != nil {
		return nil, nil, err
	}
	string2 := flags.MySQL
	mySQLTenancy, err := newTenancy(logger, string2)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	options := flags.Census
	graphhttpConfig := graphhttp.Config{
		Tenancy: mySQLTenancy,
		Logger:  logger,
		Census:  options,
	}
	server, cleanup2, err := graphhttp.NewServer(graphhttpConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db := mysql.Open(string2)
	graphgrpcConfig := graphgrpc.Config{
		DB:     db,
		Logger: logger,
	}
	grpcServer, cleanup3, err := graphgrpc.NewServer(graphgrpcConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mainApplication := newApplication(logger, server, grpcServer, flags)
	return mainApplication, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func newApplication(logger log.Logger, httpserver *server.Server, grpcserver *grpc.Server, flags *cliFlags) *application {
	var app application
	app.Logger = logger.Background()
	app.http.Server = httpserver
	app.http.addr = flags.HTTPAddress
	app.grpc.Server = grpcserver
	app.grpc.addr = flags.GRPCAddress
	return &app
}

func newTenancy(logger log.Logger, dsn string) (*viewer.MySQLTenancy, error) {
	tenancy, err := viewer.NewMySQLTenancy(dsn)
	if err != nil {
		return nil, errors.WithMessage(err, "creating mysql tenancy")
	}
	mysql.SetLogger(logger)
	return tenancy, nil
}
