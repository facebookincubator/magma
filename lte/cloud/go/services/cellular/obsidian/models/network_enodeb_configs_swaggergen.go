// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkEnodebConfigs eNodeB configuration for a network
// swagger:model network_enodeb_configs
type NetworkEnodebConfigs struct {

	// device class
	// Enum: [Baicells Nova-233 G2 OD FDD Baicells Nova-243 OD TDD Baicells ID TDD/FDD NuRAN Cavium OC-LTE]
	DeviceClass string `json:"device_class,omitempty"`

	// earfcndl
	// Maximum: 65535
	// Minimum: 0
	Earfcndl *uint32 `json:"earfcndl,omitempty"`

	// pci
	// Maximum: 503
	Pci uint32 `json:"pci,omitempty"`

	// special subframe pattern
	// Maximum: 9
	// Minimum: 0
	SpecialSubframePattern *int64 `json:"special_subframe_pattern,omitempty"`

	// subframe assignment
	// Maximum: 6
	// Minimum: 0
	SubframeAssignment *int64 `json:"subframe_assignment,omitempty"`

	// transmit enabled
	TransmitEnabled bool `json:"transmit_enabled,omitempty"`
}

// Validate validates this network enodeb configs
func (m *NetworkEnodebConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEarfcndl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePci(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecialSubframePattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubframeAssignment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var networkEnodebConfigsTypeDeviceClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Baicells Nova-233 G2 OD FDD","Baicells Nova-243 OD TDD","Baicells ID TDD/FDD","NuRAN Cavium OC-LTE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkEnodebConfigsTypeDeviceClassPropEnum = append(networkEnodebConfigsTypeDeviceClassPropEnum, v)
	}
}

const (

	// NetworkEnodebConfigsDeviceClassBaicellsNova233G2ODFDD captures enum value "Baicells Nova-233 G2 OD FDD"
	NetworkEnodebConfigsDeviceClassBaicellsNova233G2ODFDD string = "Baicells Nova-233 G2 OD FDD"

	// NetworkEnodebConfigsDeviceClassBaicellsNova243ODTDD captures enum value "Baicells Nova-243 OD TDD"
	NetworkEnodebConfigsDeviceClassBaicellsNova243ODTDD string = "Baicells Nova-243 OD TDD"

	// NetworkEnodebConfigsDeviceClassBaicellsIDTDDFDD captures enum value "Baicells ID TDD/FDD"
	NetworkEnodebConfigsDeviceClassBaicellsIDTDDFDD string = "Baicells ID TDD/FDD"

	// NetworkEnodebConfigsDeviceClassNuRANCaviumOCLTE captures enum value "NuRAN Cavium OC-LTE"
	NetworkEnodebConfigsDeviceClassNuRANCaviumOCLTE string = "NuRAN Cavium OC-LTE"
)

// prop value enum
func (m *NetworkEnodebConfigs) validateDeviceClassEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkEnodebConfigsTypeDeviceClassPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkEnodebConfigs) validateDeviceClass(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceClass) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceClassEnum("device_class", "body", m.DeviceClass); err != nil {
		return err
	}

	return nil
}

func (m *NetworkEnodebConfigs) validateEarfcndl(formats strfmt.Registry) error {

	if swag.IsZero(m.Earfcndl) { // not required
		return nil
	}

	if err := validate.MinimumInt("earfcndl", "body", int64(*m.Earfcndl), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("earfcndl", "body", int64(*m.Earfcndl), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkEnodebConfigs) validatePci(formats strfmt.Registry) error {

	if swag.IsZero(m.Pci) { // not required
		return nil
	}

	if err := validate.MaximumInt("pci", "body", int64(m.Pci), 503, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkEnodebConfigs) validateSpecialSubframePattern(formats strfmt.Registry) error {

	if swag.IsZero(m.SpecialSubframePattern) { // not required
		return nil
	}

	if err := validate.MinimumInt("special_subframe_pattern", "body", int64(*m.SpecialSubframePattern), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("special_subframe_pattern", "body", int64(*m.SpecialSubframePattern), 9, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkEnodebConfigs) validateSubframeAssignment(formats strfmt.Registry) error {

	if swag.IsZero(m.SubframeAssignment) { // not required
		return nil
	}

	if err := validate.MinimumInt("subframe_assignment", "body", int64(*m.SubframeAssignment), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("subframe_assignment", "body", int64(*m.SubframeAssignment), 6, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkEnodebConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkEnodebConfigs) UnmarshalBinary(b []byte) error {
	var res NetworkEnodebConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
