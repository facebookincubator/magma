// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GatewayApnConfig gateway apn config
// swagger:model gateway_apn_config
type GatewayApnConfig struct {

	// apn filter
	// Enum: [DEFAULT BLOCK PERMIT]
	ApnFilter string `json:"apn_filter,omitempty"`

	// apn name
	// Required: true
	ApnName ApnName `json:"apn_name"`

	// dns primary
	// Max Length: 45
	// Min Length: 5
	DNSPrimary string `json:"dns_primary,omitempty"`

	// dns secondary
	// Max Length: 45
	// Min Length: 5
	DNSSecondary string `json:"dns_secondary,omitempty"`

	// id
	// Required: true
	ID GatewayApnConfigID `json:"id"`

	// ip allocation mode
	// Enum: [IP_POOL DHCP]
	IPAllocationMode string `json:"ip_allocation_mode,omitempty"`

	// ip blocks
	IPBlocks []string `json:"ip_blocks"`

	// ipv6 blocks
	IPV6Blocks []string `json:"ipv6_blocks"`

	// ipv6 prefix allocation mode
	// Enum: [RANDOM HASH]
	IPV6PrefixAllocationMode string `json:"ipv6_prefix_allocation_mode,omitempty"`

	// transport config
	TransportConfig *TransportConfig `json:"transport_config,omitempty"`
}

// Validate validates this gateway apn config
func (m *GatewayApnConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApnFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApnName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSPrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSSecondary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAllocationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6PrefixAllocationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gatewayApnConfigTypeApnFilterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","BLOCK","PERMIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayApnConfigTypeApnFilterPropEnum = append(gatewayApnConfigTypeApnFilterPropEnum, v)
	}
}

const (

	// GatewayApnConfigApnFilterDEFAULT captures enum value "DEFAULT"
	GatewayApnConfigApnFilterDEFAULT string = "DEFAULT"

	// GatewayApnConfigApnFilterBLOCK captures enum value "BLOCK"
	GatewayApnConfigApnFilterBLOCK string = "BLOCK"

	// GatewayApnConfigApnFilterPERMIT captures enum value "PERMIT"
	GatewayApnConfigApnFilterPERMIT string = "PERMIT"
)

// prop value enum
func (m *GatewayApnConfig) validateApnFilterEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gatewayApnConfigTypeApnFilterPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayApnConfig) validateApnFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.ApnFilter) { // not required
		return nil
	}

	// value enum
	if err := m.validateApnFilterEnum("apn_filter", "body", m.ApnFilter); err != nil {
		return err
	}

	return nil
}

func (m *GatewayApnConfig) validateApnName(formats strfmt.Registry) error {

	if err := m.ApnName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("apn_name")
		}
		return err
	}

	return nil
}

func (m *GatewayApnConfig) validateDNSPrimary(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSPrimary) { // not required
		return nil
	}

	if err := validate.MinLength("dns_primary", "body", string(m.DNSPrimary), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("dns_primary", "body", string(m.DNSPrimary), 45); err != nil {
		return err
	}

	return nil
}

func (m *GatewayApnConfig) validateDNSSecondary(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSSecondary) { // not required
		return nil
	}

	if err := validate.MinLength("dns_secondary", "body", string(m.DNSSecondary), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("dns_secondary", "body", string(m.DNSSecondary), 45); err != nil {
		return err
	}

	return nil
}

func (m *GatewayApnConfig) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

var gatewayApnConfigTypeIPAllocationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IP_POOL","DHCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayApnConfigTypeIPAllocationModePropEnum = append(gatewayApnConfigTypeIPAllocationModePropEnum, v)
	}
}

const (

	// GatewayApnConfigIPAllocationModeIPPOOL captures enum value "IP_POOL"
	GatewayApnConfigIPAllocationModeIPPOOL string = "IP_POOL"

	// GatewayApnConfigIPAllocationModeDHCP captures enum value "DHCP"
	GatewayApnConfigIPAllocationModeDHCP string = "DHCP"
)

// prop value enum
func (m *GatewayApnConfig) validateIPAllocationModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gatewayApnConfigTypeIPAllocationModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayApnConfig) validateIPAllocationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAllocationMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPAllocationModeEnum("ip_allocation_mode", "body", m.IPAllocationMode); err != nil {
		return err
	}

	return nil
}

func (m *GatewayApnConfig) validateIPBlocks(formats strfmt.Registry) error {

	if swag.IsZero(m.IPBlocks) { // not required
		return nil
	}

	for i := 0; i < len(m.IPBlocks); i++ {

		if err := validate.MinLength("ip_blocks"+"."+strconv.Itoa(i), "body", string(m.IPBlocks[i]), 5); err != nil {
			return err
		}

		if err := validate.MaxLength("ip_blocks"+"."+strconv.Itoa(i), "body", string(m.IPBlocks[i]), 49); err != nil {
			return err
		}

	}

	return nil
}

var gatewayApnConfigTypeIPV6PrefixAllocationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RANDOM","HASH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayApnConfigTypeIPV6PrefixAllocationModePropEnum = append(gatewayApnConfigTypeIPV6PrefixAllocationModePropEnum, v)
	}
}

const (

	// GatewayApnConfigIPV6PrefixAllocationModeRANDOM captures enum value "RANDOM"
	GatewayApnConfigIPV6PrefixAllocationModeRANDOM string = "RANDOM"

	// GatewayApnConfigIPV6PrefixAllocationModeHASH captures enum value "HASH"
	GatewayApnConfigIPV6PrefixAllocationModeHASH string = "HASH"
)

// prop value enum
func (m *GatewayApnConfig) validateIPV6PrefixAllocationModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gatewayApnConfigTypeIPV6PrefixAllocationModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayApnConfig) validateIPV6PrefixAllocationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.IPV6PrefixAllocationMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPV6PrefixAllocationModeEnum("ipv6_prefix_allocation_mode", "body", m.IPV6PrefixAllocationMode); err != nil {
		return err
	}

	return nil
}

func (m *GatewayApnConfig) validateTransportConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.TransportConfig) { // not required
		return nil
	}

	if m.TransportConfig != nil {
		if err := m.TransportConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transport_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayApnConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayApnConfig) UnmarshalBinary(b []byte) error {
	var res GatewayApnConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
