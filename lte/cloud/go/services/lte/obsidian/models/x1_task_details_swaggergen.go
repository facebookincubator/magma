// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// X1TaskDetails x1 task details
// swagger:model x1_task_details
type X1TaskDetails struct {

	// correlation id
	CorrelationID string `json:"correlation_id,omitempty"`

	// delivery type
	// Required: true
	DeliveryType string `json:"delivery_type"`

	// did
	// Required: true
	Did string `json:"did"`

	// target id
	// Required: true
	TargetID string `json:"target_id"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// xid
	// Required: true
	Xid string `json:"xid"`
}

// Validate validates this x1 task details
func (m *X1TaskDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeliveryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X1TaskDetails) validateDeliveryType(formats strfmt.Registry) error {

	if err := validate.RequiredString("delivery_type", "body", string(m.DeliveryType)); err != nil {
		return err
	}

	return nil
}

func (m *X1TaskDetails) validateDid(formats strfmt.Registry) error {

	if err := validate.RequiredString("did", "body", string(m.Did)); err != nil {
		return err
	}

	return nil
}

func (m *X1TaskDetails) validateTargetID(formats strfmt.Registry) error {

	if err := validate.RequiredString("target_id", "body", string(m.TargetID)); err != nil {
		return err
	}

	return nil
}

func (m *X1TaskDetails) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X1TaskDetails) validateXid(formats strfmt.Registry) error {

	if err := validate.RequiredString("xid", "body", string(m.Xid)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *X1TaskDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X1TaskDetails) UnmarshalBinary(b []byte) error {
	var res X1TaskDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
