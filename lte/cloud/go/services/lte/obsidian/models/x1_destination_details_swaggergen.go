// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// X1DestinationDetails x1 destination details
// swagger:model x1_destination_details
type X1DestinationDetails struct {

	// delivery addr
	// Required: true
	DeliveryAddr string `json:"delivery_addr"`

	// delivery type
	// Required: true
	DeliveryType string `json:"delivery_type"`

	// did
	// Required: true
	Did string `json:"did"`
}

// Validate validates this x1 destination details
func (m *X1DestinationDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeliveryAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X1DestinationDetails) validateDeliveryAddr(formats strfmt.Registry) error {

	if err := validate.RequiredString("delivery_addr", "body", string(m.DeliveryAddr)); err != nil {
		return err
	}

	return nil
}

func (m *X1DestinationDetails) validateDeliveryType(formats strfmt.Registry) error {

	if err := validate.RequiredString("delivery_type", "body", string(m.DeliveryType)); err != nil {
		return err
	}

	return nil
}

func (m *X1DestinationDetails) validateDid(formats strfmt.Registry) error {

	if err := validate.RequiredString("did", "body", string(m.Did)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *X1DestinationDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X1DestinationDetails) UnmarshalBinary(b []byte) error {
	var res X1DestinationDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
