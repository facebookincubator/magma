// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lte/protos/policydb.proto

package protos // import "magma/lte/cloud/go/protos"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "magma/orc8r/cloud/go/protos"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PolicyRule_TrackingType int32

const (
	PolicyRule_ONLY_OCS     PolicyRule_TrackingType = 0
	PolicyRule_ONLY_PCRF    PolicyRule_TrackingType = 1
	PolicyRule_OCS_AND_PCRF PolicyRule_TrackingType = 2
	PolicyRule_NO_TRACKING  PolicyRule_TrackingType = 3
)

var PolicyRule_TrackingType_name = map[int32]string{
	0: "ONLY_OCS",
	1: "ONLY_PCRF",
	2: "OCS_AND_PCRF",
	3: "NO_TRACKING",
}
var PolicyRule_TrackingType_value = map[string]int32{
	"ONLY_OCS":     0,
	"ONLY_PCRF":    1,
	"OCS_AND_PCRF": 2,
	"NO_TRACKING":  3,
}

func (x PolicyRule_TrackingType) String() string {
	return proto.EnumName(PolicyRule_TrackingType_name, int32(x))
}
func (PolicyRule_TrackingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{0, 0}
}

type FlowDescription_Action int32

const (
	FlowDescription_PERMIT FlowDescription_Action = 0
	FlowDescription_DENY   FlowDescription_Action = 1
)

var FlowDescription_Action_name = map[int32]string{
	0: "PERMIT",
	1: "DENY",
}
var FlowDescription_Action_value = map[string]int32{
	"PERMIT": 0,
	"DENY":   1,
}

func (x FlowDescription_Action) String() string {
	return proto.EnumName(FlowDescription_Action_name, int32(x))
}
func (FlowDescription_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{2, 0}
}

type FlowMatch_IPProto int32

const (
	FlowMatch_IPPROTO_IP       FlowMatch_IPProto = 0
	FlowMatch_IPPROTO_HOPOPTS  FlowMatch_IPProto = 0
	FlowMatch_IPPROTO_ICMP     FlowMatch_IPProto = 1
	FlowMatch_IPPROTO_IGMP     FlowMatch_IPProto = 2
	FlowMatch_IPPROTO_TCP      FlowMatch_IPProto = 6
	FlowMatch_IPPROTO_UDP      FlowMatch_IPProto = 17
	FlowMatch_IPPROTO_ROUTING  FlowMatch_IPProto = 43
	FlowMatch_IPPROTO_FRAGMENT FlowMatch_IPProto = 44
	FlowMatch_IPPROTO_GRE      FlowMatch_IPProto = 47
	FlowMatch_IPPROTO_AH       FlowMatch_IPProto = 51
	FlowMatch_IPPROTO_ICMPV6   FlowMatch_IPProto = 58
	FlowMatch_IPPROTO_NONE     FlowMatch_IPProto = 59
	FlowMatch_IPPROTO_DSTOPTS  FlowMatch_IPProto = 60
	FlowMatch_IPPROTO_OSPF     FlowMatch_IPProto = 89
	FlowMatch_IPPROTO_VRRP     FlowMatch_IPProto = 112
	FlowMatch_IPPROTO_SCTP     FlowMatch_IPProto = 132
)

var FlowMatch_IPProto_name = map[int32]string{
	0: "IPPROTO_IP",
	// Duplicate value: 0: "IPPROTO_HOPOPTS",
	1:   "IPPROTO_ICMP",
	2:   "IPPROTO_IGMP",
	6:   "IPPROTO_TCP",
	17:  "IPPROTO_UDP",
	43:  "IPPROTO_ROUTING",
	44:  "IPPROTO_FRAGMENT",
	47:  "IPPROTO_GRE",
	51:  "IPPROTO_AH",
	58:  "IPPROTO_ICMPV6",
	59:  "IPPROTO_NONE",
	60:  "IPPROTO_DSTOPTS",
	89:  "IPPROTO_OSPF",
	112: "IPPROTO_VRRP",
	132: "IPPROTO_SCTP",
}
var FlowMatch_IPProto_value = map[string]int32{
	"IPPROTO_IP":       0,
	"IPPROTO_HOPOPTS":  0,
	"IPPROTO_ICMP":     1,
	"IPPROTO_IGMP":     2,
	"IPPROTO_TCP":      6,
	"IPPROTO_UDP":      17,
	"IPPROTO_ROUTING":  43,
	"IPPROTO_FRAGMENT": 44,
	"IPPROTO_GRE":      47,
	"IPPROTO_AH":       51,
	"IPPROTO_ICMPV6":   58,
	"IPPROTO_NONE":     59,
	"IPPROTO_DSTOPTS":  60,
	"IPPROTO_OSPF":     89,
	"IPPROTO_VRRP":     112,
	"IPPROTO_SCTP":     132,
}

func (x FlowMatch_IPProto) String() string {
	return proto.EnumName(FlowMatch_IPProto_name, int32(x))
}
func (FlowMatch_IPProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{3, 0}
}

type FlowMatch_Direction int32

const (
	FlowMatch_UPLINK   FlowMatch_Direction = 0
	FlowMatch_DOWNLINK FlowMatch_Direction = 1
)

var FlowMatch_Direction_name = map[int32]string{
	0: "UPLINK",
	1: "DOWNLINK",
}
var FlowMatch_Direction_value = map[string]int32{
	"UPLINK":   0,
	"DOWNLINK": 1,
}

func (x FlowMatch_Direction) String() string {
	return proto.EnumName(FlowMatch_Direction_name, int32(x))
}
func (FlowMatch_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{3, 1}
}

type QosArp_PreCap int32

const (
	QosArp_PRE_CAP_ENABLED  QosArp_PreCap = 0
	QosArp_PRE_CAP_DISABLED QosArp_PreCap = 1
)

var QosArp_PreCap_name = map[int32]string{
	0: "PRE_CAP_ENABLED",
	1: "PRE_CAP_DISABLED",
}
var QosArp_PreCap_value = map[string]int32{
	"PRE_CAP_ENABLED":  0,
	"PRE_CAP_DISABLED": 1,
}

func (x QosArp_PreCap) String() string {
	return proto.EnumName(QosArp_PreCap_name, int32(x))
}
func (QosArp_PreCap) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{4, 0}
}

type QosArp_PreVul int32

const (
	QosArp_PRE_VUL_ENABLED  QosArp_PreVul = 0
	QosArp_PRE_VUL_DISABLED QosArp_PreVul = 1
)

var QosArp_PreVul_name = map[int32]string{
	0: "PRE_VUL_ENABLED",
	1: "PRE_VUL_DISABLED",
}
var QosArp_PreVul_value = map[string]int32{
	"PRE_VUL_ENABLED":  0,
	"PRE_VUL_DISABLED": 1,
}

func (x QosArp_PreVul) String() string {
	return proto.EnumName(QosArp_PreVul_name, int32(x))
}
func (QosArp_PreVul) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{4, 1}
}

type FlowQos_Qci int32

const (
	FlowQos_QCI_0  FlowQos_Qci = 0
	FlowQos_QCI_1  FlowQos_Qci = 1
	FlowQos_QCI_2  FlowQos_Qci = 2
	FlowQos_QCI_3  FlowQos_Qci = 3
	FlowQos_QCI_4  FlowQos_Qci = 4
	FlowQos_QCI_5  FlowQos_Qci = 5
	FlowQos_QCI_6  FlowQos_Qci = 6
	FlowQos_QCI_7  FlowQos_Qci = 7
	FlowQos_QCI_8  FlowQos_Qci = 8
	FlowQos_QCI_9  FlowQos_Qci = 9
	FlowQos_QCI_65 FlowQos_Qci = 65
	FlowQos_QCI_66 FlowQos_Qci = 66
	FlowQos_QCI_67 FlowQos_Qci = 67
	FlowQos_QCI_70 FlowQos_Qci = 70
	FlowQos_QCI_75 FlowQos_Qci = 75
	FlowQos_QCI_79 FlowQos_Qci = 79
)

var FlowQos_Qci_name = map[int32]string{
	0:  "QCI_0",
	1:  "QCI_1",
	2:  "QCI_2",
	3:  "QCI_3",
	4:  "QCI_4",
	5:  "QCI_5",
	6:  "QCI_6",
	7:  "QCI_7",
	8:  "QCI_8",
	9:  "QCI_9",
	65: "QCI_65",
	66: "QCI_66",
	67: "QCI_67",
	70: "QCI_70",
	75: "QCI_75",
	79: "QCI_79",
}
var FlowQos_Qci_value = map[string]int32{
	"QCI_0":  0,
	"QCI_1":  1,
	"QCI_2":  2,
	"QCI_3":  3,
	"QCI_4":  4,
	"QCI_5":  5,
	"QCI_6":  6,
	"QCI_7":  7,
	"QCI_8":  8,
	"QCI_9":  9,
	"QCI_65": 65,
	"QCI_66": 66,
	"QCI_67": 67,
	"QCI_70": 70,
	"QCI_75": 75,
	"QCI_79": 79,
}

func (x FlowQos_Qci) String() string {
	return proto.EnumName(FlowQos_Qci_name, int32(x))
}
func (FlowQos_Qci) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{5, 0}
}

type RedirectInformation_Support int32

const (
	RedirectInformation_DISABLED RedirectInformation_Support = 0
	RedirectInformation_ENABLED  RedirectInformation_Support = 1
)

var RedirectInformation_Support_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
}
var RedirectInformation_Support_value = map[string]int32{
	"DISABLED": 0,
	"ENABLED":  1,
}

func (x RedirectInformation_Support) String() string {
	return proto.EnumName(RedirectInformation_Support_name, int32(x))
}
func (RedirectInformation_Support) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{6, 0}
}

type RedirectInformation_AddressType int32

const (
	RedirectInformation_IPv4    RedirectInformation_AddressType = 0
	RedirectInformation_IPv6    RedirectInformation_AddressType = 1
	RedirectInformation_URL     RedirectInformation_AddressType = 2
	RedirectInformation_SIP_URI RedirectInformation_AddressType = 3
)

var RedirectInformation_AddressType_name = map[int32]string{
	0: "IPv4",
	1: "IPv6",
	2: "URL",
	3: "SIP_URI",
}
var RedirectInformation_AddressType_value = map[string]int32{
	"IPv4":    0,
	"IPv6":    1,
	"URL":     2,
	"SIP_URI": 3,
}

func (x RedirectInformation_AddressType) String() string {
	return proto.EnumName(RedirectInformation_AddressType_name, int32(x))
}
func (RedirectInformation_AddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{6, 1}
}

// --------------------------------------------------------------------------
// Policy flow rules
//
// A rule is a named policy that defines a type of traffic to meter.
// Each rule has a unique human readable ID associated with the traffic
// it meters such as "All TCP Traffic to Facebook". They are classified
// using FlowMatch, and if two rules intersect, the one with the highest
// priority takes precedence. These are defined on the cloud and are streamed
// to the gateway Metering application.
//
// A match is an extensible reflection of Ryu OFPMatch which is used by rules
// to classify flows for each subscriber. For new fields and definitons see:
// http://ryu.readthedocs.io/en/latest/ofproto_v1_4_ref.html#flow-match-structure
// --------------------------------------------------------------------------
type PolicyRule struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The precedence for the flow. Same definition as 3GPP.
	Priority             uint32                  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	RatingGroup          uint32                  `protobuf:"varint,4,opt,name=rating_group,json=ratingGroup,proto3" json:"rating_group,omitempty"`
	MonitoringKey        string                  `protobuf:"bytes,6,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	Redirect             *RedirectInformation    `protobuf:"bytes,9,opt,name=redirect,proto3" json:"redirect,omitempty"`
	FlowList             []*FlowDescription      `protobuf:"bytes,7,rep,name=flow_list,json=flowList,proto3" json:"flow_list,omitempty"`
	Qos                  *FlowQos                `protobuf:"bytes,8,opt,name=qos,proto3" json:"qos,omitempty"`
	TrackingType         PolicyRule_TrackingType `protobuf:"varint,10,opt,name=tracking_type,json=trackingType,proto3,enum=magma.lte.PolicyRule_TrackingType" json:"tracking_type,omitempty"`
	HardTimeout          uint32                  `protobuf:"varint,11,opt,name=hard_timeout,json=hardTimeout,proto3" json:"hard_timeout,omitempty"`
	ServiceIdentifier    *ServiceIdentifier      `protobuf:"bytes,12,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PolicyRule) Reset()         { *m = PolicyRule{} }
func (m *PolicyRule) String() string { return proto.CompactTextString(m) }
func (*PolicyRule) ProtoMessage()    {}
func (*PolicyRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{0}
}
func (m *PolicyRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyRule.Unmarshal(m, b)
}
func (m *PolicyRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyRule.Marshal(b, m, deterministic)
}
func (dst *PolicyRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRule.Merge(dst, src)
}
func (m *PolicyRule) XXX_Size() int {
	return xxx_messageInfo_PolicyRule.Size(m)
}
func (m *PolicyRule) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRule.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRule proto.InternalMessageInfo

func (m *PolicyRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PolicyRule) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *PolicyRule) GetRatingGroup() uint32 {
	if m != nil {
		return m.RatingGroup
	}
	return 0
}

func (m *PolicyRule) GetMonitoringKey() string {
	if m != nil {
		return m.MonitoringKey
	}
	return ""
}

func (m *PolicyRule) GetRedirect() *RedirectInformation {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *PolicyRule) GetFlowList() []*FlowDescription {
	if m != nil {
		return m.FlowList
	}
	return nil
}

func (m *PolicyRule) GetQos() *FlowQos {
	if m != nil {
		return m.Qos
	}
	return nil
}

func (m *PolicyRule) GetTrackingType() PolicyRule_TrackingType {
	if m != nil {
		return m.TrackingType
	}
	return PolicyRule_ONLY_OCS
}

func (m *PolicyRule) GetHardTimeout() uint32 {
	if m != nil {
		return m.HardTimeout
	}
	return 0
}

func (m *PolicyRule) GetServiceIdentifier() *ServiceIdentifier {
	if m != nil {
		return m.ServiceIdentifier
	}
	return nil
}

type ServiceIdentifier struct {
	Value                uint32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceIdentifier) Reset()         { *m = ServiceIdentifier{} }
func (m *ServiceIdentifier) String() string { return proto.CompactTextString(m) }
func (*ServiceIdentifier) ProtoMessage()    {}
func (*ServiceIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{1}
}
func (m *ServiceIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceIdentifier.Unmarshal(m, b)
}
func (m *ServiceIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceIdentifier.Marshal(b, m, deterministic)
}
func (dst *ServiceIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceIdentifier.Merge(dst, src)
}
func (m *ServiceIdentifier) XXX_Size() int {
	return xxx_messageInfo_ServiceIdentifier.Size(m)
}
func (m *ServiceIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceIdentifier proto.InternalMessageInfo

func (m *ServiceIdentifier) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FlowDescription struct {
	Match                *FlowMatch             `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Action               FlowDescription_Action `protobuf:"varint,2,opt,name=action,proto3,enum=magma.lte.FlowDescription_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FlowDescription) Reset()         { *m = FlowDescription{} }
func (m *FlowDescription) String() string { return proto.CompactTextString(m) }
func (*FlowDescription) ProtoMessage()    {}
func (*FlowDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{2}
}
func (m *FlowDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowDescription.Unmarshal(m, b)
}
func (m *FlowDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowDescription.Marshal(b, m, deterministic)
}
func (dst *FlowDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowDescription.Merge(dst, src)
}
func (m *FlowDescription) XXX_Size() int {
	return xxx_messageInfo_FlowDescription.Size(m)
}
func (m *FlowDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowDescription.DiscardUnknown(m)
}

var xxx_messageInfo_FlowDescription proto.InternalMessageInfo

func (m *FlowDescription) GetMatch() *FlowMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *FlowDescription) GetAction() FlowDescription_Action {
	if m != nil {
		return m.Action
	}
	return FlowDescription_PERMIT
}

type FlowMatch struct {
	Ipv4Src              string              `protobuf:"bytes,1,opt,name=ipv4_src,json=ipv4Src,proto3" json:"ipv4_src,omitempty"`
	Ipv4Dst              string              `protobuf:"bytes,2,opt,name=ipv4_dst,json=ipv4Dst,proto3" json:"ipv4_dst,omitempty"`
	TcpSrc               uint32              `protobuf:"varint,3,opt,name=tcp_src,json=tcpSrc,proto3" json:"tcp_src,omitempty"`
	TcpDst               uint32              `protobuf:"varint,4,opt,name=tcp_dst,json=tcpDst,proto3" json:"tcp_dst,omitempty"`
	UdpSrc               uint32              `protobuf:"varint,5,opt,name=udp_src,json=udpSrc,proto3" json:"udp_src,omitempty"`
	UdpDst               uint32              `protobuf:"varint,6,opt,name=udp_dst,json=udpDst,proto3" json:"udp_dst,omitempty"`
	IpProto              FlowMatch_IPProto   `protobuf:"varint,7,opt,name=ip_proto,json=ipProto,proto3,enum=magma.lte.FlowMatch_IPProto" json:"ip_proto,omitempty"`
	Direction            FlowMatch_Direction `protobuf:"varint,8,opt,name=direction,proto3,enum=magma.lte.FlowMatch_Direction" json:"direction,omitempty"`
	AppName              string              `protobuf:"bytes,9,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FlowMatch) Reset()         { *m = FlowMatch{} }
func (m *FlowMatch) String() string { return proto.CompactTextString(m) }
func (*FlowMatch) ProtoMessage()    {}
func (*FlowMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{3}
}
func (m *FlowMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowMatch.Unmarshal(m, b)
}
func (m *FlowMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowMatch.Marshal(b, m, deterministic)
}
func (dst *FlowMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowMatch.Merge(dst, src)
}
func (m *FlowMatch) XXX_Size() int {
	return xxx_messageInfo_FlowMatch.Size(m)
}
func (m *FlowMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowMatch.DiscardUnknown(m)
}

var xxx_messageInfo_FlowMatch proto.InternalMessageInfo

func (m *FlowMatch) GetIpv4Src() string {
	if m != nil {
		return m.Ipv4Src
	}
	return ""
}

func (m *FlowMatch) GetIpv4Dst() string {
	if m != nil {
		return m.Ipv4Dst
	}
	return ""
}

func (m *FlowMatch) GetTcpSrc() uint32 {
	if m != nil {
		return m.TcpSrc
	}
	return 0
}

func (m *FlowMatch) GetTcpDst() uint32 {
	if m != nil {
		return m.TcpDst
	}
	return 0
}

func (m *FlowMatch) GetUdpSrc() uint32 {
	if m != nil {
		return m.UdpSrc
	}
	return 0
}

func (m *FlowMatch) GetUdpDst() uint32 {
	if m != nil {
		return m.UdpDst
	}
	return 0
}

func (m *FlowMatch) GetIpProto() FlowMatch_IPProto {
	if m != nil {
		return m.IpProto
	}
	return FlowMatch_IPPROTO_IP
}

func (m *FlowMatch) GetDirection() FlowMatch_Direction {
	if m != nil {
		return m.Direction
	}
	return FlowMatch_UPLINK
}

func (m *FlowMatch) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

type QosArp struct {
	PriorityLevel        uint32        `protobuf:"varint,1,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreCapability        QosArp_PreCap `protobuf:"varint,2,opt,name=pre_capability,json=preCapability,proto3,enum=magma.lte.QosArp_PreCap" json:"pre_capability,omitempty"`
	PreVulnerability     QosArp_PreVul `protobuf:"varint,3,opt,name=pre_vulnerability,json=preVulnerability,proto3,enum=magma.lte.QosArp_PreVul" json:"pre_vulnerability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QosArp) Reset()         { *m = QosArp{} }
func (m *QosArp) String() string { return proto.CompactTextString(m) }
func (*QosArp) ProtoMessage()    {}
func (*QosArp) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{4}
}
func (m *QosArp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosArp.Unmarshal(m, b)
}
func (m *QosArp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosArp.Marshal(b, m, deterministic)
}
func (dst *QosArp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosArp.Merge(dst, src)
}
func (m *QosArp) XXX_Size() int {
	return xxx_messageInfo_QosArp.Size(m)
}
func (m *QosArp) XXX_DiscardUnknown() {
	xxx_messageInfo_QosArp.DiscardUnknown(m)
}

var xxx_messageInfo_QosArp proto.InternalMessageInfo

func (m *QosArp) GetPriorityLevel() uint32 {
	if m != nil {
		return m.PriorityLevel
	}
	return 0
}

func (m *QosArp) GetPreCapability() QosArp_PreCap {
	if m != nil {
		return m.PreCapability
	}
	return QosArp_PRE_CAP_ENABLED
}

func (m *QosArp) GetPreVulnerability() QosArp_PreVul {
	if m != nil {
		return m.PreVulnerability
	}
	return QosArp_PRE_VUL_ENABLED
}

type FlowQos struct {
	MaxReqBwUl           uint32      `protobuf:"varint,1,opt,name=max_req_bw_ul,json=maxReqBwUl,proto3" json:"max_req_bw_ul,omitempty"`
	MaxReqBwDl           uint32      `protobuf:"varint,2,opt,name=max_req_bw_dl,json=maxReqBwDl,proto3" json:"max_req_bw_dl,omitempty"`
	GbrUl                uint32      `protobuf:"varint,3,opt,name=gbr_ul,json=gbrUl,proto3" json:"gbr_ul,omitempty"`
	GbrDl                uint32      `protobuf:"varint,4,opt,name=gbr_dl,json=gbrDl,proto3" json:"gbr_dl,omitempty"`
	Qci                  FlowQos_Qci `protobuf:"varint,5,opt,name=qci,proto3,enum=magma.lte.FlowQos_Qci" json:"qci,omitempty"`
	Arp                  *QosArp     `protobuf:"bytes,6,opt,name=arp,proto3" json:"arp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FlowQos) Reset()         { *m = FlowQos{} }
func (m *FlowQos) String() string { return proto.CompactTextString(m) }
func (*FlowQos) ProtoMessage()    {}
func (*FlowQos) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{5}
}
func (m *FlowQos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowQos.Unmarshal(m, b)
}
func (m *FlowQos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowQos.Marshal(b, m, deterministic)
}
func (dst *FlowQos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowQos.Merge(dst, src)
}
func (m *FlowQos) XXX_Size() int {
	return xxx_messageInfo_FlowQos.Size(m)
}
func (m *FlowQos) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowQos.DiscardUnknown(m)
}

var xxx_messageInfo_FlowQos proto.InternalMessageInfo

func (m *FlowQos) GetMaxReqBwUl() uint32 {
	if m != nil {
		return m.MaxReqBwUl
	}
	return 0
}

func (m *FlowQos) GetMaxReqBwDl() uint32 {
	if m != nil {
		return m.MaxReqBwDl
	}
	return 0
}

func (m *FlowQos) GetGbrUl() uint32 {
	if m != nil {
		return m.GbrUl
	}
	return 0
}

func (m *FlowQos) GetGbrDl() uint32 {
	if m != nil {
		return m.GbrDl
	}
	return 0
}

func (m *FlowQos) GetQci() FlowQos_Qci {
	if m != nil {
		return m.Qci
	}
	return FlowQos_QCI_0
}

func (m *FlowQos) GetArp() *QosArp {
	if m != nil {
		return m.Arp
	}
	return nil
}

type RedirectInformation struct {
	Support              RedirectInformation_Support     `protobuf:"varint,1,opt,name=support,proto3,enum=magma.lte.RedirectInformation_Support" json:"support,omitempty"`
	AddressType          RedirectInformation_AddressType `protobuf:"varint,2,opt,name=address_type,json=addressType,proto3,enum=magma.lte.RedirectInformation_AddressType" json:"address_type,omitempty"`
	ServerAddress        string                          `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *RedirectInformation) Reset()         { *m = RedirectInformation{} }
func (m *RedirectInformation) String() string { return proto.CompactTextString(m) }
func (*RedirectInformation) ProtoMessage()    {}
func (*RedirectInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{6}
}
func (m *RedirectInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedirectInformation.Unmarshal(m, b)
}
func (m *RedirectInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedirectInformation.Marshal(b, m, deterministic)
}
func (dst *RedirectInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirectInformation.Merge(dst, src)
}
func (m *RedirectInformation) XXX_Size() int {
	return xxx_messageInfo_RedirectInformation.Size(m)
}
func (m *RedirectInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirectInformation.DiscardUnknown(m)
}

var xxx_messageInfo_RedirectInformation proto.InternalMessageInfo

func (m *RedirectInformation) GetSupport() RedirectInformation_Support {
	if m != nil {
		return m.Support
	}
	return RedirectInformation_DISABLED
}

func (m *RedirectInformation) GetAddressType() RedirectInformation_AddressType {
	if m != nil {
		return m.AddressType
	}
	return RedirectInformation_IPv4
}

func (m *RedirectInformation) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

type ChargingRuleNameSet struct {
	RuleNames            []string `protobuf:"bytes,2,rep,name=RuleNames,proto3" json:"RuleNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChargingRuleNameSet) Reset()         { *m = ChargingRuleNameSet{} }
func (m *ChargingRuleNameSet) String() string { return proto.CompactTextString(m) }
func (*ChargingRuleNameSet) ProtoMessage()    {}
func (*ChargingRuleNameSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{7}
}
func (m *ChargingRuleNameSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChargingRuleNameSet.Unmarshal(m, b)
}
func (m *ChargingRuleNameSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChargingRuleNameSet.Marshal(b, m, deterministic)
}
func (dst *ChargingRuleNameSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargingRuleNameSet.Merge(dst, src)
}
func (m *ChargingRuleNameSet) XXX_Size() int {
	return xxx_messageInfo_ChargingRuleNameSet.Size(m)
}
func (m *ChargingRuleNameSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargingRuleNameSet.DiscardUnknown(m)
}

var xxx_messageInfo_ChargingRuleNameSet proto.InternalMessageInfo

func (m *ChargingRuleNameSet) GetRuleNames() []string {
	if m != nil {
		return m.RuleNames
	}
	return nil
}

type ChargingRuleBaseNameRecord struct {
	Name                 string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	RuleNamesSet         *ChargingRuleNameSet `protobuf:"bytes,2,opt,name=RuleNamesSet,proto3" json:"RuleNamesSet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ChargingRuleBaseNameRecord) Reset()         { *m = ChargingRuleBaseNameRecord{} }
func (m *ChargingRuleBaseNameRecord) String() string { return proto.CompactTextString(m) }
func (*ChargingRuleBaseNameRecord) ProtoMessage()    {}
func (*ChargingRuleBaseNameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_policydb_d4fd8b82a9e810f5, []int{8}
}
func (m *ChargingRuleBaseNameRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChargingRuleBaseNameRecord.Unmarshal(m, b)
}
func (m *ChargingRuleBaseNameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChargingRuleBaseNameRecord.Marshal(b, m, deterministic)
}
func (dst *ChargingRuleBaseNameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargingRuleBaseNameRecord.Merge(dst, src)
}
func (m *ChargingRuleBaseNameRecord) XXX_Size() int {
	return xxx_messageInfo_ChargingRuleBaseNameRecord.Size(m)
}
func (m *ChargingRuleBaseNameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargingRuleBaseNameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChargingRuleBaseNameRecord proto.InternalMessageInfo

func (m *ChargingRuleBaseNameRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChargingRuleBaseNameRecord) GetRuleNamesSet() *ChargingRuleNameSet {
	if m != nil {
		return m.RuleNamesSet
	}
	return nil
}

func init() {
	proto.RegisterType((*PolicyRule)(nil), "magma.lte.PolicyRule")
	proto.RegisterType((*ServiceIdentifier)(nil), "magma.lte.ServiceIdentifier")
	proto.RegisterType((*FlowDescription)(nil), "magma.lte.FlowDescription")
	proto.RegisterType((*FlowMatch)(nil), "magma.lte.FlowMatch")
	proto.RegisterType((*QosArp)(nil), "magma.lte.QosArp")
	proto.RegisterType((*FlowQos)(nil), "magma.lte.FlowQos")
	proto.RegisterType((*RedirectInformation)(nil), "magma.lte.RedirectInformation")
	proto.RegisterType((*ChargingRuleNameSet)(nil), "magma.lte.ChargingRuleNameSet")
	proto.RegisterType((*ChargingRuleBaseNameRecord)(nil), "magma.lte.ChargingRuleBaseNameRecord")
	proto.RegisterEnum("magma.lte.PolicyRule_TrackingType", PolicyRule_TrackingType_name, PolicyRule_TrackingType_value)
	proto.RegisterEnum("magma.lte.FlowDescription_Action", FlowDescription_Action_name, FlowDescription_Action_value)
	proto.RegisterEnum("magma.lte.FlowMatch_IPProto", FlowMatch_IPProto_name, FlowMatch_IPProto_value)
	proto.RegisterEnum("magma.lte.FlowMatch_Direction", FlowMatch_Direction_name, FlowMatch_Direction_value)
	proto.RegisterEnum("magma.lte.QosArp_PreCap", QosArp_PreCap_name, QosArp_PreCap_value)
	proto.RegisterEnum("magma.lte.QosArp_PreVul", QosArp_PreVul_name, QosArp_PreVul_value)
	proto.RegisterEnum("magma.lte.FlowQos_Qci", FlowQos_Qci_name, FlowQos_Qci_value)
	proto.RegisterEnum("magma.lte.RedirectInformation_Support", RedirectInformation_Support_name, RedirectInformation_Support_value)
	proto.RegisterEnum("magma.lte.RedirectInformation_AddressType", RedirectInformation_AddressType_name, RedirectInformation_AddressType_value)
}

func init() { proto.RegisterFile("lte/protos/policydb.proto", fileDescriptor_policydb_d4fd8b82a9e810f5) }

var fileDescriptor_policydb_d4fd8b82a9e810f5 = []byte{
	// 1328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x41, 0x6f, 0xdb, 0xc6,
	0x12, 0x36, 0x25, 0x5b, 0x12, 0x47, 0x92, 0xb3, 0xde, 0xe4, 0xbd, 0x47, 0xfb, 0x05, 0x81, 0xc3,
	0x97, 0x3c, 0xb8, 0x69, 0x21, 0xa7, 0x72, 0x62, 0x27, 0x69, 0x80, 0x56, 0x96, 0x64, 0x87, 0xb0,
	0x2d, 0xd1, 0x2b, 0xc9, 0x45, 0x7a, 0x21, 0x68, 0x72, 0xa3, 0x10, 0xa1, 0x44, 0x7a, 0x49, 0xc9,
	0xf1, 0xbd, 0xa7, 0xfe, 0x81, 0xf6, 0xda, 0x4b, 0x4f, 0x3d, 0xf7, 0xd2, 0x3f, 0x57, 0xec, 0x2e,
	0x49, 0x31, 0xb6, 0x9b, 0x9e, 0x34, 0xf3, 0xcd, 0xf7, 0xed, 0x8e, 0x86, 0x33, 0x1c, 0xc2, 0xba,
	0x1f, 0xd3, 0xed, 0x90, 0x05, 0x71, 0x10, 0x6d, 0x87, 0x81, 0xef, 0x39, 0x57, 0xee, 0x79, 0x43,
	0xf8, 0x58, 0x9d, 0xd8, 0xe3, 0x89, 0xdd, 0xf0, 0x63, 0xba, 0xb1, 0x1e, 0x30, 0xe7, 0x05, 0x4b,
	0x79, 0x4e, 0x30, 0x99, 0x04, 0x53, 0xc9, 0xd2, 0x7f, 0x5b, 0x06, 0x30, 0x85, 0x90, 0xcc, 0x7c,
	0x8a, 0x57, 0xa1, 0xe0, 0xb9, 0x9a, 0xb2, 0xa9, 0x6c, 0xa9, 0xa4, 0xe0, 0xb9, 0x78, 0x03, 0x2a,
	0x21, 0xf3, 0x02, 0xe6, 0xc5, 0x57, 0x5a, 0x71, 0x53, 0xd9, 0xaa, 0x93, 0xcc, 0xc7, 0x0f, 0xa1,
	0xc6, 0xec, 0xd8, 0x9b, 0x8e, 0xad, 0x31, 0x0b, 0x66, 0xa1, 0xb6, 0x2c, 0xe2, 0x55, 0x89, 0x1d,
	0x72, 0x08, 0x3f, 0x86, 0xd5, 0x49, 0x30, 0xf5, 0xe2, 0x80, 0x71, 0xda, 0x07, 0x7a, 0xa5, 0x95,
	0xc4, 0xd1, 0xf5, 0x05, 0x7a, 0x44, 0xaf, 0xf0, 0x2b, 0xa8, 0x30, 0xea, 0x7a, 0x8c, 0x3a, 0xb1,
	0xa6, 0x6e, 0x2a, 0x5b, 0xd5, 0xe6, 0x83, 0x46, 0x96, 0x7d, 0x83, 0x24, 0x21, 0x63, 0xfa, 0x2e,
	0x60, 0x13, 0x3b, 0xf6, 0x82, 0x29, 0xc9, 0xf8, 0x78, 0x0f, 0xd4, 0x77, 0x7e, 0x70, 0x69, 0xf9,
	0x5e, 0x14, 0x6b, 0xe5, 0xcd, 0xe2, 0x56, 0xb5, 0xb9, 0x91, 0x13, 0x1f, 0xf8, 0xc1, 0x65, 0x87,
	0x46, 0x0e, 0xf3, 0x42, 0x29, 0xe4, 0xe4, 0x63, 0x2f, 0x8a, 0xf1, 0x23, 0x28, 0x5e, 0x04, 0x91,
	0x56, 0x11, 0xf7, 0xe1, 0x6b, 0x92, 0xd3, 0x20, 0x22, 0x3c, 0x8c, 0x0f, 0xa1, 0x1e, 0x33, 0xdb,
	0xf9, 0xc0, 0xf3, 0x8f, 0xaf, 0x42, 0xaa, 0xc1, 0xa6, 0xb2, 0xb5, 0xda, 0xd4, 0x73, 0xfc, 0x45,
	0xf9, 0x1a, 0xc3, 0x84, 0x3a, 0xbc, 0x0a, 0x29, 0xa9, 0xc5, 0x39, 0x8f, 0x57, 0xeb, 0xbd, 0xcd,
	0x5c, 0x2b, 0xf6, 0x26, 0x34, 0x98, 0xc5, 0x5a, 0x55, 0x56, 0x8b, 0x63, 0x43, 0x09, 0xe1, 0x23,
	0xc0, 0x11, 0x65, 0x73, 0xcf, 0xa1, 0x96, 0xe7, 0xd2, 0x69, 0xec, 0xbd, 0xf3, 0x28, 0xd3, 0x6a,
	0x22, 0xc1, 0xfb, 0xb9, 0x0b, 0x07, 0x92, 0x64, 0x64, 0x1c, 0xb2, 0x16, 0x5d, 0x87, 0xf4, 0x1e,
	0xd4, 0xf2, 0xd9, 0xe0, 0x1a, 0x54, 0xfa, 0xbd, 0xe3, 0xb7, 0x56, 0xbf, 0x3d, 0x40, 0x4b, 0xb8,
	0x0e, 0xaa, 0xf0, 0xcc, 0x36, 0x39, 0x40, 0x0a, 0x46, 0x50, 0xeb, 0xb7, 0x07, 0x56, 0xab, 0xd7,
	0x91, 0x48, 0x01, 0xdf, 0x81, 0x6a, 0xaf, 0x6f, 0x0d, 0x49, 0xab, 0x7d, 0x64, 0xf4, 0x0e, 0x51,
	0x51, 0xff, 0x02, 0xd6, 0x6e, 0xdc, 0x8b, 0xef, 0xc1, 0xca, 0xdc, 0xf6, 0x67, 0x54, 0x74, 0x4c,
	0x9d, 0x48, 0x47, 0xff, 0x45, 0x81, 0x3b, 0xd7, 0xea, 0x8e, 0x9f, 0xc0, 0xca, 0xc4, 0x8e, 0x9d,
	0xf7, 0x82, 0x59, 0x6d, 0xde, 0xbb, 0x56, 0xef, 0x13, 0x1e, 0x23, 0x92, 0x82, 0x5f, 0x42, 0xc9,
	0x76, 0xb8, 0x4a, 0x2b, 0x88, 0x62, 0x3f, 0xfc, 0xfb, 0xe7, 0xd9, 0x68, 0x09, 0x22, 0x49, 0x04,
	0xfa, 0x03, 0x28, 0x49, 0x04, 0x03, 0x94, 0xcc, 0x2e, 0x39, 0x31, 0x86, 0x68, 0x09, 0x57, 0x60,
	0xb9, 0xd3, 0xed, 0xbd, 0x45, 0x8a, 0xfe, 0xf3, 0x0a, 0xa8, 0xd9, 0x7d, 0x78, 0x1d, 0x2a, 0x5e,
	0x38, 0x7f, 0x66, 0x45, 0xcc, 0x49, 0x7a, 0xbe, 0xcc, 0xfd, 0x01, 0x73, 0xb2, 0x90, 0x1b, 0xc5,
	0x22, 0x8b, 0x24, 0xd4, 0x89, 0x62, 0xfc, 0x1f, 0x28, 0xc7, 0x4e, 0x28, 0x44, 0x72, 0x24, 0x4a,
	0xb1, 0x13, 0x72, 0x4d, 0x12, 0xe0, 0x92, 0xe5, 0x2c, 0x90, 0x28, 0x66, 0xae, 0x54, 0xac, 0xc8,
	0xc0, 0xcc, 0x4d, 0x15, 0x3c, 0xc0, 0x15, 0xa5, 0x2c, 0xc0, 0x15, 0x7b, 0xfc, 0x7a, 0x4b, 0x8c,
	0xa8, 0x56, 0x16, 0x45, 0xb8, 0x7f, 0x5b, 0xc5, 0x1a, 0x86, 0x69, 0x72, 0x0e, 0x4f, 0x4e, 0x18,
	0xf8, 0x35, 0xa8, 0x72, 0x30, 0x78, 0xf9, 0x2a, 0x42, 0xf9, 0xe0, 0x56, 0x65, 0x27, 0x65, 0x91,
	0x85, 0x80, 0xff, 0x6b, 0x3b, 0x0c, 0xad, 0xa9, 0x3d, 0xa1, 0x62, 0x10, 0x55, 0x52, 0xb6, 0xc3,
	0xb0, 0x67, 0x4f, 0xa8, 0xfe, 0x47, 0x01, 0xca, 0xc9, 0x6d, 0x78, 0x15, 0xc0, 0x30, 0x4d, 0xd2,
	0x1f, 0xf6, 0x2d, 0xc3, 0x44, 0x4b, 0xf8, 0x2e, 0xdc, 0x49, 0xfd, 0x37, 0x7d, 0xb3, 0x6f, 0x0e,
	0x79, 0x8b, 0x21, 0xa8, 0x65, 0xa4, 0xf6, 0x89, 0x29, 0xbb, 0x2c, 0x43, 0x0e, 0x4f, 0x4c, 0xd9,
	0x65, 0x29, 0x32, 0x6c, 0x9b, 0xa8, 0x94, 0x07, 0x46, 0x1d, 0x13, 0xad, 0xe5, 0x8f, 0x26, 0xfd,
	0xd1, 0x90, 0xf7, 0xe2, 0x97, 0xf8, 0x1e, 0xa0, 0x14, 0x3c, 0x20, 0xad, 0xc3, 0x93, 0x6e, 0x6f,
	0x88, 0xbe, 0xca, 0x6b, 0x0f, 0x49, 0x17, 0x6d, 0xe7, 0xd3, 0x6c, 0xbd, 0x41, 0x3b, 0x18, 0xc3,
	0x6a, 0x3e, 0xa3, 0xb3, 0x5d, 0xf4, 0x2a, 0x9f, 0x53, 0xaf, 0xdf, 0xeb, 0xa2, 0x6f, 0xf2, 0x37,
	0x76, 0x06, 0x43, 0xf1, 0x67, 0x5e, 0xe7, 0x69, 0xfd, 0x81, 0x79, 0x80, 0xde, 0xe6, 0x91, 0x33,
	0x42, 0x4c, 0x14, 0xe2, 0xb5, 0x05, 0x32, 0x68, 0x0f, 0x4d, 0xf4, 0xa3, 0xb2, 0x51, 0x40, 0x8a,
	0xfe, 0x18, 0xd4, 0xac, 0xd6, 0xbc, 0x2b, 0x47, 0xe6, 0xb1, 0xd1, 0x3b, 0x42, 0x4b, 0x7c, 0x22,
	0x3b, 0xfd, 0xef, 0x7b, 0xc2, 0x53, 0xf4, 0x5f, 0x0b, 0x50, 0x3a, 0x0d, 0xa2, 0x16, 0x13, 0x6f,
	0xcd, 0xf4, 0x25, 0x6b, 0xf9, 0x74, 0x4e, 0xfd, 0x64, 0xbc, 0xea, 0x29, 0x7a, 0xcc, 0x41, 0xfc,
	0x2d, 0xa7, 0x51, 0xcb, 0xb1, 0x43, 0xfb, 0xdc, 0xf3, 0xf9, 0x1b, 0x5a, 0x8e, 0x8b, 0x96, 0x7b,
	0xde, 0xf2, 0xc4, 0x86, 0xc9, 0x68, 0xdb, 0x0e, 0xf9, 0x01, 0xfc, 0x37, 0xa1, 0xe3, 0x2e, 0xac,
	0xf1, 0x03, 0xe6, 0x33, 0x7f, 0x4a, 0x59, 0x7a, 0x46, 0xf1, 0x33, 0x67, 0x9c, 0xcd, 0x7c, 0x82,
	0x42, 0xf1, 0xbb, 0x50, 0xe8, 0x3b, 0x50, 0x92, 0xe7, 0xf3, 0xd2, 0x99, 0xa4, 0x6b, 0xb5, 0x5b,
	0xa6, 0xd5, 0xed, 0xb5, 0xf6, 0x8f, 0xbb, 0x1d, 0xb4, 0xc4, 0x1f, 0x56, 0x0a, 0x76, 0x8c, 0x81,
	0x44, 0x95, 0x44, 0x74, 0x36, 0xf3, 0x53, 0xd1, 0xd9, 0xe8, 0xf8, 0xa6, 0x88, 0x83, 0x39, 0xd1,
	0x4f, 0x45, 0x28, 0x27, 0x6f, 0x67, 0xfc, 0x10, 0xea, 0x13, 0xfb, 0xa3, 0xc5, 0xe8, 0x85, 0x75,
	0x7e, 0x69, 0xcd, 0xd2, 0x1a, 0xc1, 0xc4, 0xfe, 0x48, 0xe8, 0xc5, 0xfe, 0xe5, 0xc8, 0xbf, 0x46,
	0x71, 0x7d, 0x51, 0x9f, 0x1c, 0xa5, 0xe3, 0xe3, 0x7f, 0x41, 0x69, 0x7c, 0xce, 0xb8, 0x5c, 0x8e,
	0xf2, 0xca, 0xf8, 0x9c, 0x8d, 0x32, 0xd8, 0xf5, 0x93, 0x41, 0xe6, 0x70, 0xc7, 0xc7, 0x5b, 0x50,
	0xbc, 0x70, 0x3c, 0x31, 0xc3, 0xab, 0xcd, 0x7f, 0xdf, 0x5c, 0x19, 0x8d, 0x53, 0xc7, 0x23, 0x9c,
	0x82, 0xff, 0x07, 0x45, 0x9b, 0x85, 0x62, 0xa8, 0xab, 0xcd, 0xb5, 0x1b, 0xc5, 0x24, 0x3c, 0xaa,
	0xff, 0xa9, 0x40, 0xf1, 0xd4, 0xf1, 0xb0, 0x0a, 0x2b, 0xa7, 0x6d, 0xc3, 0x7a, 0x8a, 0x96, 0x52,
	0xf3, 0x6b, 0xa4, 0xa4, 0x66, 0x13, 0x15, 0x52, 0x73, 0x07, 0x15, 0x53, 0xf3, 0x19, 0x5a, 0x4e,
	0xcd, 0xe7, 0x68, 0x25, 0x35, 0x77, 0x51, 0x29, 0x35, 0xf7, 0x50, 0x39, 0x35, 0x5f, 0xa0, 0x4a,
	0x6a, 0xbe, 0x44, 0x2a, 0x6f, 0x41, 0xc1, 0x7d, 0x8e, 0x5a, 0x99, 0xbd, 0x8b, 0xf6, 0x33, 0x7b,
	0x0f, 0xb5, 0x53, 0x7b, 0xef, 0x29, 0x3a, 0xc8, 0xec, 0xe7, 0xe8, 0x28, 0xb3, 0x5f, 0xa2, 0xbe,
	0xfe, 0x7b, 0x01, 0xee, 0xde, 0xb2, 0x9a, 0xf1, 0x77, 0x50, 0x8e, 0x66, 0x61, 0x18, 0xb0, 0x58,
	0x3c, 0x92, 0xd5, 0xe6, 0xff, 0x3f, 0xbf, 0xcb, 0x1b, 0x03, 0xc9, 0x26, 0xa9, 0x0c, 0x9f, 0x40,
	0xcd, 0x76, 0x5d, 0x46, 0xa3, 0x48, 0xae, 0x5c, 0xd9, 0xd6, 0x4f, 0xfe, 0xe1, 0x98, 0x96, 0x94,
	0x88, 0xd5, 0x5b, 0xb5, 0x17, 0x0e, 0x1f, 0x27, 0xbe, 0x1e, 0x29, 0xb3, 0x12, 0x54, 0x3c, 0x6b,
	0x95, 0xd4, 0x25, 0x9a, 0xe8, 0xf4, 0x47, 0x50, 0x4e, 0x32, 0x11, 0x93, 0x99, 0x76, 0xdd, 0x12,
	0xae, 0x42, 0x39, 0x6d, 0x4c, 0x45, 0xdf, 0x83, 0x6a, 0xee, 0x22, 0xbe, 0x59, 0x0c, 0x73, 0xfe,
	0x4c, 0xee, 0x18, 0xc3, 0x9c, 0xef, 0x22, 0x05, 0x97, 0xa1, 0x38, 0x22, 0xc7, 0xa8, 0xc0, 0x85,
	0x03, 0xc3, 0xb4, 0x46, 0xc4, 0x40, 0x45, 0x7d, 0x07, 0xee, 0xb6, 0xdf, 0xdb, 0x6c, 0xec, 0x4d,
	0xc7, 0xfc, 0x53, 0x81, 0xbf, 0x53, 0x07, 0x34, 0xc6, 0xf7, 0x41, 0x4d, 0xdd, 0x48, 0x2b, 0x6c,
	0x16, 0xb7, 0x54, 0xb2, 0x00, 0xf4, 0x18, 0x36, 0xf2, 0xa2, 0x7d, 0x3b, 0x12, 0x01, 0x42, 0x9d,
	0x80, 0xb9, 0x18, 0xc3, 0x32, 0xf7, 0x92, 0xd5, 0x25, 0x6c, 0xbc, 0x0f, 0xb5, 0x4c, 0x3e, 0xa0,
	0x72, 0x77, 0x7d, 0xfa, 0x39, 0x75, 0x4b, 0x16, 0xe4, 0x13, 0xcd, 0xfe, 0x7f, 0x7f, 0x58, 0x17,
	0xf4, 0x6d, 0xfe, 0x71, 0xe9, 0xf8, 0xc1, 0xcc, 0xdd, 0x1e, 0x07, 0xc9, 0xd7, 0xe3, 0x79, 0x49,
	0xfc, 0xee, 0xfc, 0x15, 0x00, 0x00, 0xff, 0xff, 0xda, 0x4f, 0x41, 0x67, 0x7a, 0x0a, 0x00, 0x00,
}
