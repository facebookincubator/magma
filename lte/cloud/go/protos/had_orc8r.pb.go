// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lte/protos/had_orc8r.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetEnodebOffloadStateResponse_EnodebOffloadState int32

const (
	GetEnodebOffloadStateResponse_NO_OP                             GetEnodebOffloadStateResponse_EnodebOffloadState = 0
	GetEnodebOffloadStateResponse_PRIMARY_CONNECTED                 GetEnodebOffloadStateResponse_EnodebOffloadState = 1
	GetEnodebOffloadStateResponse_PRIMARY_CONNECTED_AND_SERVING_UES GetEnodebOffloadStateResponse_EnodebOffloadState = 2
)

var GetEnodebOffloadStateResponse_EnodebOffloadState_name = map[int32]string{
	0: "NO_OP",
	1: "PRIMARY_CONNECTED",
	2: "PRIMARY_CONNECTED_AND_SERVING_UES",
}

var GetEnodebOffloadStateResponse_EnodebOffloadState_value = map[string]int32{
	"NO_OP":                             0,
	"PRIMARY_CONNECTED":                 1,
	"PRIMARY_CONNECTED_AND_SERVING_UES": 2,
}

func (x GetEnodebOffloadStateResponse_EnodebOffloadState) String() string {
	return proto.EnumName(GetEnodebOffloadStateResponse_EnodebOffloadState_name, int32(x))
}

func (GetEnodebOffloadStateResponse_EnodebOffloadState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b4cc90157bd02bee, []int{1, 0}
}

type GetEnodebOffloadStateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEnodebOffloadStateRequest) Reset()         { *m = GetEnodebOffloadStateRequest{} }
func (m *GetEnodebOffloadStateRequest) String() string { return proto.CompactTextString(m) }
func (*GetEnodebOffloadStateRequest) ProtoMessage()    {}
func (*GetEnodebOffloadStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4cc90157bd02bee, []int{0}
}

func (m *GetEnodebOffloadStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEnodebOffloadStateRequest.Unmarshal(m, b)
}
func (m *GetEnodebOffloadStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEnodebOffloadStateRequest.Marshal(b, m, deterministic)
}
func (m *GetEnodebOffloadStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEnodebOffloadStateRequest.Merge(m, src)
}
func (m *GetEnodebOffloadStateRequest) XXX_Size() int {
	return xxx_messageInfo_GetEnodebOffloadStateRequest.Size(m)
}
func (m *GetEnodebOffloadStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEnodebOffloadStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEnodebOffloadStateRequest proto.InternalMessageInfo

type GetEnodebOffloadStateResponse struct {
	// Map from ENB ID to offload state
	EnodebOffloadStates  map[uint32]GetEnodebOffloadStateResponse_EnodebOffloadState `protobuf:"bytes,1,rep,name=enodeb_offload_states,json=enodebOffloadStates,proto3" json:"enodeb_offload_states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=magma.lte.GetEnodebOffloadStateResponse_EnodebOffloadState"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *GetEnodebOffloadStateResponse) Reset()         { *m = GetEnodebOffloadStateResponse{} }
func (m *GetEnodebOffloadStateResponse) String() string { return proto.CompactTextString(m) }
func (*GetEnodebOffloadStateResponse) ProtoMessage()    {}
func (*GetEnodebOffloadStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4cc90157bd02bee, []int{1}
}

func (m *GetEnodebOffloadStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEnodebOffloadStateResponse.Unmarshal(m, b)
}
func (m *GetEnodebOffloadStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEnodebOffloadStateResponse.Marshal(b, m, deterministic)
}
func (m *GetEnodebOffloadStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEnodebOffloadStateResponse.Merge(m, src)
}
func (m *GetEnodebOffloadStateResponse) XXX_Size() int {
	return xxx_messageInfo_GetEnodebOffloadStateResponse.Size(m)
}
func (m *GetEnodebOffloadStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEnodebOffloadStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEnodebOffloadStateResponse proto.InternalMessageInfo

func (m *GetEnodebOffloadStateResponse) GetEnodebOffloadStates() map[uint32]GetEnodebOffloadStateResponse_EnodebOffloadState {
	if m != nil {
		return m.EnodebOffloadStates
	}
	return nil
}

func init() {
	proto.RegisterEnum("magma.lte.GetEnodebOffloadStateResponse_EnodebOffloadState", GetEnodebOffloadStateResponse_EnodebOffloadState_name, GetEnodebOffloadStateResponse_EnodebOffloadState_value)
	proto.RegisterType((*GetEnodebOffloadStateRequest)(nil), "magma.lte.GetEnodebOffloadStateRequest")
	proto.RegisterType((*GetEnodebOffloadStateResponse)(nil), "magma.lte.GetEnodebOffloadStateResponse")
	proto.RegisterMapType((map[uint32]GetEnodebOffloadStateResponse_EnodebOffloadState)(nil), "magma.lte.GetEnodebOffloadStateResponse.EnodebOffloadStatesEntry")
}

func init() { proto.RegisterFile("lte/protos/had_orc8r.proto", fileDescriptor_b4cc90157bd02bee) }

var fileDescriptor_b4cc90157bd02bee = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0x29, 0x49, 0xd5,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x2f, 0xd6, 0xcf, 0x48, 0x4c, 0x89, 0xcf, 0x2f, 0x4a, 0xb6, 0x28,
	0xd2, 0x03, 0x0b, 0x08, 0x71, 0xe6, 0x26, 0xa6, 0xe7, 0x26, 0xea, 0xe5, 0x94, 0xa4, 0x2a, 0xc9,
	0x71, 0xc9, 0xb8, 0xa7, 0x96, 0xb8, 0xe6, 0xe5, 0xa7, 0xa4, 0x26, 0xf9, 0xa7, 0xa5, 0xe5, 0xe4,
	0x27, 0xa6, 0x04, 0x97, 0x24, 0x96, 0xa4, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0xfd,
	0x66, 0xe2, 0x92, 0xc5, 0xa1, 0xa0, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0xa8, 0x94, 0x4b, 0x34,
	0x15, 0x2c, 0x1b, 0x9f, 0x0f, 0x91, 0x8e, 0x2f, 0x06, 0xc9, 0x17, 0x4b, 0x30, 0x2a, 0x30, 0x6b,
	0x70, 0x1b, 0x39, 0xea, 0xc1, 0x2d, 0xd3, 0xc3, 0x6b, 0x90, 0x1e, 0xa6, 0x54, 0xb1, 0x6b, 0x5e,
	0x49, 0x51, 0x65, 0x90, 0x70, 0x2a, 0xa6, 0x8c, 0x54, 0x33, 0x23, 0x97, 0x04, 0x2e, 0x1d, 0x42,
	0x02, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0x20, 0xa6, 0x50,
	0x20, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0x35,
	0x05, 0xae, 0x0a, 0x82, 0x98, 0x64, 0xc5, 0x64, 0xc1, 0xa8, 0x14, 0xcb, 0x25, 0x84, 0xa9, 0x40,
	0x88, 0x93, 0x8b, 0xd5, 0xcf, 0x3f, 0xde, 0x3f, 0x40, 0x80, 0x41, 0x48, 0x94, 0x4b, 0x30, 0x20,
	0xc8, 0xd3, 0xd7, 0x31, 0x28, 0x32, 0xde, 0xd9, 0xdf, 0xcf, 0xcf, 0xd5, 0x39, 0xc4, 0xd5, 0x45,
	0x80, 0x51, 0x48, 0x95, 0x4b, 0x11, 0x43, 0x38, 0xde, 0xd1, 0xcf, 0x25, 0x3e, 0xd8, 0x35, 0x28,
	0xcc, 0xd3, 0xcf, 0x3d, 0x3e, 0xd4, 0x35, 0x58, 0x80, 0xc9, 0xa8, 0x98, 0x8b, 0xd9, 0x23, 0xd1,
	0x45, 0x28, 0x87, 0x4b, 0x14, 0xab, 0x23, 0x85, 0xd4, 0x09, 0x7b, 0x03, 0x1c, 0x8d, 0x52, 0x1a,
	0xc4, 0xfa, 0x57, 0x89, 0xc1, 0x49, 0x3a, 0x4a, 0x12, 0xac, 0x58, 0x1f, 0x94, 0x82, 0x92, 0x73,
	0xf2, 0x4b, 0x53, 0xf4, 0xd3, 0xf3, 0xa1, 0x49, 0x29, 0x89, 0x0d, 0x4c, 0x1b, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xfe, 0x0f, 0x14, 0x7e, 0x5f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HaDClient is the client API for HaD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HaDClient interface {
	// Fetch all ENB state for ENBs served within the pools of the calling AGW
	GetEnodebOffloadState(ctx context.Context, in *GetEnodebOffloadStateRequest, opts ...grpc.CallOption) (*GetEnodebOffloadStateResponse, error)
}

type haDClient struct {
	cc grpc.ClientConnInterface
}

func NewHaDClient(cc grpc.ClientConnInterface) HaDClient {
	return &haDClient{cc}
}

func (c *haDClient) GetEnodebOffloadState(ctx context.Context, in *GetEnodebOffloadStateRequest, opts ...grpc.CallOption) (*GetEnodebOffloadStateResponse, error) {
	out := new(GetEnodebOffloadStateResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.HaD/GetEnodebOffloadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HaDServer is the server API for HaD service.
type HaDServer interface {
	// Fetch all ENB state for ENBs served within the pools of the calling AGW
	GetEnodebOffloadState(context.Context, *GetEnodebOffloadStateRequest) (*GetEnodebOffloadStateResponse, error)
}

// UnimplementedHaDServer can be embedded to have forward compatible implementations.
type UnimplementedHaDServer struct {
}

func (*UnimplementedHaDServer) GetEnodebOffloadState(ctx context.Context, req *GetEnodebOffloadStateRequest) (*GetEnodebOffloadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnodebOffloadState not implemented")
}

func RegisterHaDServer(s *grpc.Server, srv HaDServer) {
	s.RegisterService(&_HaD_serviceDesc, srv)
}

func _HaD_GetEnodebOffloadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnodebOffloadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaDServer).GetEnodebOffloadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.HaD/GetEnodebOffloadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaDServer).GetEnodebOffloadState(ctx, req.(*GetEnodebOffloadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HaD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.HaD",
	HandlerType: (*HaDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnodebOffloadState",
			Handler:    _HaD_GetEnodebOffloadState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/had_orc8r.proto",
}
