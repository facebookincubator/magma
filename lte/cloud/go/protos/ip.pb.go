// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lte/protos/ip.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IPAddress_IPVersion int32

const (
	IPAddress_IPV4 IPAddress_IPVersion = 0
	IPAddress_IPV6 IPAddress_IPVersion = 1
)

var IPAddress_IPVersion_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}

var IPAddress_IPVersion_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x IPAddress_IPVersion) String() string {
	return proto.EnumName(IPAddress_IPVersion_name, int32(x))
}

func (IPAddress_IPVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_88c3bc9b739a8312, []int{0, 0}
}

type IPBlock_IPVersion int32

const (
	IPBlock_IPV4 IPBlock_IPVersion = 0
	IPBlock_IPV6 IPBlock_IPVersion = 1
)

var IPBlock_IPVersion_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}

var IPBlock_IPVersion_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x IPBlock_IPVersion) String() string {
	return proto.EnumName(IPBlock_IPVersion_name, int32(x))
}

func (IPBlock_IPVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_88c3bc9b739a8312, []int{1, 0}
}

// --------------------------------------------------------------------------
// IP Address definition. A generic type for both IPv4 and IPv6 addresses.
// --------------------------------------------------------------------------
type IPAddress struct {
	Version              IPAddress_IPVersion `protobuf:"varint,1,opt,name=version,proto3,enum=magma.lte.IPAddress_IPVersion" json:"version,omitempty"`
	Address              []byte              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *IPAddress) Reset()         { *m = IPAddress{} }
func (m *IPAddress) String() string { return proto.CompactTextString(m) }
func (*IPAddress) ProtoMessage()    {}
func (*IPAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_88c3bc9b739a8312, []int{0}
}

func (m *IPAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPAddress.Unmarshal(m, b)
}
func (m *IPAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPAddress.Marshal(b, m, deterministic)
}
func (m *IPAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAddress.Merge(m, src)
}
func (m *IPAddress) XXX_Size() int {
	return xxx_messageInfo_IPAddress.Size(m)
}
func (m *IPAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAddress.DiscardUnknown(m)
}

var xxx_messageInfo_IPAddress proto.InternalMessageInfo

func (m *IPAddress) GetVersion() IPAddress_IPVersion {
	if m != nil {
		return m.Version
	}
	return IPAddress_IPV4
}

func (m *IPAddress) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// --------------------------------------------------------------------------
// IP Block definition.
//
// An IP block is a range of IP addresses specified by a network address and
// a prefix-length of the netmask. For example,
//    IPv4 IP block:      192.168.0.0/24
//    IPv6 IP block:      2401:db00:1116:301b::/64
// --------------------------------------------------------------------------
type IPBlock struct {
	Version              IPBlock_IPVersion `protobuf:"varint,1,opt,name=version,proto3,enum=magma.lte.IPBlock_IPVersion" json:"version,omitempty"`
	NetAddress           []byte            `protobuf:"bytes,2,opt,name=net_address,json=netAddress,proto3" json:"net_address,omitempty"`
	PrefixLen            uint32            `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IPBlock) Reset()         { *m = IPBlock{} }
func (m *IPBlock) String() string { return proto.CompactTextString(m) }
func (*IPBlock) ProtoMessage()    {}
func (*IPBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_88c3bc9b739a8312, []int{1}
}

func (m *IPBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPBlock.Unmarshal(m, b)
}
func (m *IPBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPBlock.Marshal(b, m, deterministic)
}
func (m *IPBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPBlock.Merge(m, src)
}
func (m *IPBlock) XXX_Size() int {
	return xxx_messageInfo_IPBlock.Size(m)
}
func (m *IPBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_IPBlock.DiscardUnknown(m)
}

var xxx_messageInfo_IPBlock proto.InternalMessageInfo

func (m *IPBlock) GetVersion() IPBlock_IPVersion {
	if m != nil {
		return m.Version
	}
	return IPBlock_IPV4
}

func (m *IPBlock) GetNetAddress() []byte {
	if m != nil {
		return m.NetAddress
	}
	return nil
}

func (m *IPBlock) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func init() {
	proto.RegisterEnum("magma.lte.IPAddress_IPVersion", IPAddress_IPVersion_name, IPAddress_IPVersion_value)
	proto.RegisterEnum("magma.lte.IPBlock_IPVersion", IPBlock_IPVersion_name, IPBlock_IPVersion_value)
	proto.RegisterType((*IPAddress)(nil), "magma.lte.IPAddress")
	proto.RegisterType((*IPBlock)(nil), "magma.lte.IPBlock")
}

func init() { proto.RegisterFile("lte/protos/ip.proto", fileDescriptor_88c3bc9b739a8312) }

var fileDescriptor_88c3bc9b739a8312 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0x29, 0x49, 0xd5,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x2f, 0xd6, 0xcf, 0x2c, 0xd0, 0x03, 0xb3, 0x84, 0x38, 0x73, 0x13,
	0xd3, 0x73, 0x13, 0xf5, 0x72, 0x4a, 0x52, 0x95, 0x1a, 0x18, 0xb9, 0x38, 0x3d, 0x03, 0x1c, 0x53,
	0x52, 0x8a, 0x52, 0x8b, 0x8b, 0x85, 0x2c, 0xb8, 0xd8, 0xcb, 0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3,
	0x24, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0xe4, 0xf4, 0xe0, 0x4a, 0xf5, 0xe0, 0xca, 0xf4, 0x3c,
	0x03, 0xc2, 0x20, 0xaa, 0x82, 0x60, 0xca, 0x85, 0x24, 0xb8, 0xd8, 0x13, 0x21, 0xb2, 0x12, 0x4c,
	0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x30, 0xae, 0x92, 0x3c, 0xc8, 0x02, 0xa8, 0x7a, 0x21, 0x0e, 0x2e,
	0x16, 0xcf, 0x80, 0x30, 0x13, 0x01, 0x06, 0x28, 0xcb, 0x4c, 0x80, 0x51, 0x69, 0x11, 0x23, 0x17,
	0xbb, 0x67, 0x80, 0x53, 0x4e, 0x7e, 0x72, 0xb6, 0x90, 0x19, 0xba, 0x03, 0x64, 0x50, 0x1c, 0x00,
	0x56, 0x84, 0xcd, 0x7a, 0x79, 0x2e, 0xee, 0xbc, 0xd4, 0x92, 0x78, 0x54, 0x27, 0x70, 0xe5, 0xa5,
	0x96, 0xc0, 0x7c, 0x26, 0xcb, 0xc5, 0x55, 0x50, 0x94, 0x9a, 0x96, 0x59, 0x11, 0x9f, 0x93, 0x9a,
	0x27, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1b, 0xc4, 0x09, 0x11, 0xf1, 0x49, 0xcd, 0x23, 0xe8, 0x48,
	0x27, 0xe9, 0x28, 0x49, 0xb0, 0x43, 0xf4, 0x41, 0xe1, 0x99, 0x9c, 0x93, 0x5f, 0x9a, 0xa2, 0x9f,
	0x9e, 0x0f, 0x0d, 0xd8, 0x24, 0x36, 0x30, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xf7,
	0x16, 0x66, 0x6d, 0x01, 0x00, 0x00,
}
