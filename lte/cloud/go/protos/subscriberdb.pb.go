//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: lte/protos/subscriberdb.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// For details about values read 3GPP 24.302
type AccessNetworkIdentifier int32

const (
	AccessNetworkIdentifier_HRPD     AccessNetworkIdentifier = 0
	AccessNetworkIdentifier_WIMAX    AccessNetworkIdentifier = 1
	AccessNetworkIdentifier_WLAN     AccessNetworkIdentifier = 2
	AccessNetworkIdentifier_ETHERNET AccessNetworkIdentifier = 3
)

// Enum value maps for AccessNetworkIdentifier.
var (
	AccessNetworkIdentifier_name = map[int32]string{
		0: "HRPD",
		1: "WIMAX",
		2: "WLAN",
		3: "ETHERNET",
	}
	AccessNetworkIdentifier_value = map[string]int32{
		"HRPD":     0,
		"WIMAX":    1,
		"WLAN":     2,
		"ETHERNET": 3,
	}
)

func (x AccessNetworkIdentifier) Enum() *AccessNetworkIdentifier {
	p := new(AccessNetworkIdentifier)
	*p = x
	return p
}

func (x AccessNetworkIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessNetworkIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[0].Descriptor()
}

func (AccessNetworkIdentifier) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[0]
}

func (x AccessNetworkIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessNetworkIdentifier.Descriptor instead.
func (AccessNetworkIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{0}
}

type SubscriberID_IDType int32

const (
	SubscriberID_IMSI SubscriberID_IDType = 0
)

// Enum value maps for SubscriberID_IDType.
var (
	SubscriberID_IDType_name = map[int32]string{
		0: "IMSI",
	}
	SubscriberID_IDType_value = map[string]int32{
		"IMSI": 0,
	}
)

func (x SubscriberID_IDType) Enum() *SubscriberID_IDType {
	p := new(SubscriberID_IDType)
	*p = x
	return p
}

func (x SubscriberID_IDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriberID_IDType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[1].Descriptor()
}

func (SubscriberID_IDType) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[1]
}

func (x SubscriberID_IDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriberID_IDType.Descriptor instead.
func (SubscriberID_IDType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{0, 0}
}

type GSMSubscription_GSMSubscriptionState int32

const (
	GSMSubscription_INACTIVE GSMSubscription_GSMSubscriptionState = 0
	GSMSubscription_ACTIVE   GSMSubscription_GSMSubscriptionState = 1
)

// Enum value maps for GSMSubscription_GSMSubscriptionState.
var (
	GSMSubscription_GSMSubscriptionState_name = map[int32]string{
		0: "INACTIVE",
		1: "ACTIVE",
	}
	GSMSubscription_GSMSubscriptionState_value = map[string]int32{
		"INACTIVE": 0,
		"ACTIVE":   1,
	}
)

func (x GSMSubscription_GSMSubscriptionState) Enum() *GSMSubscription_GSMSubscriptionState {
	p := new(GSMSubscription_GSMSubscriptionState)
	*p = x
	return p
}

func (x GSMSubscription_GSMSubscriptionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GSMSubscription_GSMSubscriptionState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[2].Descriptor()
}

func (GSMSubscription_GSMSubscriptionState) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[2]
}

func (x GSMSubscription_GSMSubscriptionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GSMSubscription_GSMSubscriptionState.Descriptor instead.
func (GSMSubscription_GSMSubscriptionState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{2, 0}
}

type GSMSubscription_GSMAuthAlgo int32

const (
	GSMSubscription_PRECOMPUTED_AUTH_TUPLES GSMSubscription_GSMAuthAlgo = 0 // default
)

// Enum value maps for GSMSubscription_GSMAuthAlgo.
var (
	GSMSubscription_GSMAuthAlgo_name = map[int32]string{
		0: "PRECOMPUTED_AUTH_TUPLES",
	}
	GSMSubscription_GSMAuthAlgo_value = map[string]int32{
		"PRECOMPUTED_AUTH_TUPLES": 0,
	}
)

func (x GSMSubscription_GSMAuthAlgo) Enum() *GSMSubscription_GSMAuthAlgo {
	p := new(GSMSubscription_GSMAuthAlgo)
	*p = x
	return p
}

func (x GSMSubscription_GSMAuthAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GSMSubscription_GSMAuthAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[3].Descriptor()
}

func (GSMSubscription_GSMAuthAlgo) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[3]
}

func (x GSMSubscription_GSMAuthAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GSMSubscription_GSMAuthAlgo.Descriptor instead.
func (GSMSubscription_GSMAuthAlgo) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{2, 1}
}

type LTESubscription_LTESubscriptionState int32

const (
	LTESubscription_INACTIVE LTESubscription_LTESubscriptionState = 0
	LTESubscription_ACTIVE   LTESubscription_LTESubscriptionState = 1
)

// Enum value maps for LTESubscription_LTESubscriptionState.
var (
	LTESubscription_LTESubscriptionState_name = map[int32]string{
		0: "INACTIVE",
		1: "ACTIVE",
	}
	LTESubscription_LTESubscriptionState_value = map[string]int32{
		"INACTIVE": 0,
		"ACTIVE":   1,
	}
)

func (x LTESubscription_LTESubscriptionState) Enum() *LTESubscription_LTESubscriptionState {
	p := new(LTESubscription_LTESubscriptionState)
	*p = x
	return p
}

func (x LTESubscription_LTESubscriptionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LTESubscription_LTESubscriptionState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[4].Descriptor()
}

func (LTESubscription_LTESubscriptionState) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[4]
}

func (x LTESubscription_LTESubscriptionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LTESubscription_LTESubscriptionState.Descriptor instead.
func (LTESubscription_LTESubscriptionState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{3, 0}
}

type LTESubscription_LTEAuthAlgo int32

const (
	LTESubscription_MILENAGE LTESubscription_LTEAuthAlgo = 0 // default
)

// Enum value maps for LTESubscription_LTEAuthAlgo.
var (
	LTESubscription_LTEAuthAlgo_name = map[int32]string{
		0: "MILENAGE",
	}
	LTESubscription_LTEAuthAlgo_value = map[string]int32{
		"MILENAGE": 0,
	}
)

func (x LTESubscription_LTEAuthAlgo) Enum() *LTESubscription_LTEAuthAlgo {
	p := new(LTESubscription_LTEAuthAlgo)
	*p = x
	return p
}

func (x LTESubscription_LTEAuthAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LTESubscription_LTEAuthAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[5].Descriptor()
}

func (LTESubscription_LTEAuthAlgo) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[5]
}

func (x LTESubscription_LTEAuthAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LTESubscription_LTEAuthAlgo.Descriptor instead.
func (LTESubscription_LTEAuthAlgo) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{3, 1}
}

type APNConfiguration_PDNType int32

const (
	APNConfiguration_IPV4         APNConfiguration_PDNType = 0
	APNConfiguration_IPV6         APNConfiguration_PDNType = 1
	APNConfiguration_IPV4V6       APNConfiguration_PDNType = 2
	APNConfiguration_IPV4_OR_IPV6 APNConfiguration_PDNType = 3
)

// Enum value maps for APNConfiguration_PDNType.
var (
	APNConfiguration_PDNType_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
		2: "IPV4V6",
		3: "IPV4_OR_IPV6",
	}
	APNConfiguration_PDNType_value = map[string]int32{
		"IPV4":         0,
		"IPV6":         1,
		"IPV4V6":       2,
		"IPV4_OR_IPV6": 3,
	}
)

func (x APNConfiguration_PDNType) Enum() *APNConfiguration_PDNType {
	p := new(APNConfiguration_PDNType)
	*p = x
	return p
}

func (x APNConfiguration_PDNType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APNConfiguration_PDNType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[6].Descriptor()
}

func (APNConfiguration_PDNType) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[6]
}

func (x APNConfiguration_PDNType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APNConfiguration_PDNType.Descriptor instead.
func (APNConfiguration_PDNType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{5, 0}
}

type Non3GPPUserProfile_Non3GPPIPAccess int32

const (
	// Subscriber has non-3GPP subscription access to EPC network
	Non3GPPUserProfile_NON_3GPP_SUBSCRIPTION_ALLOWED Non3GPPUserProfile_Non3GPPIPAccess = 0
	// Subscriber has no non-3GPP subscription access to EPC network
	Non3GPPUserProfile_NON_3GPP_SUBSCRIPTION_BARRED Non3GPPUserProfile_Non3GPPIPAccess = 1
)

// Enum value maps for Non3GPPUserProfile_Non3GPPIPAccess.
var (
	Non3GPPUserProfile_Non3GPPIPAccess_name = map[int32]string{
		0: "NON_3GPP_SUBSCRIPTION_ALLOWED",
		1: "NON_3GPP_SUBSCRIPTION_BARRED",
	}
	Non3GPPUserProfile_Non3GPPIPAccess_value = map[string]int32{
		"NON_3GPP_SUBSCRIPTION_ALLOWED": 0,
		"NON_3GPP_SUBSCRIPTION_BARRED":  1,
	}
)

func (x Non3GPPUserProfile_Non3GPPIPAccess) Enum() *Non3GPPUserProfile_Non3GPPIPAccess {
	p := new(Non3GPPUserProfile_Non3GPPIPAccess)
	*p = x
	return p
}

func (x Non3GPPUserProfile_Non3GPPIPAccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Non3GPPUserProfile_Non3GPPIPAccess) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[7].Descriptor()
}

func (Non3GPPUserProfile_Non3GPPIPAccess) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[7]
}

func (x Non3GPPUserProfile_Non3GPPIPAccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Non3GPPUserProfile_Non3GPPIPAccess.Descriptor instead.
func (Non3GPPUserProfile_Non3GPPIPAccess) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{7, 0}
}

type Non3GPPUserProfile_Non3GPPIPAccessAPN int32

const (
	// Enable all APNs for a subscriber
	Non3GPPUserProfile_NON_3GPP_APNS_ENABLE Non3GPPUserProfile_Non3GPPIPAccessAPN = 0
	// Disable all APNs for a subscriber
	Non3GPPUserProfile_NON_3GPP_APNS_DISABLE Non3GPPUserProfile_Non3GPPIPAccessAPN = 1
)

// Enum value maps for Non3GPPUserProfile_Non3GPPIPAccessAPN.
var (
	Non3GPPUserProfile_Non3GPPIPAccessAPN_name = map[int32]string{
		0: "NON_3GPP_APNS_ENABLE",
		1: "NON_3GPP_APNS_DISABLE",
	}
	Non3GPPUserProfile_Non3GPPIPAccessAPN_value = map[string]int32{
		"NON_3GPP_APNS_ENABLE":  0,
		"NON_3GPP_APNS_DISABLE": 1,
	}
)

func (x Non3GPPUserProfile_Non3GPPIPAccessAPN) Enum() *Non3GPPUserProfile_Non3GPPIPAccessAPN {
	p := new(Non3GPPUserProfile_Non3GPPIPAccessAPN)
	*p = x
	return p
}

func (x Non3GPPUserProfile_Non3GPPIPAccessAPN) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Non3GPPUserProfile_Non3GPPIPAccessAPN) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[8].Descriptor()
}

func (Non3GPPUserProfile_Non3GPPIPAccessAPN) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[8]
}

func (x Non3GPPUserProfile_Non3GPPIPAccessAPN) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Non3GPPUserProfile_Non3GPPIPAccessAPN.Descriptor instead.
func (Non3GPPUserProfile_Non3GPPIPAccessAPN) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{7, 1}
}

// --------------------------------------------------------------------------
// SubscriberID (or SID) uniquely identifies the subscriber across the system
// --------------------------------------------------------------------------
type SubscriberID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type SubscriberID_IDType `protobuf:"varint,2,opt,name=type,proto3,enum=magma.lte.SubscriberID_IDType" json:"type,omitempty"`
}

func (x *SubscriberID) Reset() {
	*x = SubscriberID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberID) ProtoMessage() {}

func (x *SubscriberID) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberID.ProtoReflect.Descriptor instead.
func (*SubscriberID) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{0}
}

func (x *SubscriberID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscriberID) GetType() SubscriberID_IDType {
	if x != nil {
		return x.Type
	}
	return SubscriberID_IMSI
}

type SubscriberIDSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sids []*SubscriberID `protobuf:"bytes,1,rep,name=sids,proto3" json:"sids,omitempty"`
}

func (x *SubscriberIDSet) Reset() {
	*x = SubscriberIDSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberIDSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberIDSet) ProtoMessage() {}

func (x *SubscriberIDSet) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberIDSet.ProtoReflect.Descriptor instead.
func (*SubscriberIDSet) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{1}
}

func (x *SubscriberIDSet) GetSids() []*SubscriberID {
	if x != nil {
		return x.Sids
	}
	return nil
}

// --------------------------------------------------------------------------
// GSM/LTE subscription info
// --------------------------------------------------------------------------
type GSMSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    GSMSubscription_GSMSubscriptionState `protobuf:"varint,1,opt,name=state,proto3,enum=magma.lte.GSMSubscription_GSMSubscriptionState" json:"state,omitempty"`
	AuthAlgo GSMSubscription_GSMAuthAlgo          `protobuf:"varint,2,opt,name=auth_algo,json=authAlgo,proto3,enum=magma.lte.GSMSubscription_GSMAuthAlgo" json:"auth_algo,omitempty"`
	// Authentication key (ki). Need for A3/A8 algos. This is not used
	// when the auth_algo is PRECOMPUTED_AUTH_TUPLES.
	AuthKey []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// Precomputed (rand, sres, kc) tuples. Used when the auth_algo is
	// PRECOMPUTED_AUTH_TUPLES.
	AuthTuples [][]byte `protobuf:"bytes,4,rep,name=auth_tuples,json=authTuples,proto3" json:"auth_tuples,omitempty"`
}

func (x *GSMSubscription) Reset() {
	*x = GSMSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSMSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSMSubscription) ProtoMessage() {}

func (x *GSMSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSMSubscription.ProtoReflect.Descriptor instead.
func (*GSMSubscription) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{2}
}

func (x *GSMSubscription) GetState() GSMSubscription_GSMSubscriptionState {
	if x != nil {
		return x.State
	}
	return GSMSubscription_INACTIVE
}

func (x *GSMSubscription) GetAuthAlgo() GSMSubscription_GSMAuthAlgo {
	if x != nil {
		return x.AuthAlgo
	}
	return GSMSubscription_PRECOMPUTED_AUTH_TUPLES
}

func (x *GSMSubscription) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *GSMSubscription) GetAuthTuples() [][]byte {
	if x != nil {
		return x.AuthTuples
	}
	return nil
}

type LTESubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    LTESubscription_LTESubscriptionState `protobuf:"varint,1,opt,name=state,proto3,enum=magma.lte.LTESubscription_LTESubscriptionState" json:"state,omitempty"`
	AuthAlgo LTESubscription_LTEAuthAlgo          `protobuf:"varint,2,opt,name=auth_algo,json=authAlgo,proto3,enum=magma.lte.LTESubscription_LTEAuthAlgo" json:"auth_algo,omitempty"`
	// Authentication key (k).
	AuthKey []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// Operator configuration field (Op) signed with authentication key (k)
	AuthOpc           []byte   `protobuf:"bytes,4,opt,name=auth_opc,json=authOpc,proto3" json:"auth_opc,omitempty"`
	AssignedBaseNames []string `protobuf:"bytes,10,rep,name=assigned_base_names,json=assignedBaseNames,proto3" json:"assigned_base_names,omitempty"`
	AssignedPolicies  []string `protobuf:"bytes,11,rep,name=assigned_policies,json=assignedPolicies,proto3" json:"assigned_policies,omitempty"`
}

func (x *LTESubscription) Reset() {
	*x = LTESubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTESubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTESubscription) ProtoMessage() {}

func (x *LTESubscription) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTESubscription.ProtoReflect.Descriptor instead.
func (*LTESubscription) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{3}
}

func (x *LTESubscription) GetState() LTESubscription_LTESubscriptionState {
	if x != nil {
		return x.State
	}
	return LTESubscription_INACTIVE
}

func (x *LTESubscription) GetAuthAlgo() LTESubscription_LTEAuthAlgo {
	if x != nil {
		return x.AuthAlgo
	}
	return LTESubscription_MILENAGE
}

func (x *LTESubscription) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *LTESubscription) GetAuthOpc() []byte {
	if x != nil {
		return x.AuthOpc
	}
	return nil
}

func (x *LTESubscription) GetAssignedBaseNames() []string {
	if x != nil {
		return x.AssignedBaseNames
	}
	return nil
}

func (x *LTESubscription) GetAssignedPolicies() []string {
	if x != nil {
		return x.AssignedPolicies
	}
	return nil
}

type SubscriberState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next SEQ to be used for calculating the AUTN.
	LteAuthNextSeq uint64 `protobuf:"varint,1,opt,name=lte_auth_next_seq,json=lteAuthNextSeq,proto3" json:"lte_auth_next_seq,omitempty"`
	// The Diameter address of the 3GPP AAA Server which is serving the user.
	// An empty string indicates that no server is currently serving the user.
	TgppAaaServerName string `protobuf:"bytes,2,opt,name=tgpp_aaa_server_name,json=tgppAaaServerName,proto3" json:"tgpp_aaa_server_name,omitempty"`
	// Whether the subscribers User Status is REGISTERED or NOT_REGISTERED.
	TgppAaaServerRegistered bool `protobuf:"varint,3,opt,name=tgpp_aaa_server_registered,json=tgppAaaServerRegistered,proto3" json:"tgpp_aaa_server_registered,omitempty"`
}

func (x *SubscriberState) Reset() {
	*x = SubscriberState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberState) ProtoMessage() {}

func (x *SubscriberState) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberState.ProtoReflect.Descriptor instead.
func (*SubscriberState) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{4}
}

func (x *SubscriberState) GetLteAuthNextSeq() uint64 {
	if x != nil {
		return x.LteAuthNextSeq
	}
	return 0
}

func (x *SubscriberState) GetTgppAaaServerName() string {
	if x != nil {
		return x.TgppAaaServerName
	}
	return ""
}

func (x *SubscriberState) GetTgppAaaServerRegistered() bool {
	if x != nil {
		return x.TgppAaaServerRegistered
	}
	return false
}

type APNConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APN identifier
	ContextId uint32 `protobuf:"varint,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// Contains either the APN Name or wildcard "*"
	ServiceSelection string `protobuf:"bytes,2,opt,name=service_selection,json=serviceSelection,proto3" json:"service_selection,omitempty"`
	// APN QoS profile
	QosProfile *APNConfiguration_QoSProfile `protobuf:"bytes,3,opt,name=qos_profile,json=qosProfile,proto3" json:"qos_profile,omitempty"`
	// APN authorized bitrate
	Ambr *AggregatedMaximumBitrate `protobuf:"bytes,4,opt,name=ambr,proto3" json:"ambr,omitempty"`
	Pdn  APNConfiguration_PDNType  `protobuf:"varint,5,opt,name=pdn,proto3,enum=magma.lte.APNConfiguration_PDNType" json:"pdn,omitempty"`
	// Optional static IP to allocate for this subscriber on this APN
	AssignedStaticIp string `protobuf:"bytes,6,opt,name=assigned_static_ip,json=assignedStaticIp,proto3" json:"assigned_static_ip,omitempty"`
	// resource is gateway-specific guidance for serving the APN
	Resource *APNConfiguration_APNResource `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *APNConfiguration) Reset() {
	*x = APNConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNConfiguration) ProtoMessage() {}

func (x *APNConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNConfiguration.ProtoReflect.Descriptor instead.
func (*APNConfiguration) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{5}
}

func (x *APNConfiguration) GetContextId() uint32 {
	if x != nil {
		return x.ContextId
	}
	return 0
}

func (x *APNConfiguration) GetServiceSelection() string {
	if x != nil {
		return x.ServiceSelection
	}
	return ""
}

func (x *APNConfiguration) GetQosProfile() *APNConfiguration_QoSProfile {
	if x != nil {
		return x.QosProfile
	}
	return nil
}

func (x *APNConfiguration) GetAmbr() *AggregatedMaximumBitrate {
	if x != nil {
		return x.Ambr
	}
	return nil
}

func (x *APNConfiguration) GetPdn() APNConfiguration_PDNType {
	if x != nil {
		return x.Pdn
	}
	return APNConfiguration_IPV4
}

func (x *APNConfiguration) GetAssignedStaticIp() string {
	if x != nil {
		return x.AssignedStaticIp
	}
	return ""
}

func (x *APNConfiguration) GetResource() *APNConfiguration_APNResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type AggregatedMaximumBitrate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum uplink bitrate
	MaxBandwidthUl uint32 `protobuf:"varint,1,opt,name=max_bandwidth_ul,json=maxBandwidthUl,proto3" json:"max_bandwidth_ul,omitempty"`
	// Maximum downlink bitrate
	MaxBandwidthDl uint32 `protobuf:"varint,2,opt,name=max_bandwidth_dl,json=maxBandwidthDl,proto3" json:"max_bandwidth_dl,omitempty"`
}

func (x *AggregatedMaximumBitrate) Reset() {
	*x = AggregatedMaximumBitrate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedMaximumBitrate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedMaximumBitrate) ProtoMessage() {}

func (x *AggregatedMaximumBitrate) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedMaximumBitrate.ProtoReflect.Descriptor instead.
func (*AggregatedMaximumBitrate) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{6}
}

func (x *AggregatedMaximumBitrate) GetMaxBandwidthUl() uint32 {
	if x != nil {
		return x.MaxBandwidthUl
	}
	return 0
}

func (x *AggregatedMaximumBitrate) GetMaxBandwidthDl() uint32 {
	if x != nil {
		return x.MaxBandwidthDl
	}
	return 0
}

type Non3GPPUserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msisdn              string                                `protobuf:"bytes,1,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Non_3GppIpAccess    Non3GPPUserProfile_Non3GPPIPAccess    `protobuf:"varint,2,opt,name=non_3gpp_ip_access,json=non3gppIpAccess,proto3,enum=magma.lte.Non3GPPUserProfile_Non3GPPIPAccess" json:"non_3gpp_ip_access,omitempty"`
	Non_3GppIpAccessApn Non3GPPUserProfile_Non3GPPIPAccessAPN `protobuf:"varint,3,opt,name=non_3gpp_ip_access_apn,json=non3gppIpAccessApn,proto3,enum=magma.lte.Non3GPPUserProfile_Non3GPPIPAccessAPN" json:"non_3gpp_ip_access_apn,omitempty"`
	Ambr                *AggregatedMaximumBitrate             `protobuf:"bytes,4,opt,name=ambr,proto3" json:"ambr,omitempty"`
	ApnConfig           []*APNConfiguration                   `protobuf:"bytes,5,rep,name=apn_config,json=apnConfig,proto3" json:"apn_config,omitempty"`
	AccessNetId         AccessNetworkIdentifier               `protobuf:"varint,6,opt,name=access_net_id,json=accessNetId,proto3,enum=magma.lte.AccessNetworkIdentifier" json:"access_net_id,omitempty"`
}

func (x *Non3GPPUserProfile) Reset() {
	*x = Non3GPPUserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Non3GPPUserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Non3GPPUserProfile) ProtoMessage() {}

func (x *Non3GPPUserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Non3GPPUserProfile.ProtoReflect.Descriptor instead.
func (*Non3GPPUserProfile) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{7}
}

func (x *Non3GPPUserProfile) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *Non3GPPUserProfile) GetNon_3GppIpAccess() Non3GPPUserProfile_Non3GPPIPAccess {
	if x != nil {
		return x.Non_3GppIpAccess
	}
	return Non3GPPUserProfile_NON_3GPP_SUBSCRIPTION_ALLOWED
}

func (x *Non3GPPUserProfile) GetNon_3GppIpAccessApn() Non3GPPUserProfile_Non3GPPIPAccessAPN {
	if x != nil {
		return x.Non_3GppIpAccessApn
	}
	return Non3GPPUserProfile_NON_3GPP_APNS_ENABLE
}

func (x *Non3GPPUserProfile) GetAmbr() *AggregatedMaximumBitrate {
	if x != nil {
		return x.Ambr
	}
	return nil
}

func (x *Non3GPPUserProfile) GetApnConfig() []*APNConfiguration {
	if x != nil {
		return x.ApnConfig
	}
	return nil
}

func (x *Non3GPPUserProfile) GetAccessNetId() AccessNetworkIdentifier {
	if x != nil {
		return x.AccessNetId
	}
	return AccessNetworkIdentifier_HRPD
}

// --------------------------------------------------------------------------
// User subscription record. This record is serialized and stored in the DB.
// --------------------------------------------------------------------------
type SubscriberData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique indentifier for the subscriber
	Sid       *SubscriberID     `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Gsm       *GSMSubscription  `protobuf:"bytes,2,opt,name=gsm,proto3" json:"gsm,omitempty"`
	Lte       *LTESubscription  `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	NetworkId *protos.NetworkID `protobuf:"bytes,4,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	State     *SubscriberState  `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Subscription profile
	SubProfile string              `protobuf:"bytes,6,opt,name=sub_profile,json=subProfile,proto3" json:"sub_profile,omitempty"`
	Non_3Gpp   *Non3GPPUserProfile `protobuf:"bytes,7,opt,name=non_3gpp,json=non3gpp,proto3" json:"non_3gpp,omitempty"`
}

func (x *SubscriberData) Reset() {
	*x = SubscriberData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberData) ProtoMessage() {}

func (x *SubscriberData) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberData.ProtoReflect.Descriptor instead.
func (*SubscriberData) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{8}
}

func (x *SubscriberData) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SubscriberData) GetGsm() *GSMSubscription {
	if x != nil {
		return x.Gsm
	}
	return nil
}

func (x *SubscriberData) GetLte() *LTESubscription {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *SubscriberData) GetNetworkId() *protos.NetworkID {
	if x != nil {
		return x.NetworkId
	}
	return nil
}

func (x *SubscriberData) GetState() *SubscriberState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SubscriberData) GetSubProfile() string {
	if x != nil {
		return x.SubProfile
	}
	return ""
}

func (x *SubscriberData) GetNon_3Gpp() *Non3GPPUserProfile {
	if x != nil {
		return x.Non_3Gpp
	}
	return nil
}

type SubscriberUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated subscription data
	Data *SubscriberData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Specifies the fields to be updated
	// The mask can be individual subscription elements (Eg: 'lte.auth_key') or
	// entire subset in the SubscriberData (Eg: 'lte' to update all lte.* fields)
	Mask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *SubscriberUpdate) Reset() {
	*x = SubscriberUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberUpdate) ProtoMessage() {}

func (x *SubscriberUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberUpdate.ProtoReflect.Descriptor instead.
func (*SubscriberUpdate) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{9}
}

func (x *SubscriberUpdate) GetData() *SubscriberData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SubscriberUpdate) GetMask() *field_mask.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

// For details about values see 29.212
type APNConfiguration_QoSProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId                 int32  `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	PriorityLevel           uint32 `protobuf:"varint,2,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreemptionCapability    bool   `protobuf:"varint,3,opt,name=preemption_capability,json=preemptionCapability,proto3" json:"preemption_capability,omitempty"`
	PreemptionVulnerability bool   `protobuf:"varint,4,opt,name=preemption_vulnerability,json=preemptionVulnerability,proto3" json:"preemption_vulnerability,omitempty"`
}

func (x *APNConfiguration_QoSProfile) Reset() {
	*x = APNConfiguration_QoSProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNConfiguration_QoSProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNConfiguration_QoSProfile) ProtoMessage() {}

func (x *APNConfiguration_QoSProfile) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNConfiguration_QoSProfile.ProtoReflect.Descriptor instead.
func (*APNConfiguration_QoSProfile) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{5, 0}
}

func (x *APNConfiguration_QoSProfile) GetClassId() int32 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *APNConfiguration_QoSProfile) GetPriorityLevel() uint32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *APNConfiguration_QoSProfile) GetPreemptionCapability() bool {
	if x != nil {
		return x.PreemptionCapability
	}
	return false
}

func (x *APNConfiguration_QoSProfile) GetPreemptionVulnerability() bool {
	if x != nil {
		return x.PreemptionVulnerability
	}
	return false
}

type APNConfiguration_APNResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnName    string `protobuf:"bytes,1,opt,name=apn_name,json=apnName,proto3" json:"apn_name,omitempty"`
	GatewayIp  string `protobuf:"bytes,2,opt,name=gateway_ip,json=gatewayIp,proto3" json:"gateway_ip,omitempty"`
	GatewayMac string `protobuf:"bytes,3,opt,name=gateway_mac,json=gatewayMac,proto3" json:"gateway_mac,omitempty"`
	VlanId     uint32 `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *APNConfiguration_APNResource) Reset() {
	*x = APNConfiguration_APNResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNConfiguration_APNResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNConfiguration_APNResource) ProtoMessage() {}

func (x *APNConfiguration_APNResource) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNConfiguration_APNResource.ProtoReflect.Descriptor instead.
func (*APNConfiguration_APNResource) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{5, 1}
}

func (x *APNConfiguration_APNResource) GetApnName() string {
	if x != nil {
		return x.ApnName
	}
	return ""
}

func (x *APNConfiguration_APNResource) GetGatewayIp() string {
	if x != nil {
		return x.GatewayIp
	}
	return ""
}

func (x *APNConfiguration_APNResource) GetGatewayMac() string {
	if x != nil {
		return x.GatewayMac
	}
	return ""
}

func (x *APNConfiguration_APNResource) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

var File_lte_protos_subscriberdb_proto protoreflect.FileDescriptor

var file_lte_protos_subscriberdb_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x2e, 0x49,
	0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x06, 0x49,
	0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4d, 0x53, 0x49, 0x10, 0x00, 0x22,
	0x3e, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x04, 0x73, 0x69, 0x64, 0x73, 0x22,
	0xb7, 0x02, 0x0a, 0x0f, 0x47, 0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47,
	0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x53, 0x4d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x53, 0x4d, 0x41, 0x75, 0x74,
	0x68, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x47,
	0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x2a, 0x0a,
	0x0b, 0x47, 0x53, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x53, 0x10, 0x00, 0x22, 0xff, 0x02, 0x0a, 0x0f, 0x4c, 0x54,
	0x45, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x54, 0x45, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x54, 0x45, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x54, 0x45, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x54, 0x45, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x63, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x14,
	0x4c, 0x54, 0x45, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x1b,
	0x0a, 0x0b, 0x4c, 0x54, 0x45, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x47, 0x45, 0x10, 0x00, 0x22, 0xaa, 0x01, 0x0a, 0x0f,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x11, 0x6c, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x67,
	0x70, 0x70, 0x5f, 0x61, 0x61, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x67, 0x70, 0x70, 0x41, 0x61,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x74,
	0x67, 0x70, 0x70, 0x5f, 0x61, 0x61, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x74, 0x67, 0x70, 0x70, 0x41, 0x61, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x8c, 0x06, 0x0a, 0x10, 0x41, 0x50, 0x4e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x71, 0x6f, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x50, 0x4e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x6f, 0x53, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x71, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x61, 0x6d, 0x62, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x70,
	0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x44, 0x4e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x70,
	0x64, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x70,
	0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41,
	0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xbe, 0x01, 0x0a, 0x0a, 0x51, 0x6f, 0x53, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x18, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x81, 0x01, 0x0a, 0x0b, 0x41, 0x50, 0x4e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x61,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x07, 0x50, 0x44,
	0x4e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x50, 0x56,
	0x34, 0x56, 0x36, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4f, 0x52,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x03, 0x22, 0x6e, 0x0a, 0x18, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x64,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x44, 0x6c, 0x22, 0xce, 0x04, 0x0a, 0x12, 0x4e, 0x6f, 0x6e, 0x33,
	0x47, 0x50, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x33, 0x67,
	0x70, 0x70, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4e,
	0x6f, 0x6e, 0x33, 0x47, 0x50, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x4e, 0x6f, 0x6e, 0x33, 0x47, 0x50, 0x50, 0x49, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x33, 0x67, 0x70, 0x70, 0x49, 0x70, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x64, 0x0a, 0x16, 0x6e, 0x6f, 0x6e, 0x5f, 0x33, 0x67, 0x70, 0x70, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4e,
	0x6f, 0x6e, 0x33, 0x47, 0x50, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x4e, 0x6f, 0x6e, 0x33, 0x47, 0x50, 0x50, 0x49, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x50, 0x4e, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x33, 0x67, 0x70, 0x70, 0x49, 0x70, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x6d, 0x62, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x61, 0x6d, 0x62,
	0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x61, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x65, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x0f, 0x4e, 0x6f, 0x6e, 0x33, 0x47, 0x50, 0x50,
	0x49, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x4e, 0x5f,
	0x33, 0x47, 0x50, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4e,
	0x4f, 0x4e, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x22, 0x49, 0x0a,
	0x12, 0x4e, 0x6f, 0x6e, 0x33, 0x47, 0x50, 0x50, 0x49, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x41, 0x50, 0x4e, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x4e, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x5f,
	0x41, 0x50, 0x4e, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x4e, 0x4f, 0x4e, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x5f, 0x41, 0x50, 0x4e, 0x53, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0xdb, 0x02, 0x0a, 0x0e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x03, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x03, 0x67, 0x73, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x47, 0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x67, 0x73, 0x6d, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x54,
	0x45, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x6e, 0x6f, 0x6e, 0x5f, 0x33, 0x67, 0x70, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x6e, 0x33, 0x47,
	0x50, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x6e,
	0x6f, 0x6e, 0x33, 0x67, 0x70, 0x70, 0x22, 0x71, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x2a, 0x46, 0x0a, 0x17, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x52, 0x50, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x57, 0x49, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4c, 0x41,
	0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10,
	0x03, 0x32, 0xe6, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x44, 0x42, 0x12, 0x3f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44,
	0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1a, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x49, 0x44, 0x53, 0x65, 0x74, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_subscriberdb_proto_rawDescOnce sync.Once
	file_lte_protos_subscriberdb_proto_rawDescData = file_lte_protos_subscriberdb_proto_rawDesc
)

func file_lte_protos_subscriberdb_proto_rawDescGZIP() []byte {
	file_lte_protos_subscriberdb_proto_rawDescOnce.Do(func() {
		file_lte_protos_subscriberdb_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_subscriberdb_proto_rawDescData)
	})
	return file_lte_protos_subscriberdb_proto_rawDescData
}

var file_lte_protos_subscriberdb_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_lte_protos_subscriberdb_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_lte_protos_subscriberdb_proto_goTypes = []interface{}{
	(AccessNetworkIdentifier)(0),               // 0: magma.lte.AccessNetworkIdentifier
	(SubscriberID_IDType)(0),                   // 1: magma.lte.SubscriberID.IDType
	(GSMSubscription_GSMSubscriptionState)(0),  // 2: magma.lte.GSMSubscription.GSMSubscriptionState
	(GSMSubscription_GSMAuthAlgo)(0),           // 3: magma.lte.GSMSubscription.GSMAuthAlgo
	(LTESubscription_LTESubscriptionState)(0),  // 4: magma.lte.LTESubscription.LTESubscriptionState
	(LTESubscription_LTEAuthAlgo)(0),           // 5: magma.lte.LTESubscription.LTEAuthAlgo
	(APNConfiguration_PDNType)(0),              // 6: magma.lte.APNConfiguration.PDNType
	(Non3GPPUserProfile_Non3GPPIPAccess)(0),    // 7: magma.lte.Non3GPPUserProfile.Non3GPPIPAccess
	(Non3GPPUserProfile_Non3GPPIPAccessAPN)(0), // 8: magma.lte.Non3GPPUserProfile.Non3GPPIPAccessAPN
	(*SubscriberID)(nil),                       // 9: magma.lte.SubscriberID
	(*SubscriberIDSet)(nil),                    // 10: magma.lte.SubscriberIDSet
	(*GSMSubscription)(nil),                    // 11: magma.lte.GSMSubscription
	(*LTESubscription)(nil),                    // 12: magma.lte.LTESubscription
	(*SubscriberState)(nil),                    // 13: magma.lte.SubscriberState
	(*APNConfiguration)(nil),                   // 14: magma.lte.APNConfiguration
	(*AggregatedMaximumBitrate)(nil),           // 15: magma.lte.AggregatedMaximumBitrate
	(*Non3GPPUserProfile)(nil),                 // 16: magma.lte.Non3GPPUserProfile
	(*SubscriberData)(nil),                     // 17: magma.lte.SubscriberData
	(*SubscriberUpdate)(nil),                   // 18: magma.lte.SubscriberUpdate
	(*APNConfiguration_QoSProfile)(nil),        // 19: magma.lte.APNConfiguration.QoSProfile
	(*APNConfiguration_APNResource)(nil),       // 20: magma.lte.APNConfiguration.APNResource
	(*protos.NetworkID)(nil),                   // 21: magma.orc8r.NetworkID
	(*field_mask.FieldMask)(nil),               // 22: google.protobuf.FieldMask
	(*protos.Void)(nil),                        // 23: magma.orc8r.Void
}
var file_lte_protos_subscriberdb_proto_depIdxs = []int32{
	1,  // 0: magma.lte.SubscriberID.type:type_name -> magma.lte.SubscriberID.IDType
	9,  // 1: magma.lte.SubscriberIDSet.sids:type_name -> magma.lte.SubscriberID
	2,  // 2: magma.lte.GSMSubscription.state:type_name -> magma.lte.GSMSubscription.GSMSubscriptionState
	3,  // 3: magma.lte.GSMSubscription.auth_algo:type_name -> magma.lte.GSMSubscription.GSMAuthAlgo
	4,  // 4: magma.lte.LTESubscription.state:type_name -> magma.lte.LTESubscription.LTESubscriptionState
	5,  // 5: magma.lte.LTESubscription.auth_algo:type_name -> magma.lte.LTESubscription.LTEAuthAlgo
	19, // 6: magma.lte.APNConfiguration.qos_profile:type_name -> magma.lte.APNConfiguration.QoSProfile
	15, // 7: magma.lte.APNConfiguration.ambr:type_name -> magma.lte.AggregatedMaximumBitrate
	6,  // 8: magma.lte.APNConfiguration.pdn:type_name -> magma.lte.APNConfiguration.PDNType
	20, // 9: magma.lte.APNConfiguration.resource:type_name -> magma.lte.APNConfiguration.APNResource
	7,  // 10: magma.lte.Non3GPPUserProfile.non_3gpp_ip_access:type_name -> magma.lte.Non3GPPUserProfile.Non3GPPIPAccess
	8,  // 11: magma.lte.Non3GPPUserProfile.non_3gpp_ip_access_apn:type_name -> magma.lte.Non3GPPUserProfile.Non3GPPIPAccessAPN
	15, // 12: magma.lte.Non3GPPUserProfile.ambr:type_name -> magma.lte.AggregatedMaximumBitrate
	14, // 13: magma.lte.Non3GPPUserProfile.apn_config:type_name -> magma.lte.APNConfiguration
	0,  // 14: magma.lte.Non3GPPUserProfile.access_net_id:type_name -> magma.lte.AccessNetworkIdentifier
	9,  // 15: magma.lte.SubscriberData.sid:type_name -> magma.lte.SubscriberID
	11, // 16: magma.lte.SubscriberData.gsm:type_name -> magma.lte.GSMSubscription
	12, // 17: magma.lte.SubscriberData.lte:type_name -> magma.lte.LTESubscription
	21, // 18: magma.lte.SubscriberData.network_id:type_name -> magma.orc8r.NetworkID
	13, // 19: magma.lte.SubscriberData.state:type_name -> magma.lte.SubscriberState
	16, // 20: magma.lte.SubscriberData.non_3gpp:type_name -> magma.lte.Non3GPPUserProfile
	17, // 21: magma.lte.SubscriberUpdate.data:type_name -> magma.lte.SubscriberData
	22, // 22: magma.lte.SubscriberUpdate.mask:type_name -> google.protobuf.FieldMask
	17, // 23: magma.lte.SubscriberDB.AddSubscriber:input_type -> magma.lte.SubscriberData
	9,  // 24: magma.lte.SubscriberDB.DeleteSubscriber:input_type -> magma.lte.SubscriberID
	18, // 25: magma.lte.SubscriberDB.UpdateSubscriber:input_type -> magma.lte.SubscriberUpdate
	9,  // 26: magma.lte.SubscriberDB.GetSubscriberData:input_type -> magma.lte.SubscriberID
	23, // 27: magma.lte.SubscriberDB.ListSubscribers:input_type -> magma.orc8r.Void
	23, // 28: magma.lte.SubscriberDB.AddSubscriber:output_type -> magma.orc8r.Void
	23, // 29: magma.lte.SubscriberDB.DeleteSubscriber:output_type -> magma.orc8r.Void
	23, // 30: magma.lte.SubscriberDB.UpdateSubscriber:output_type -> magma.orc8r.Void
	17, // 31: magma.lte.SubscriberDB.GetSubscriberData:output_type -> magma.lte.SubscriberData
	10, // 32: magma.lte.SubscriberDB.ListSubscribers:output_type -> magma.lte.SubscriberIDSet
	28, // [28:33] is the sub-list for method output_type
	23, // [23:28] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_lte_protos_subscriberdb_proto_init() }
func file_lte_protos_subscriberdb_proto_init() {
	if File_lte_protos_subscriberdb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_subscriberdb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberIDSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSMSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTESubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedMaximumBitrate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Non3GPPUserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNConfiguration_QoSProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNConfiguration_APNResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_subscriberdb_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lte_protos_subscriberdb_proto_goTypes,
		DependencyIndexes: file_lte_protos_subscriberdb_proto_depIdxs,
		EnumInfos:         file_lte_protos_subscriberdb_proto_enumTypes,
		MessageInfos:      file_lte_protos_subscriberdb_proto_msgTypes,
	}.Build()
	File_lte_protos_subscriberdb_proto = out.File
	file_lte_protos_subscriberdb_proto_rawDesc = nil
	file_lte_protos_subscriberdb_proto_goTypes = nil
	file_lte_protos_subscriberdb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubscriberDBClient is the client API for SubscriberDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriberDBClient interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error)
}

type subscriberDBClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberDBClient(cc grpc.ClientConnInterface) SubscriberDBClient {
	return &subscriberDBClient{cc}
}

func (c *subscriberDBClient) AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/AddSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/DeleteSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/UpdateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error) {
	out := new(SubscriberData)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/GetSubscriberData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error) {
	out := new(SubscriberIDSet)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberDBServer is the server API for SubscriberDB service.
type SubscriberDBServer interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(context.Context, *SubscriberData) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(context.Context, *SubscriberID) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(context.Context, *SubscriberUpdate) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(context.Context, *SubscriberID) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(context.Context, *protos.Void) (*SubscriberIDSet, error)
}

// UnimplementedSubscriberDBServer can be embedded to have forward compatible implementations.
type UnimplementedSubscriberDBServer struct {
}

func (*UnimplementedSubscriberDBServer) AddSubscriber(context.Context, *SubscriberData) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscriber not implemented")
}
func (*UnimplementedSubscriberDBServer) DeleteSubscriber(context.Context, *SubscriberID) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriber not implemented")
}
func (*UnimplementedSubscriberDBServer) UpdateSubscriber(context.Context, *SubscriberUpdate) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriber not implemented")
}
func (*UnimplementedSubscriberDBServer) GetSubscriberData(context.Context, *SubscriberID) (*SubscriberData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriberData not implemented")
}
func (*UnimplementedSubscriberDBServer) ListSubscribers(context.Context, *protos.Void) (*SubscriberIDSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}

func RegisterSubscriberDBServer(s *grpc.Server, srv SubscriberDBServer) {
	s.RegisterService(&_SubscriberDB_serviceDesc, srv)
}

func _SubscriberDB_AddSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/AddSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, req.(*SubscriberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/DeleteSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_UpdateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/UpdateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, req.(*SubscriberUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_GetSubscriberData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/GetSubscriberData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriberDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SubscriberDB",
	HandlerType: (*SubscriberDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubscriber",
			Handler:    _SubscriberDB_AddSubscriber_Handler,
		},
		{
			MethodName: "DeleteSubscriber",
			Handler:    _SubscriberDB_DeleteSubscriber_Handler,
		},
		{
			MethodName: "UpdateSubscriber",
			Handler:    _SubscriberDB_UpdateSubscriber_Handler,
		},
		{
			MethodName: "GetSubscriberData",
			Handler:    _SubscriberDB_GetSubscriberData_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberDB_ListSubscribers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}
