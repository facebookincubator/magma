//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: lte/protos/mconfig/mconfigs.proto

package mconfig

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EnodebD_CSFBRat int32

const (
	EnodebD_CSFBRAT_2G EnodebD_CSFBRat = 0
	EnodebD_CSFBRAT_3G EnodebD_CSFBRat = 1
)

// Enum value maps for EnodebD_CSFBRat.
var (
	EnodebD_CSFBRat_name = map[int32]string{
		0: "CSFBRAT_2G",
		1: "CSFBRAT_3G",
	}
	EnodebD_CSFBRat_value = map[string]int32{
		"CSFBRAT_2G": 0,
		"CSFBRAT_3G": 1,
	}
)

func (x EnodebD_CSFBRat) Enum() *EnodebD_CSFBRat {
	p := new(EnodebD_CSFBRat)
	*p = x
	return p
}

func (x EnodebD_CSFBRat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnodebD_CSFBRat) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[0].Descriptor()
}

func (EnodebD_CSFBRat) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[0]
}

func (x EnodebD_CSFBRat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnodebD_CSFBRat.Descriptor instead.
func (EnodebD_CSFBRat) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0, 0}
}

type PipelineD_NetworkServices int32

const (
	// Deprecated: Do not use.
	PipelineD_METERING    PipelineD_NetworkServices = 0 // deprecated
	PipelineD_DPI         PipelineD_NetworkServices = 1
	PipelineD_ENFORCEMENT PipelineD_NetworkServices = 2
)

// Enum value maps for PipelineD_NetworkServices.
var (
	PipelineD_NetworkServices_name = map[int32]string{
		0: "METERING",
		1: "DPI",
		2: "ENFORCEMENT",
	}
	PipelineD_NetworkServices_value = map[string]int32{
		"METERING":    0,
		"DPI":         1,
		"ENFORCEMENT": 2,
	}
)

func (x PipelineD_NetworkServices) Enum() *PipelineD_NetworkServices {
	p := new(PipelineD_NetworkServices)
	*p = x
	return p
}

func (x PipelineD_NetworkServices) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineD_NetworkServices) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[1].Descriptor()
}

func (PipelineD_NetworkServices) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[1]
}

func (x PipelineD_NetworkServices) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineD_NetworkServices.Descriptor instead.
func (PipelineD_NetworkServices) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1, 0}
}

type WalletExhaustDetection_Method int32

const (
	// If # of Gx Tracked Rules are > 0, then the wallet is still valid
	WalletExhaustDetection_GxTrackedRules WalletExhaustDetection_Method = 0
)

// Enum value maps for WalletExhaustDetection_Method.
var (
	WalletExhaustDetection_Method_name = map[int32]string{
		0: "GxTrackedRules",
	}
	WalletExhaustDetection_Method_value = map[string]int32{
		"GxTrackedRules": 0,
	}
)

func (x WalletExhaustDetection_Method) Enum() *WalletExhaustDetection_Method {
	p := new(WalletExhaustDetection_Method)
	*p = x
	return p
}

func (x WalletExhaustDetection_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletExhaustDetection_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[2].Descriptor()
}

func (WalletExhaustDetection_Method) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[2]
}

func (x WalletExhaustDetection_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletExhaustDetection_Method.Descriptor instead.
func (WalletExhaustDetection_Method) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{3, 0}
}

// UE allocator type.
type MobilityD_IpAllocatorType int32

const (
	MobilityD_IP_POOL MobilityD_IpAllocatorType = 0
	MobilityD_DHCP    MobilityD_IpAllocatorType = 1
)

// Enum value maps for MobilityD_IpAllocatorType.
var (
	MobilityD_IpAllocatorType_name = map[int32]string{
		0: "IP_POOL",
		1: "DHCP",
	}
	MobilityD_IpAllocatorType_value = map[string]int32{
		"IP_POOL": 0,
		"DHCP":    1,
	}
)

func (x MobilityD_IpAllocatorType) Enum() *MobilityD_IpAllocatorType {
	p := new(MobilityD_IpAllocatorType)
	*p = x
	return p
}

func (x MobilityD_IpAllocatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MobilityD_IpAllocatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[3].Descriptor()
}

func (MobilityD_IpAllocatorType) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[3]
}

func (x MobilityD_IpAllocatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MobilityD_IpAllocatorType.Descriptor instead.
func (MobilityD_IpAllocatorType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{6, 0}
}

// (0)Turning off NonEPS service, (1)Both CSFB and SMS, (2)only SMS
type MME_NonEPSServiceControl int32

const (
	MME_NON_EPS_SERVICE_CONTROL_OFF      MME_NonEPSServiceControl = 0
	MME_NON_EPS_SERVICE_CONTROL_CSFB_SMS MME_NonEPSServiceControl = 1
	MME_NON_EPS_SERVICE_CONTROL_SMS      MME_NonEPSServiceControl = 2
)

// Enum value maps for MME_NonEPSServiceControl.
var (
	MME_NonEPSServiceControl_name = map[int32]string{
		0: "NON_EPS_SERVICE_CONTROL_OFF",
		1: "NON_EPS_SERVICE_CONTROL_CSFB_SMS",
		2: "NON_EPS_SERVICE_CONTROL_SMS",
	}
	MME_NonEPSServiceControl_value = map[string]int32{
		"NON_EPS_SERVICE_CONTROL_OFF":      0,
		"NON_EPS_SERVICE_CONTROL_CSFB_SMS": 1,
		"NON_EPS_SERVICE_CONTROL_SMS":      2,
	}
)

func (x MME_NonEPSServiceControl) Enum() *MME_NonEPSServiceControl {
	p := new(MME_NonEPSServiceControl)
	*p = x
	return p
}

func (x MME_NonEPSServiceControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MME_NonEPSServiceControl) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[4].Descriptor()
}

func (MME_NonEPSServiceControl) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[4]
}

func (x MME_NonEPSServiceControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MME_NonEPSServiceControl.Descriptor instead.
func (MME_NonEPSServiceControl) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{7, 0}
}

//------------------------------------------------------------------------------
// EnodebD configs
//------------------------------------------------------------------------------
type EnodebD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Physical cell ID (0-504)
	Pci int32 `protobuf:"varint,2,opt,name=pci,proto3" json:"pci,omitempty"`
	// Frequency channel number. See niviuk.free.fr/lte_band.php for mapping to
	// frequency
	Earfcndl int32 `protobuf:"varint,3,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	// Bandwidth in MHz, from set {1.4, 3, 5, 10, 15, 20}
	BandwidthMhz int32 `protobuf:"varint,4,opt,name=bandwidth_mhz,json=bandwidthMhz,proto3" json:"bandwidth_mhz,omitempty"`
	// Network operator identifier.
	PlmnidList string `protobuf:"bytes,5,opt,name=plmnid_list,json=plmnidList,proto3" json:"plmnid_list,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SubframeAssignment int32 `protobuf:"varint,6,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SpecialSubframePattern int32 `protobuf:"varint,7,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
	// Enable eNodeB
	AllowEnodebTransmit bool `protobuf:"varint,8,opt,name=allow_enodeb_transmit,json=allowEnodebTransmit,proto3" json:"allow_enodeb_transmit,omitempty"`
	// Tracking area code. 16-bit
	Tac int32 `protobuf:"varint,9,opt,name=tac,proto3" json:"tac,omitempty"`
	// RAT type (2G/3G), used by eNB
	CsfbRat EnodebD_CSFBRat `protobuf:"varint,10,opt,name=csfb_rat,json=csfbRat,proto3,enum=magma.mconfig.EnodebD_CSFBRat" json:"csfb_rat,omitempty"`
	// 2G RAT frequencies /ARFCNs for redirection, used by eNB
	Arfcn_2G           []int32                          `protobuf:"varint,11,rep,packed,name=arfcn_2g,json=arfcn2g,proto3" json:"arfcn_2g,omitempty"`
	TddConfig          *EnodebD_TDDConfig               `protobuf:"bytes,12,opt,name=tdd_config,json=tddConfig,proto3" json:"tdd_config,omitempty"`
	FddConfig          *EnodebD_FDDConfig               `protobuf:"bytes,13,opt,name=fdd_config,json=fddConfig,proto3" json:"fdd_config,omitempty"`
	EnbConfigsBySerial map[string]*EnodebD_EnodebConfig `protobuf:"bytes,14,rep,name=enb_configs_by_serial,json=enbConfigsBySerial,proto3" json:"enb_configs_by_serial,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EnodebD) Reset() {
	*x = EnodebD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebD) ProtoMessage() {}

func (x *EnodebD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebD.ProtoReflect.Descriptor instead.
func (*EnodebD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0}
}

func (x *EnodebD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *EnodebD) GetPci() int32 {
	if x != nil {
		return x.Pci
	}
	return 0
}

func (x *EnodebD) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *EnodebD) GetBandwidthMhz() int32 {
	if x != nil {
		return x.BandwidthMhz
	}
	return 0
}

func (x *EnodebD) GetPlmnidList() string {
	if x != nil {
		return x.PlmnidList
	}
	return ""
}

func (x *EnodebD) GetSubframeAssignment() int32 {
	if x != nil {
		return x.SubframeAssignment
	}
	return 0
}

func (x *EnodebD) GetSpecialSubframePattern() int32 {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return 0
}

func (x *EnodebD) GetAllowEnodebTransmit() bool {
	if x != nil {
		return x.AllowEnodebTransmit
	}
	return false
}

func (x *EnodebD) GetTac() int32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *EnodebD) GetCsfbRat() EnodebD_CSFBRat {
	if x != nil {
		return x.CsfbRat
	}
	return EnodebD_CSFBRAT_2G
}

func (x *EnodebD) GetArfcn_2G() []int32 {
	if x != nil {
		return x.Arfcn_2G
	}
	return nil
}

func (x *EnodebD) GetTddConfig() *EnodebD_TDDConfig {
	if x != nil {
		return x.TddConfig
	}
	return nil
}

func (x *EnodebD) GetFddConfig() *EnodebD_FDDConfig {
	if x != nil {
		return x.FddConfig
	}
	return nil
}

func (x *EnodebD) GetEnbConfigsBySerial() map[string]*EnodebD_EnodebConfig {
	if x != nil {
		return x.EnbConfigsBySerial
	}
	return nil
}

//------------------------------------------------------------------------------
// PipelineD configs
//------------------------------------------------------------------------------
type PipelineD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Range of IPs allocated to UEs
	UeIpBlock string `protobuf:"bytes,2,opt,name=ue_ip_block,json=ueIpBlock,proto3" json:"ue_ip_block,omitempty"`
	// Whether NAT is enabled
	NatEnabled bool `protobuf:"varint,3,opt,name=nat_enabled,json=natEnabled,proto3" json:"nat_enabled,omitempty"`
	// repeated PolicyRule policy_rules = 5; // Policies have moved to policydb.proto
	DefaultRuleId            string                      `protobuf:"bytes,6,opt,name=default_rule_id,json=defaultRuleId,proto3" json:"default_rule_id,omitempty"` // This should match a rule id in policy_rules
	Services                 []PipelineD_NetworkServices `protobuf:"varint,8,rep,packed,name=services,proto3,enum=magma.mconfig.PipelineD_NetworkServices" json:"services,omitempty"`
	AllowedGrePeers          []*PipelineD_AllowedGrePeer `protobuf:"bytes,9,rep,name=allowed_gre_peers,json=allowedGrePeers,proto3" json:"allowed_gre_peers,omitempty"`
	IpdrExportDst            *PipelineD_IPDRExportDst    `protobuf:"bytes,10,opt,name=ipdr_export_dst,json=ipdrExportDst,proto3" json:"ipdr_export_dst,omitempty"`
	LiUes                    *PipelineD_LiUes            `protobuf:"bytes,12,opt,name=li_ues,json=liUes,proto3" json:"li_ues,omitempty"`
	SgiManagementIfaceVlan   string                      `protobuf:"bytes,13,opt,name=sgi_management_iface_vlan,json=sgiManagementIfaceVlan,proto3" json:"sgi_management_iface_vlan,omitempty"`
	SgiManagementIfaceIpAddr string                      `protobuf:"bytes,14,opt,name=sgi_management_iface_ip_addr,json=sgiManagementIfaceIpAddr,proto3" json:"sgi_management_iface_ip_addr,omitempty"`
}

func (x *PipelineD) Reset() {
	*x = PipelineD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineD) ProtoMessage() {}

func (x *PipelineD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineD.ProtoReflect.Descriptor instead.
func (*PipelineD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *PipelineD) GetUeIpBlock() string {
	if x != nil {
		return x.UeIpBlock
	}
	return ""
}

func (x *PipelineD) GetNatEnabled() bool {
	if x != nil {
		return x.NatEnabled
	}
	return false
}

func (x *PipelineD) GetDefaultRuleId() string {
	if x != nil {
		return x.DefaultRuleId
	}
	return ""
}

func (x *PipelineD) GetServices() []PipelineD_NetworkServices {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *PipelineD) GetAllowedGrePeers() []*PipelineD_AllowedGrePeer {
	if x != nil {
		return x.AllowedGrePeers
	}
	return nil
}

func (x *PipelineD) GetIpdrExportDst() *PipelineD_IPDRExportDst {
	if x != nil {
		return x.IpdrExportDst
	}
	return nil
}

func (x *PipelineD) GetLiUes() *PipelineD_LiUes {
	if x != nil {
		return x.LiUes
	}
	return nil
}

func (x *PipelineD) GetSgiManagementIfaceVlan() string {
	if x != nil {
		return x.SgiManagementIfaceVlan
	}
	return ""
}

func (x *PipelineD) GetSgiManagementIfaceIpAddr() string {
	if x != nil {
		return x.SgiManagementIfaceIpAddr
	}
	return ""
}

//------------------------------------------------------------------------------
// SessionD configs
//------------------------------------------------------------------------------
type SessionD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// DEPRECATED
	// Enable forwarding S6a related requests to Federated GW
	RelayEnabled           bool                    `protobuf:"varint,2,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	WalletExhaustDetection *WalletExhaustDetection `protobuf:"bytes,3,opt,name=wallet_exhaust_detection,json=walletExhaustDetection,proto3" json:"wallet_exhaust_detection,omitempty"`
	// Enable relaying Gx/Gy messages via FeG RPC
	GxGyRelayEnabled bool `protobuf:"varint,4,opt,name=gx_gy_relay_enabled,json=gxGyRelayEnabled,proto3" json:"gx_gy_relay_enabled,omitempty"`
}

func (x *SessionD) Reset() {
	*x = SessionD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionD) ProtoMessage() {}

func (x *SessionD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionD.ProtoReflect.Descriptor instead.
func (*SessionD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2}
}

func (x *SessionD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *SessionD) GetRelayEnabled() bool {
	if x != nil {
		return x.RelayEnabled
	}
	return false
}

func (x *SessionD) GetWalletExhaustDetection() *WalletExhaustDetection {
	if x != nil {
		return x.WalletExhaustDetection
	}
	return nil
}

func (x *SessionD) GetGxGyRelayEnabled() bool {
	if x != nil {
		return x.GxGyRelayEnabled
	}
	return false
}

type WalletExhaustDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable the feature where session is terminated on wallet exhaust
	TerminateOnExhaust bool `protobuf:"varint,1,opt,name=terminate_on_exhaust,json=terminateOnExhaust,proto3" json:"terminate_on_exhaust,omitempty"`
	// How wallet exhast is detected on SessionD
	Method WalletExhaustDetection_Method `protobuf:"varint,2,opt,name=method,proto3,enum=magma.mconfig.WalletExhaustDetection_Method" json:"method,omitempty"`
	// How long to wait before terminating a out-of-wallet subscriber on attach
	TimeoutMs uint32 `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
}

func (x *WalletExhaustDetection) Reset() {
	*x = WalletExhaustDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletExhaustDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletExhaustDetection) ProtoMessage() {}

func (x *WalletExhaustDetection) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletExhaustDetection.ProtoReflect.Descriptor instead.
func (*WalletExhaustDetection) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{3}
}

func (x *WalletExhaustDetection) GetTerminateOnExhaust() bool {
	if x != nil {
		return x.TerminateOnExhaust
	}
	return false
}

func (x *WalletExhaustDetection) GetMethod() WalletExhaustDetection_Method {
	if x != nil {
		return x.Method
	}
	return WalletExhaustDetection_GxTrackedRules
}

func (x *WalletExhaustDetection) GetTimeoutMs() uint32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

//------------------------------------------------------------------------------
// PolicyDB configs
//------------------------------------------------------------------------------
type PolicyDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *PolicyDB) Reset() {
	*x = PolicyDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDB) ProtoMessage() {}

func (x *PolicyDB) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDB.ProtoReflect.Descriptor instead.
func (*PolicyDB) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyDB) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// RedirectD configs
//------------------------------------------------------------------------------
type RedirectD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *RedirectD) Reset() {
	*x = RedirectD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectD) ProtoMessage() {}

func (x *RedirectD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectD.ProtoReflect.Descriptor instead.
func (*RedirectD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{5}
}

func (x *RedirectD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// MobilityD configs
//------------------------------------------------------------------------------
type MobilityD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// An IP block is a range of IP addresses specified by a network address and
	// a prefix-length of the netmask. For example,
	//    IPv4 IP block:      "192.168.0.0/24"
	//    IPv6 IP block:      "2401:db00:1116:301b::/64"
	IpBlock string `protobuf:"bytes,2,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	// ip allocation type, either dhcp or ip_pool
	// default is ip_pool
	IpAllocatorType MobilityD_IpAllocatorType `protobuf:"varint,3,opt,name=ip_allocator_type,json=ipAllocatorType,proto3,enum=magma.mconfig.MobilityD_IpAllocatorType" json:"ip_allocator_type,omitempty"`
	// Enable Static IP from subscriberDB
	StaticIpEnabled bool `protobuf:"varint,4,opt,name=static_ip_enabled,json=staticIpEnabled,proto3" json:"static_ip_enabled,omitempty"`
	// Enable multi APN IP allocation
	MultiApnIpAlloc bool `protobuf:"varint,5,opt,name=multi_apn_ip_alloc,json=multiApnIpAlloc,proto3" json:"multi_apn_ip_alloc,omitempty"`
}

func (x *MobilityD) Reset() {
	*x = MobilityD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityD) ProtoMessage() {}

func (x *MobilityD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityD.ProtoReflect.Descriptor instead.
func (*MobilityD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{6}
}

func (x *MobilityD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *MobilityD) GetIpBlock() string {
	if x != nil {
		return x.IpBlock
	}
	return ""
}

func (x *MobilityD) GetIpAllocatorType() MobilityD_IpAllocatorType {
	if x != nil {
		return x.IpAllocatorType
	}
	return MobilityD_IP_POOL
}

func (x *MobilityD) GetStaticIpEnabled() bool {
	if x != nil {
		return x.StaticIpEnabled
	}
	return false
}

func (x *MobilityD) GetMultiApnIpAlloc() bool {
	if x != nil {
		return x.MultiApnIpAlloc
	}
	return false
}

//------------------------------------------------------------------------------
// MME configs
//------------------------------------------------------------------------------
type MME struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Mobile country code
	Mcc string `protobuf:"bytes,2,opt,name=mcc,proto3" json:"mcc,omitempty"`
	// Mobile network code
	Mnc string `protobuf:"bytes,3,opt,name=mnc,proto3" json:"mnc,omitempty"`
	// [deprecated] Tracking area code. 16-bit
	// Is overrideen by field 15
	Tac int32 `protobuf:"varint,4,opt,name=tac,proto3" json:"tac,omitempty"`
	// MME group identifier - unique within a PLMN. 16-bit
	MmeGid int32 `protobuf:"varint,5,opt,name=mme_gid,json=mmeGid,proto3" json:"mme_gid,omitempty"`
	// MME code - unique within an MME group. 8-bit
	MmeCode int32 `protobuf:"varint,6,opt,name=mme_code,json=mmeCode,proto3" json:"mme_code,omitempty"`
	// Enable DNS Caching. Will be filled by DnsD
	EnableDnsCaching bool `protobuf:"varint,7,opt,name=enable_dns_caching,json=enableDnsCaching,proto3" json:"enable_dns_caching,omitempty"`
	// DEPRECATED
	// Enable credit control tracking with OCS and forwarding S6a related
	// requests to Federated GW
	RelayEnabled bool `protobuf:"varint,8,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	// For indicating one of the three modes
	NonEpsServiceControl MME_NonEPSServiceControl `protobuf:"varint,9,opt,name=non_eps_service_control,json=nonEpsServiceControl,proto3,enum=magma.mconfig.MME_NonEPSServiceControl" json:"non_eps_service_control,omitempty"`
	// Mobile country code for CSFB
	CsfbMcc string `protobuf:"bytes,10,opt,name=csfb_mcc,json=csfbMcc,proto3" json:"csfb_mcc,omitempty"`
	// Mobile network code for CSFB
	CsfbMnc string `protobuf:"bytes,11,opt,name=csfb_mnc,json=csfbMnc,proto3" json:"csfb_mnc,omitempty"`
	// Location area code. 16-bit
	Lac int32 `protobuf:"varint,12,opt,name=lac,proto3" json:"lac,omitempty"`
	// If relay_enabled is false, this determines whether cloud subscriberdb
	// or local subscriberdb is used for authentication requests.
	CloudSubscriberdbEnabled bool `protobuf:"varint,14,opt,name=cloud_subscriberdb_enabled,json=cloudSubscriberdbEnabled,proto3" json:"cloud_subscriberdb_enabled,omitempty"`
	// The Tracking Area Code of every connected eNodeB needs to be
	// registered the MME.
	// Overrides field 4 if this is not empty. Field 4 is in the process of
	// being deprecated
	AttachedEnodebTacs []int32 `protobuf:"varint,15,rep,packed,name=attached_enodeb_tacs,json=attachedEnodebTacs,proto3" json:"attached_enodeb_tacs,omitempty"`
	// Primary DNS server
	DnsPrimary string `protobuf:"bytes,20,opt,name=dns_primary,json=dnsPrimary,proto3" json:"dns_primary,omitempty"`
	// Secondary DNS server
	DnsSecondary string `protobuf:"bytes,21,opt,name=dns_secondary,json=dnsSecondary,proto3" json:"dns_secondary,omitempty"`
	// Whether NAT is enabled
	NatEnabled bool `protobuf:"varint,22,opt,name=nat_enabled,json=natEnabled,proto3" json:"nat_enabled,omitempty"`
	// Enable relaying S6a messages via FeG RPC
	HssRelayEnabled bool `protobuf:"varint,23,opt,name=hss_relay_enabled,json=hssRelayEnabled,proto3" json:"hss_relay_enabled,omitempty"`
	// Apn Correction feature
	EnableApnCorrection  bool                    `protobuf:"varint,24,opt,name=enable_apn_correction,json=enableApnCorrection,proto3" json:"enable_apn_correction,omitempty"`
	ApnCorrectionMapList []*MME_ApnCorrectionMap `protobuf:"bytes,25,rep,name=apn_correction_map_list,json=apnCorrectionMapList,proto3" json:"apn_correction_map_list,omitempty"`
}

func (x *MME) Reset() {
	*x = MME{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MME) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MME) ProtoMessage() {}

func (x *MME) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MME.ProtoReflect.Descriptor instead.
func (*MME) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{7}
}

func (x *MME) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *MME) GetMcc() string {
	if x != nil {
		return x.Mcc
	}
	return ""
}

func (x *MME) GetMnc() string {
	if x != nil {
		return x.Mnc
	}
	return ""
}

func (x *MME) GetTac() int32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *MME) GetMmeGid() int32 {
	if x != nil {
		return x.MmeGid
	}
	return 0
}

func (x *MME) GetMmeCode() int32 {
	if x != nil {
		return x.MmeCode
	}
	return 0
}

func (x *MME) GetEnableDnsCaching() bool {
	if x != nil {
		return x.EnableDnsCaching
	}
	return false
}

func (x *MME) GetRelayEnabled() bool {
	if x != nil {
		return x.RelayEnabled
	}
	return false
}

func (x *MME) GetNonEpsServiceControl() MME_NonEPSServiceControl {
	if x != nil {
		return x.NonEpsServiceControl
	}
	return MME_NON_EPS_SERVICE_CONTROL_OFF
}

func (x *MME) GetCsfbMcc() string {
	if x != nil {
		return x.CsfbMcc
	}
	return ""
}

func (x *MME) GetCsfbMnc() string {
	if x != nil {
		return x.CsfbMnc
	}
	return ""
}

func (x *MME) GetLac() int32 {
	if x != nil {
		return x.Lac
	}
	return 0
}

func (x *MME) GetCloudSubscriberdbEnabled() bool {
	if x != nil {
		return x.CloudSubscriberdbEnabled
	}
	return false
}

func (x *MME) GetAttachedEnodebTacs() []int32 {
	if x != nil {
		return x.AttachedEnodebTacs
	}
	return nil
}

func (x *MME) GetDnsPrimary() string {
	if x != nil {
		return x.DnsPrimary
	}
	return ""
}

func (x *MME) GetDnsSecondary() string {
	if x != nil {
		return x.DnsSecondary
	}
	return ""
}

func (x *MME) GetNatEnabled() bool {
	if x != nil {
		return x.NatEnabled
	}
	return false
}

func (x *MME) GetHssRelayEnabled() bool {
	if x != nil {
		return x.HssRelayEnabled
	}
	return false
}

func (x *MME) GetEnableApnCorrection() bool {
	if x != nil {
		return x.EnableApnCorrection
	}
	return false
}

func (x *MME) GetApnCorrectionMapList() []*MME_ApnCorrectionMap {
	if x != nil {
		return x.ApnCorrectionMapList
	}
	return nil
}

//------------------------------------------------------------------------------
// SubscriberDB configs
//------------------------------------------------------------------------------
type SubscriberDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Operator configuration field for LTE
	LteAuthOp []byte `protobuf:"bytes,2,opt,name=lte_auth_op,json=lteAuthOp,proto3" json:"lte_auth_op,omitempty"`
	// Authentication management field for LTE
	LteAuthAmf  []byte                                       `protobuf:"bytes,3,opt,name=lte_auth_amf,json=lteAuthAmf,proto3" json:"lte_auth_amf,omitempty"`
	SubProfiles map[string]*SubscriberDB_SubscriptionProfile `protobuf:"bytes,4,rep,name=sub_profiles,json=subProfiles,proto3" json:"sub_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DEPRECATED
	// Enable forwarding S6a related requests to Federated GW
	RelayEnabled bool `protobuf:"varint,5,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	// Enable relaying S6a messages via FeG RPC
	HssRelayEnabled bool `protobuf:"varint,6,opt,name=hss_relay_enabled,json=hssRelayEnabled,proto3" json:"hss_relay_enabled,omitempty"`
}

func (x *SubscriberDB) Reset() {
	*x = SubscriberDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberDB) ProtoMessage() {}

func (x *SubscriberDB) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberDB.ProtoReflect.Descriptor instead.
func (*SubscriberDB) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8}
}

func (x *SubscriberDB) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *SubscriberDB) GetLteAuthOp() []byte {
	if x != nil {
		return x.LteAuthOp
	}
	return nil
}

func (x *SubscriberDB) GetLteAuthAmf() []byte {
	if x != nil {
		return x.LteAuthAmf
	}
	return nil
}

func (x *SubscriberDB) GetSubProfiles() map[string]*SubscriberDB_SubscriptionProfile {
	if x != nil {
		return x.SubProfiles
	}
	return nil
}

func (x *SubscriberDB) GetRelayEnabled() bool {
	if x != nil {
		return x.RelayEnabled
	}
	return false
}

func (x *SubscriberDB) GetHssRelayEnabled() bool {
	if x != nil {
		return x.HssRelayEnabled
	}
	return false
}

//------------------------------------------------------------------------------
// LighttpD configs
//------------------------------------------------------------------------------
type LighttpD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel      protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	EnableCaching bool            `protobuf:"varint,2,opt,name=enable_caching,json=enableCaching,proto3" json:"enable_caching,omitempty"`
}

func (x *LighttpD) Reset() {
	*x = LighttpD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LighttpD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LighttpD) ProtoMessage() {}

func (x *LighttpD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LighttpD.ProtoReflect.Descriptor instead.
func (*LighttpD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{9}
}

func (x *LighttpD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *LighttpD) GetEnableCaching() bool {
	if x != nil {
		return x.EnableCaching
	}
	return false
}

//------------------------------------------------------------------------------
// MonitorD configs
//------------------------------------------------------------------------------
type MonitorD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel        protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	PollingInterval int32           `protobuf:"varint,60,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
}

func (x *MonitorD) Reset() {
	*x = MonitorD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorD) ProtoMessage() {}

func (x *MonitorD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorD.ProtoReflect.Descriptor instead.
func (*MonitorD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{10}
}

func (x *MonitorD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *MonitorD) GetPollingInterval() int32 {
	if x != nil {
		return x.PollingInterval
	}
	return 0
}

//------------------------------------------------------------------------------
// DPID configs
//------------------------------------------------------------------------------
type DPID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *DPID) Reset() {
	*x = DPID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPID) ProtoMessage() {}

func (x *DPID) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPID.ProtoReflect.Descriptor instead.
func (*DPID) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{11}
}

func (x *DPID) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// DnsD configs
//------------------------------------------------------------------------------
type DnsD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel          protos.LogLevel                 `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	EnableCaching     bool                            `protobuf:"varint,2,opt,name=enable_caching,json=enableCaching,proto3" json:"enable_caching,omitempty"`
	LocalTTL          int32                           `protobuf:"varint,3,opt,name=localTTL,proto3" json:"localTTL,omitempty"`
	Records           []*GatewayDNSConfigRecordsItems `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
	DhcpServerEnabled bool                            `protobuf:"varint,5,opt,name=dhcp_server_enabled,json=dhcpServerEnabled,proto3" json:"dhcp_server_enabled,omitempty"`
}

func (x *DnsD) Reset() {
	*x = DnsD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsD) ProtoMessage() {}

func (x *DnsD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsD.ProtoReflect.Descriptor instead.
func (*DnsD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{12}
}

func (x *DnsD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *DnsD) GetEnableCaching() bool {
	if x != nil {
		return x.EnableCaching
	}
	return false
}

func (x *DnsD) GetLocalTTL() int32 {
	if x != nil {
		return x.LocalTTL
	}
	return 0
}

func (x *DnsD) GetRecords() []*GatewayDNSConfigRecordsItems {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *DnsD) GetDhcpServerEnabled() bool {
	if x != nil {
		return x.DhcpServerEnabled
	}
	return false
}

type GatewayDNSConfigRecordsItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ARecord     []string `protobuf:"bytes,1,rep,name=a_record,json=aRecord,proto3" json:"a_record,omitempty"`
	AaaaRecord  []string `protobuf:"bytes,2,rep,name=aaaa_record,json=aaaaRecord,proto3" json:"aaaa_record,omitempty"`
	CnameRecord []string `protobuf:"bytes,3,rep,name=cname_record,json=cnameRecord,proto3" json:"cname_record,omitempty"`
	Domain      string   `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GatewayDNSConfigRecordsItems) Reset() {
	*x = GatewayDNSConfigRecordsItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayDNSConfigRecordsItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayDNSConfigRecordsItems) ProtoMessage() {}

func (x *GatewayDNSConfigRecordsItems) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayDNSConfigRecordsItems.ProtoReflect.Descriptor instead.
func (*GatewayDNSConfigRecordsItems) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{13}
}

func (x *GatewayDNSConfigRecordsItems) GetARecord() []string {
	if x != nil {
		return x.ARecord
	}
	return nil
}

func (x *GatewayDNSConfigRecordsItems) GetAaaaRecord() []string {
	if x != nil {
		return x.AaaaRecord
	}
	return nil
}

func (x *GatewayDNSConfigRecordsItems) GetCnameRecord() []string {
	if x != nil {
		return x.CnameRecord
	}
	return nil
}

func (x *GatewayDNSConfigRecordsItems) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type EnodebD_FDDConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earfcndl int32 `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	Earfcnul int32 `protobuf:"varint,2,opt,name=earfcnul,proto3" json:"earfcnul,omitempty"`
}

func (x *EnodebD_FDDConfig) Reset() {
	*x = EnodebD_FDDConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebD_FDDConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebD_FDDConfig) ProtoMessage() {}

func (x *EnodebD_FDDConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebD_FDDConfig.ProtoReflect.Descriptor instead.
func (*EnodebD_FDDConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EnodebD_FDDConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *EnodebD_FDDConfig) GetEarfcnul() int32 {
	if x != nil {
		return x.Earfcnul
	}
	return 0
}

type EnodebD_TDDConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earfcndl int32 `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SubframeAssignment int32 `protobuf:"varint,2,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SpecialSubframePattern int32 `protobuf:"varint,3,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
}

func (x *EnodebD_TDDConfig) Reset() {
	*x = EnodebD_TDDConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebD_TDDConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebD_TDDConfig) ProtoMessage() {}

func (x *EnodebD_TDDConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebD_TDDConfig.ProtoReflect.Descriptor instead.
func (*EnodebD_TDDConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EnodebD_TDDConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *EnodebD_TDDConfig) GetSubframeAssignment() int32 {
	if x != nil {
		return x.SubframeAssignment
	}
	return 0
}

func (x *EnodebD_TDDConfig) GetSpecialSubframePattern() int32 {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return 0
}

type EnodebD_EnodebConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-unique serial ID. Used to identify the eNodeB, and ties the
	// config to that device
	Earfcndl               int32  `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	SubframeAssignment     int32  `protobuf:"varint,2,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	SpecialSubframePattern int32  `protobuf:"varint,3,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
	Pci                    int32  `protobuf:"varint,4,opt,name=pci,proto3" json:"pci,omitempty"`
	TransmitEnabled        bool   `protobuf:"varint,5,opt,name=transmit_enabled,json=transmitEnabled,proto3" json:"transmit_enabled,omitempty"`
	DeviceClass            string `protobuf:"bytes,6,opt,name=device_class,json=deviceClass,proto3" json:"device_class,omitempty"`
	BandwidthMhz           int32  `protobuf:"varint,7,opt,name=bandwidth_mhz,json=bandwidthMhz,proto3" json:"bandwidth_mhz,omitempty"`
	Tac                    int32  `protobuf:"varint,8,opt,name=tac,proto3" json:"tac,omitempty"`
	CellId                 int32  `protobuf:"varint,9,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *EnodebD_EnodebConfig) Reset() {
	*x = EnodebD_EnodebConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebD_EnodebConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebD_EnodebConfig) ProtoMessage() {}

func (x *EnodebD_EnodebConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebD_EnodebConfig.ProtoReflect.Descriptor instead.
func (*EnodebD_EnodebConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0, 2}
}

func (x *EnodebD_EnodebConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetSubframeAssignment() int32 {
	if x != nil {
		return x.SubframeAssignment
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetSpecialSubframePattern() int32 {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetPci() int32 {
	if x != nil {
		return x.Pci
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetTransmitEnabled() bool {
	if x != nil {
		return x.TransmitEnabled
	}
	return false
}

func (x *EnodebD_EnodebConfig) GetDeviceClass() string {
	if x != nil {
		return x.DeviceClass
	}
	return ""
}

func (x *EnodebD_EnodebConfig) GetBandwidthMhz() int32 {
	if x != nil {
		return x.BandwidthMhz
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetTac() int32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetCellId() int32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type PipelineD_AllowedGrePeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip  string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Key uint32 `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PipelineD_AllowedGrePeer) Reset() {
	*x = PipelineD_AllowedGrePeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineD_AllowedGrePeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineD_AllowedGrePeer) ProtoMessage() {}

func (x *PipelineD_AllowedGrePeer) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineD_AllowedGrePeer.ProtoReflect.Descriptor instead.
func (*PipelineD_AllowedGrePeer) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PipelineD_AllowedGrePeer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PipelineD_AllowedGrePeer) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type PipelineD_IPDRExportDst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *PipelineD_IPDRExportDst) Reset() {
	*x = PipelineD_IPDRExportDst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineD_IPDRExportDst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineD_IPDRExportDst) ProtoMessage() {}

func (x *PipelineD_IPDRExportDst) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineD_IPDRExportDst.ProtoReflect.Descriptor instead.
func (*PipelineD_IPDRExportDst) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1, 1}
}

func (x *PipelineD_IPDRExportDst) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PipelineD_IPDRExportDst) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PipelineD_LiUes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsis   []string `protobuf:"bytes,1,rep,name=imsis,proto3" json:"imsis,omitempty"`
	Msisdns []string `protobuf:"bytes,2,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
	Macs    []string `protobuf:"bytes,3,rep,name=macs,proto3" json:"macs,omitempty"`
	Ips     []string `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *PipelineD_LiUes) Reset() {
	*x = PipelineD_LiUes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineD_LiUes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineD_LiUes) ProtoMessage() {}

func (x *PipelineD_LiUes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineD_LiUes.ProtoReflect.Descriptor instead.
func (*PipelineD_LiUes) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1, 2}
}

func (x *PipelineD_LiUes) GetImsis() []string {
	if x != nil {
		return x.Imsis
	}
	return nil
}

func (x *PipelineD_LiUes) GetMsisdns() []string {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *PipelineD_LiUes) GetMacs() []string {
	if x != nil {
		return x.Macs
	}
	return nil
}

func (x *PipelineD_LiUes) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type MME_ApnCorrectionMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImsiPrefix  string `protobuf:"bytes,1,opt,name=imsi_prefix,json=imsiPrefix,proto3" json:"imsi_prefix,omitempty"`
	ApnOverride string `protobuf:"bytes,2,opt,name=apn_override,json=apnOverride,proto3" json:"apn_override,omitempty"`
}

func (x *MME_ApnCorrectionMap) Reset() {
	*x = MME_ApnCorrectionMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MME_ApnCorrectionMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MME_ApnCorrectionMap) ProtoMessage() {}

func (x *MME_ApnCorrectionMap) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MME_ApnCorrectionMap.ProtoReflect.Descriptor instead.
func (*MME_ApnCorrectionMap) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{7, 0}
}

func (x *MME_ApnCorrectionMap) GetImsiPrefix() string {
	if x != nil {
		return x.ImsiPrefix
	}
	return ""
}

func (x *MME_ApnCorrectionMap) GetApnOverride() string {
	if x != nil {
		return x.ApnOverride
	}
	return ""
}

type SubscriberDB_SubscriptionProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum uplink bit rate (AMBR-UL)
	MaxUlBitRate uint64 `protobuf:"varint,1,opt,name=max_ul_bit_rate,json=maxUlBitRate,proto3" json:"max_ul_bit_rate,omitempty"`
	// Maximum downlink bit rate (AMBR-DL)
	MaxDlBitRate uint64 `protobuf:"varint,2,opt,name=max_dl_bit_rate,json=maxDlBitRate,proto3" json:"max_dl_bit_rate,omitempty"`
}

func (x *SubscriberDB_SubscriptionProfile) Reset() {
	*x = SubscriberDB_SubscriptionProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberDB_SubscriptionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberDB_SubscriptionProfile) ProtoMessage() {}

func (x *SubscriberDB_SubscriptionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberDB_SubscriptionProfile.ProtoReflect.Descriptor instead.
func (*SubscriberDB_SubscriptionProfile) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SubscriberDB_SubscriptionProfile) GetMaxUlBitRate() uint64 {
	if x != nil {
		return x.MaxUlBitRate
	}
	return 0
}

func (x *SubscriberDB_SubscriptionProfile) GetMaxDlBitRate() uint64 {
	if x != nil {
		return x.MaxDlBitRate
	}
	return 0
}

var File_lte_protos_mconfig_mconfigs_proto protoreflect.FileDescriptor

var file_lte_protos_mconfig_mconfigs_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x0a,
	0x0a, 0x07, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x63, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x63, 0x69, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x68, 0x7a,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x6d, 0x6e, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x6d, 0x6e, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74,
	0x61, 0x63, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x73, 0x66, 0x62, 0x5f, 0x72, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x44, 0x2e, 0x43, 0x53, 0x46,
	0x42, 0x52, 0x61, 0x74, 0x52, 0x07, 0x63, 0x73, 0x66, 0x62, 0x52, 0x61, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x5f, 0x32, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x32, 0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x64, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x6f,
	0x64, 0x65, 0x62, 0x44, 0x2e, 0x54, 0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09,
	0x74, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x64, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e,
	0x6f, 0x64, 0x65, 0x62, 0x44, 0x2e, 0x46, 0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x09, 0x66, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x15, 0x65, 0x6e,
	0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x44, 0x2e, 0x45, 0x6e, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x65, 0x6e, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x1a, 0x43, 0x0a,
	0x09, 0x46, 0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61,
	0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61,
	0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e,
	0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e,
	0x75, 0x6c, 0x1a, 0x92, 0x01, 0x0a, 0x09, 0x54, 0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x1a, 0xc5, 0x02, 0x0a, 0x0c, 0x45, 0x6e, 0x6f, 0x64,
	0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66,
	0x63, 0x6e, 0x64, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66,
	0x63, 0x6e, 0x64, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x63,
	0x69, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x68, 0x7a,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x4d, 0x68, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x1a,
	0x6a, 0x0a, 0x17, 0x45, 0x6e, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x6f, 0x64,
	0x65, 0x62, 0x44, 0x2e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x07, 0x43,
	0x53, 0x46, 0x42, 0x52, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x53, 0x46, 0x42, 0x52, 0x41,
	0x54, 0x5f, 0x32, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x53, 0x46, 0x42, 0x52, 0x41,
	0x54, 0x5f, 0x33, 0x47, 0x10, 0x01, 0x22, 0xd8, 0x06, 0x0a, 0x09, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x65, 0x5f, 0x69,
	0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x65, 0x49, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e,
	0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x47, 0x72, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x47, 0x72, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0f,
	0x69, 0x70, 0x64, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e,
	0x49, 0x50, 0x44, 0x52, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x73, 0x74, 0x52, 0x0d, 0x69,
	0x70, 0x64, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06,
	0x6c, 0x69, 0x5f, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x4c, 0x69, 0x55, 0x65, 0x73, 0x52, 0x05, 0x6c, 0x69,
	0x55, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x67, 0x69, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x67, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x3e,
	0x0a, 0x1c, 0x73, 0x67, 0x69, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x67, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x32,
	0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x72, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x1a, 0x33, 0x0a, 0x0d, 0x49, 0x50, 0x44, 0x52, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x5d, 0x0a, 0x05, 0x4c, 0x69, 0x55, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x73, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x61, 0x63, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x08, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x50, 0x49, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x0b, 0x10,
	0x0c, 0x22, 0xf3, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x32,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x18, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x78, 0x5f, 0x67,
	0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x78, 0x47, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x16, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x45, 0x78, 0x68,
	0x61, 0x75, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x68, 0x61, 0x75,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x10, 0x00, 0x22, 0x3e, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x42, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3f, 0x0a, 0x09, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xb3, 0x02, 0x0a, 0x09, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x2e, 0x49, 0x70, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x70, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x70,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x61, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x6e, 0x49, 0x70, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x22, 0x28, 0x0a, 0x0f, 0x49, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x50, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x48, 0x43, 0x50, 0x10, 0x01, 0x22, 0x89,
	0x08, 0x0a, 0x03, 0x4d, 0x4d, 0x45, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x63,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x6d, 0x65, 0x47, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x6e, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6e, 0x73, 0x43, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x17, 0x6e, 0x6f, 0x6e, 0x5f, 0x65,
	0x70, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x4d, 0x45, 0x2e, 0x4e, 0x6f, 0x6e,
	0x45, 0x50, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x45, 0x70, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x66, 0x62, 0x5f,
	0x6d, 0x63, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x66, 0x62, 0x4d,
	0x63, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x66, 0x62, 0x5f, 0x6d, 0x6e, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x66, 0x62, 0x4d, 0x6e, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x61, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x61, 0x63, 0x12,
	0x3c, 0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x5f, 0x74, 0x61, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x54, 0x61, 0x63, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x68, 0x73, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x6e,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x17, 0x61, 0x70, 0x6e, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x4d, 0x45, 0x2e, 0x41, 0x70, 0x6e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x14, 0x61, 0x70,
	0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x56, 0x0a, 0x10, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x73,
	0x69, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x6e, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x14, 0x4e, 0x6f,
	0x6e, 0x45, 0x50, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x50, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x50, 0x53, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x43,
	0x53, 0x46, 0x42, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x4e,
	0x5f, 0x45, 0x50, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x22, 0xfc, 0x03, 0x0a, 0x0c, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x42, 0x12, 0x32, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1e, 0x0a, 0x0b, 0x6c, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x12,
	0x20, 0x0a, 0x0c, 0x6c, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x6d, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6d,
	0x66, 0x12, 0x4f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x44, 0x42, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x68, 0x73, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x1a, 0x63, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x75, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x55, 0x6c, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44,
	0x6c, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x6f, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x45,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x42, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x08, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x74, 0x70, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x22, 0x69, 0x0a, 0x08, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x12, 0x32, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x3a, 0x0a, 0x04, 0x44,
	0x50, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xf4, 0x01, 0x0a, 0x04, 0x44, 0x6e, 0x73, 0x44,
	0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x54, 0x54, 0x4c, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x68, 0x63,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x95,
	0x01, 0x0a, 0x1c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x61,
	0x61, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x61, 0x61, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x23, 0x5a, 0x21, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f,
	0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_mconfig_mconfigs_proto_rawDescOnce sync.Once
	file_lte_protos_mconfig_mconfigs_proto_rawDescData = file_lte_protos_mconfig_mconfigs_proto_rawDesc
)

func file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP() []byte {
	file_lte_protos_mconfig_mconfigs_proto_rawDescOnce.Do(func() {
		file_lte_protos_mconfig_mconfigs_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_mconfig_mconfigs_proto_rawDescData)
	})
	return file_lte_protos_mconfig_mconfigs_proto_rawDescData
}

var file_lte_protos_mconfig_mconfigs_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_lte_protos_mconfig_mconfigs_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_lte_protos_mconfig_mconfigs_proto_goTypes = []interface{}{
	(EnodebD_CSFBRat)(0),                     // 0: magma.mconfig.EnodebD.CSFBRat
	(PipelineD_NetworkServices)(0),           // 1: magma.mconfig.PipelineD.NetworkServices
	(WalletExhaustDetection_Method)(0),       // 2: magma.mconfig.WalletExhaustDetection.Method
	(MobilityD_IpAllocatorType)(0),           // 3: magma.mconfig.MobilityD.IpAllocatorType
	(MME_NonEPSServiceControl)(0),            // 4: magma.mconfig.MME.NonEPSServiceControl
	(*EnodebD)(nil),                          // 5: magma.mconfig.EnodebD
	(*PipelineD)(nil),                        // 6: magma.mconfig.PipelineD
	(*SessionD)(nil),                         // 7: magma.mconfig.SessionD
	(*WalletExhaustDetection)(nil),           // 8: magma.mconfig.WalletExhaustDetection
	(*PolicyDB)(nil),                         // 9: magma.mconfig.PolicyDB
	(*RedirectD)(nil),                        // 10: magma.mconfig.RedirectD
	(*MobilityD)(nil),                        // 11: magma.mconfig.MobilityD
	(*MME)(nil),                              // 12: magma.mconfig.MME
	(*SubscriberDB)(nil),                     // 13: magma.mconfig.SubscriberDB
	(*LighttpD)(nil),                         // 14: magma.mconfig.LighttpD
	(*MonitorD)(nil),                         // 15: magma.mconfig.MonitorD
	(*DPID)(nil),                             // 16: magma.mconfig.DPID
	(*DnsD)(nil),                             // 17: magma.mconfig.DnsD
	(*GatewayDNSConfigRecordsItems)(nil),     // 18: magma.mconfig.GatewayDNSConfigRecordsItems
	(*EnodebD_FDDConfig)(nil),                // 19: magma.mconfig.EnodebD.FDDConfig
	(*EnodebD_TDDConfig)(nil),                // 20: magma.mconfig.EnodebD.TDDConfig
	(*EnodebD_EnodebConfig)(nil),             // 21: magma.mconfig.EnodebD.EnodebConfig
	nil,                                      // 22: magma.mconfig.EnodebD.EnbConfigsBySerialEntry
	(*PipelineD_AllowedGrePeer)(nil),         // 23: magma.mconfig.PipelineD.AllowedGrePeer
	(*PipelineD_IPDRExportDst)(nil),          // 24: magma.mconfig.PipelineD.IPDRExportDst
	(*PipelineD_LiUes)(nil),                  // 25: magma.mconfig.PipelineD.LiUes
	(*MME_ApnCorrectionMap)(nil),             // 26: magma.mconfig.MME.ApnCorrectionMap
	(*SubscriberDB_SubscriptionProfile)(nil), // 27: magma.mconfig.SubscriberDB.SubscriptionProfile
	nil,                                      // 28: magma.mconfig.SubscriberDB.SubProfilesEntry
	(protos.LogLevel)(0),                     // 29: magma.orc8r.LogLevel
}
var file_lte_protos_mconfig_mconfigs_proto_depIdxs = []int32{
	29, // 0: magma.mconfig.EnodebD.log_level:type_name -> magma.orc8r.LogLevel
	0,  // 1: magma.mconfig.EnodebD.csfb_rat:type_name -> magma.mconfig.EnodebD.CSFBRat
	20, // 2: magma.mconfig.EnodebD.tdd_config:type_name -> magma.mconfig.EnodebD.TDDConfig
	19, // 3: magma.mconfig.EnodebD.fdd_config:type_name -> magma.mconfig.EnodebD.FDDConfig
	22, // 4: magma.mconfig.EnodebD.enb_configs_by_serial:type_name -> magma.mconfig.EnodebD.EnbConfigsBySerialEntry
	29, // 5: magma.mconfig.PipelineD.log_level:type_name -> magma.orc8r.LogLevel
	1,  // 6: magma.mconfig.PipelineD.services:type_name -> magma.mconfig.PipelineD.NetworkServices
	23, // 7: magma.mconfig.PipelineD.allowed_gre_peers:type_name -> magma.mconfig.PipelineD.AllowedGrePeer
	24, // 8: magma.mconfig.PipelineD.ipdr_export_dst:type_name -> magma.mconfig.PipelineD.IPDRExportDst
	25, // 9: magma.mconfig.PipelineD.li_ues:type_name -> magma.mconfig.PipelineD.LiUes
	29, // 10: magma.mconfig.SessionD.log_level:type_name -> magma.orc8r.LogLevel
	8,  // 11: magma.mconfig.SessionD.wallet_exhaust_detection:type_name -> magma.mconfig.WalletExhaustDetection
	2,  // 12: magma.mconfig.WalletExhaustDetection.method:type_name -> magma.mconfig.WalletExhaustDetection.Method
	29, // 13: magma.mconfig.PolicyDB.log_level:type_name -> magma.orc8r.LogLevel
	29, // 14: magma.mconfig.RedirectD.log_level:type_name -> magma.orc8r.LogLevel
	29, // 15: magma.mconfig.MobilityD.log_level:type_name -> magma.orc8r.LogLevel
	3,  // 16: magma.mconfig.MobilityD.ip_allocator_type:type_name -> magma.mconfig.MobilityD.IpAllocatorType
	29, // 17: magma.mconfig.MME.log_level:type_name -> magma.orc8r.LogLevel
	4,  // 18: magma.mconfig.MME.non_eps_service_control:type_name -> magma.mconfig.MME.NonEPSServiceControl
	26, // 19: magma.mconfig.MME.apn_correction_map_list:type_name -> magma.mconfig.MME.ApnCorrectionMap
	29, // 20: magma.mconfig.SubscriberDB.log_level:type_name -> magma.orc8r.LogLevel
	28, // 21: magma.mconfig.SubscriberDB.sub_profiles:type_name -> magma.mconfig.SubscriberDB.SubProfilesEntry
	29, // 22: magma.mconfig.LighttpD.log_level:type_name -> magma.orc8r.LogLevel
	29, // 23: magma.mconfig.MonitorD.log_level:type_name -> magma.orc8r.LogLevel
	29, // 24: magma.mconfig.DPID.log_level:type_name -> magma.orc8r.LogLevel
	29, // 25: magma.mconfig.DnsD.log_level:type_name -> magma.orc8r.LogLevel
	18, // 26: magma.mconfig.DnsD.records:type_name -> magma.mconfig.GatewayDNSConfigRecordsItems
	21, // 27: magma.mconfig.EnodebD.EnbConfigsBySerialEntry.value:type_name -> magma.mconfig.EnodebD.EnodebConfig
	27, // 28: magma.mconfig.SubscriberDB.SubProfilesEntry.value:type_name -> magma.mconfig.SubscriberDB.SubscriptionProfile
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_lte_protos_mconfig_mconfigs_proto_init() }
func file_lte_protos_mconfig_mconfigs_proto_init() {
	if File_lte_protos_mconfig_mconfigs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletExhaustDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MME); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LighttpD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayDNSConfigRecordsItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebD_FDDConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebD_TDDConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebD_EnodebConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineD_AllowedGrePeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineD_IPDRExportDst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineD_LiUes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MME_ApnCorrectionMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberDB_SubscriptionProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_mconfig_mconfigs_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lte_protos_mconfig_mconfigs_proto_goTypes,
		DependencyIndexes: file_lte_protos_mconfig_mconfigs_proto_depIdxs,
		EnumInfos:         file_lte_protos_mconfig_mconfigs_proto_enumTypes,
		MessageInfos:      file_lte_protos_mconfig_mconfigs_proto_msgTypes,
	}.Build()
	File_lte_protos_mconfig_mconfigs_proto = out.File
	file_lte_protos_mconfig_mconfigs_proto_rawDesc = nil
	file_lte_protos_mconfig_mconfigs_proto_goTypes = nil
	file_lte_protos_mconfig_mconfigs_proto_depIdxs = nil
}
