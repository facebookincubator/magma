//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: lte/protos/session_manager.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

///////////////////
// LocalSessionManager service
///////////////////
type RATType int32

const (
	RATType_TGPP_LTE  RATType = 0 // will map to 06 (EUTRAN, 3GPP TS 29.274) for Gy, 1004 (EUTRAN, 3GPP TS 29.212) S6a, Gx
	RATType_TGPP_WLAN RATType = 1 // will map to 03 (WLAN, 3GPP TS 29.274) for Gy, 0 (WLAN, 3GPP TS 29.212) S6a, Gx
	RATType_TGPP_NR   RATType = 2
)

// Enum value maps for RATType.
var (
	RATType_name = map[int32]string{
		0: "TGPP_LTE",
		1: "TGPP_WLAN",
		2: "TGPP_NR",
	}
	RATType_value = map[string]int32{
		"TGPP_LTE":  0,
		"TGPP_WLAN": 1,
		"TGPP_NR":   2,
	}
)

func (x RATType) Enum() *RATType {
	p := new(RATType)
	*p = x
	return p
}

func (x RATType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RATType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[0].Descriptor()
}

func (RATType) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[0]
}

func (x RATType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RATType.Descriptor instead.
func (RATType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{0}
}

type EventTrigger int32

const (
	EventTrigger_SGSN_CHANGE        EventTrigger = 0
	EventTrigger_QOS_CHANGE         EventTrigger = 1
	EventTrigger_RAT_CHANGE         EventTrigger = 2
	EventTrigger_TFT_CHANGE         EventTrigger = 3
	EventTrigger_PLMN_CHANGE        EventTrigger = 4
	EventTrigger_LOSS_OF_BEARER     EventTrigger = 5
	EventTrigger_RECOVERY_OF_BEARER EventTrigger = 6
	EventTrigger_IP_CAN_CHANGE      EventTrigger = 7
	// 8, 9, 10 are unused
	EventTrigger_QOS_CHANGE_EXCEEDING_AUTHORIZATION EventTrigger = 11
	EventTrigger_RAI_CHANGE                         EventTrigger = 12
	EventTrigger_USER_LOCATION_CHANGE               EventTrigger = 13
	EventTrigger_NO_EVENT_TRIGGERS                  EventTrigger = 14
	EventTrigger_OUT_OF_CREDIT                      EventTrigger = 15
	EventTrigger_REALLOCATION_OF_CREDIT             EventTrigger = 16
	EventTrigger_REVALIDATION_TIMEOUT               EventTrigger = 17
	EventTrigger_UE_IP_ADDRESS_ALLOCATE             EventTrigger = 18
	EventTrigger_UE_IP_ADDRESS_RELEASE              EventTrigger = 19
	EventTrigger_DEFAULT_EPS_BEARER_QOS_CHANGE      EventTrigger = 20
	EventTrigger_AN_GW_CHANGE                       EventTrigger = 21
	EventTrigger_SUCCESSFUL_RESOURCE_ALLOCATION     EventTrigger = 22
	EventTrigger_RESOURCE_MODIFICATION_REQUEST      EventTrigger = 23
	EventTrigger_PGW_TRACE_CONTROL                  EventTrigger = 24
	EventTrigger_UE_TIME_ZONE_CHANGE                EventTrigger = 25
	EventTrigger_TAI_CHANGE                         EventTrigger = 26
	EventTrigger_ECGI_CHANGE                        EventTrigger = 27
	EventTrigger_CHARGING_CORRELATION_EXCHANGE      EventTrigger = 28
	EventTrigger_APN_AMBR_MODIFICATION_FAILURE      EventTrigger = 29
	EventTrigger_USER_CSG_INFORMATION_CHANGE        EventTrigger = 30
	// 31, 32 are unused
	EventTrigger_USAGE_REPORT                                    EventTrigger = 33
	EventTrigger_DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE     EventTrigger = 34
	EventTrigger_USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE   EventTrigger = 35
	EventTrigger_USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE EventTrigger = 36
	EventTrigger_ROUTING_RULE_CHANGE                             EventTrigger = 37
	// 38 is unused
	EventTrigger_APPLICATION_START EventTrigger = 39
	EventTrigger_APPLICATION_STOP  EventTrigger = 40
	// 41 is unused
	EventTrigger_CS_TO_PS_HANDOVER                                       EventTrigger = 42
	EventTrigger_UE_LOCAL_IP_ADDRESS_CHANGE                              EventTrigger = 43
	EventTrigger_HENB_LOCAL_IP_ADDRESS_CHANGE                            EventTrigger = 44
	EventTrigger_ACCESS_NETWORK_INFO_REPORT                              EventTrigger = 45
	EventTrigger_CREDIT_MANAGEMENT_SESSION_FAILURE                       EventTrigger = 46
	EventTrigger_DEFAULT_QOS_CHANGE                                      EventTrigger = 47
	EventTrigger_CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT EventTrigger = 48
	// UNSUPPORTED is not defined in 3GPP
	EventTrigger_UNSUPPORTED EventTrigger = 49
)

// Enum value maps for EventTrigger.
var (
	EventTrigger_name = map[int32]string{
		0:  "SGSN_CHANGE",
		1:  "QOS_CHANGE",
		2:  "RAT_CHANGE",
		3:  "TFT_CHANGE",
		4:  "PLMN_CHANGE",
		5:  "LOSS_OF_BEARER",
		6:  "RECOVERY_OF_BEARER",
		7:  "IP_CAN_CHANGE",
		11: "QOS_CHANGE_EXCEEDING_AUTHORIZATION",
		12: "RAI_CHANGE",
		13: "USER_LOCATION_CHANGE",
		14: "NO_EVENT_TRIGGERS",
		15: "OUT_OF_CREDIT",
		16: "REALLOCATION_OF_CREDIT",
		17: "REVALIDATION_TIMEOUT",
		18: "UE_IP_ADDRESS_ALLOCATE",
		19: "UE_IP_ADDRESS_RELEASE",
		20: "DEFAULT_EPS_BEARER_QOS_CHANGE",
		21: "AN_GW_CHANGE",
		22: "SUCCESSFUL_RESOURCE_ALLOCATION",
		23: "RESOURCE_MODIFICATION_REQUEST",
		24: "PGW_TRACE_CONTROL",
		25: "UE_TIME_ZONE_CHANGE",
		26: "TAI_CHANGE",
		27: "ECGI_CHANGE",
		28: "CHARGING_CORRELATION_EXCHANGE",
		29: "APN_AMBR_MODIFICATION_FAILURE",
		30: "USER_CSG_INFORMATION_CHANGE",
		33: "USAGE_REPORT",
		34: "DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE",
		35: "USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE",
		36: "USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE",
		37: "ROUTING_RULE_CHANGE",
		39: "APPLICATION_START",
		40: "APPLICATION_STOP",
		42: "CS_TO_PS_HANDOVER",
		43: "UE_LOCAL_IP_ADDRESS_CHANGE",
		44: "HENB_LOCAL_IP_ADDRESS_CHANGE",
		45: "ACCESS_NETWORK_INFO_REPORT",
		46: "CREDIT_MANAGEMENT_SESSION_FAILURE",
		47: "DEFAULT_QOS_CHANGE",
		48: "CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT",
		49: "UNSUPPORTED",
	}
	EventTrigger_value = map[string]int32{
		"SGSN_CHANGE":                                     0,
		"QOS_CHANGE":                                      1,
		"RAT_CHANGE":                                      2,
		"TFT_CHANGE":                                      3,
		"PLMN_CHANGE":                                     4,
		"LOSS_OF_BEARER":                                  5,
		"RECOVERY_OF_BEARER":                              6,
		"IP_CAN_CHANGE":                                   7,
		"QOS_CHANGE_EXCEEDING_AUTHORIZATION":              11,
		"RAI_CHANGE":                                      12,
		"USER_LOCATION_CHANGE":                            13,
		"NO_EVENT_TRIGGERS":                               14,
		"OUT_OF_CREDIT":                                   15,
		"REALLOCATION_OF_CREDIT":                          16,
		"REVALIDATION_TIMEOUT":                            17,
		"UE_IP_ADDRESS_ALLOCATE":                          18,
		"UE_IP_ADDRESS_RELEASE":                           19,
		"DEFAULT_EPS_BEARER_QOS_CHANGE":                   20,
		"AN_GW_CHANGE":                                    21,
		"SUCCESSFUL_RESOURCE_ALLOCATION":                  22,
		"RESOURCE_MODIFICATION_REQUEST":                   23,
		"PGW_TRACE_CONTROL":                               24,
		"UE_TIME_ZONE_CHANGE":                             25,
		"TAI_CHANGE":                                      26,
		"ECGI_CHANGE":                                     27,
		"CHARGING_CORRELATION_EXCHANGE":                   28,
		"APN_AMBR_MODIFICATION_FAILURE":                   29,
		"USER_CSG_INFORMATION_CHANGE":                     30,
		"USAGE_REPORT":                                    33,
		"DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE":     34,
		"USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE":   35,
		"USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE": 36,
		"ROUTING_RULE_CHANGE":                             37,
		"APPLICATION_START":                               39,
		"APPLICATION_STOP":                                40,
		"CS_TO_PS_HANDOVER":                               42,
		"UE_LOCAL_IP_ADDRESS_CHANGE":                      43,
		"HENB_LOCAL_IP_ADDRESS_CHANGE":                    44,
		"ACCESS_NETWORK_INFO_REPORT":                      45,
		"CREDIT_MANAGEMENT_SESSION_FAILURE":               46,
		"DEFAULT_QOS_CHANGE":                              47,
		"CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT": 48,
		"UNSUPPORTED": 49,
	}
)

func (x EventTrigger) Enum() *EventTrigger {
	p := new(EventTrigger)
	*p = x
	return p
}

func (x EventTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[1].Descriptor()
}

func (EventTrigger) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[1]
}

func (x EventTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTrigger.Descriptor instead.
func (EventTrigger) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{1}
}

type QCI int32

const (
	QCI_QCI_0  QCI = 0
	QCI_QCI_1  QCI = 1
	QCI_QCI_2  QCI = 2
	QCI_QCI_3  QCI = 3
	QCI_QCI_4  QCI = 4
	QCI_QCI_5  QCI = 5
	QCI_QCI_6  QCI = 6
	QCI_QCI_7  QCI = 7
	QCI_QCI_8  QCI = 8
	QCI_QCI_9  QCI = 9
	QCI_QCI_65 QCI = 65
	QCI_QCI_66 QCI = 66
	QCI_QCI_67 QCI = 67
	QCI_QCI_70 QCI = 70
	QCI_QCI_75 QCI = 75
	QCI_QCI_79 QCI = 79
)

// Enum value maps for QCI.
var (
	QCI_name = map[int32]string{
		0:  "QCI_0",
		1:  "QCI_1",
		2:  "QCI_2",
		3:  "QCI_3",
		4:  "QCI_4",
		5:  "QCI_5",
		6:  "QCI_6",
		7:  "QCI_7",
		8:  "QCI_8",
		9:  "QCI_9",
		65: "QCI_65",
		66: "QCI_66",
		67: "QCI_67",
		70: "QCI_70",
		75: "QCI_75",
		79: "QCI_79",
	}
	QCI_value = map[string]int32{
		"QCI_0":  0,
		"QCI_1":  1,
		"QCI_2":  2,
		"QCI_3":  3,
		"QCI_4":  4,
		"QCI_5":  5,
		"QCI_6":  6,
		"QCI_7":  7,
		"QCI_8":  8,
		"QCI_9":  9,
		"QCI_65": 65,
		"QCI_66": 66,
		"QCI_67": 67,
		"QCI_70": 70,
		"QCI_75": 75,
		"QCI_79": 79,
	}
)

func (x QCI) Enum() *QCI {
	p := new(QCI)
	*p = x
	return p
}

func (x QCI) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QCI) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[2].Descriptor()
}

func (QCI) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[2]
}

func (x QCI) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QCI.Descriptor instead.
func (QCI) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{2}
}

type ReAuthResult int32

const (
	ReAuthResult_UPDATE_INITIATED  ReAuthResult = 0
	ReAuthResult_UPDATE_NOT_NEEDED ReAuthResult = 1
	ReAuthResult_SESSION_NOT_FOUND ReAuthResult = 2
	ReAuthResult_OTHER_FAILURE     ReAuthResult = 3
)

// Enum value maps for ReAuthResult.
var (
	ReAuthResult_name = map[int32]string{
		0: "UPDATE_INITIATED",
		1: "UPDATE_NOT_NEEDED",
		2: "SESSION_NOT_FOUND",
		3: "OTHER_FAILURE",
	}
	ReAuthResult_value = map[string]int32{
		"UPDATE_INITIATED":  0,
		"UPDATE_NOT_NEEDED": 1,
		"SESSION_NOT_FOUND": 2,
		"OTHER_FAILURE":     3,
	}
)

func (x ReAuthResult) Enum() *ReAuthResult {
	p := new(ReAuthResult)
	*p = x
	return p
}

func (x ReAuthResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReAuthResult) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[3].Descriptor()
}

func (ReAuthResult) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[3]
}

func (x ReAuthResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReAuthResult.Descriptor instead.
func (ReAuthResult) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{3}
}

type CreditLimitType int32

const (
	CreditLimitType_FINITE             CreditLimitType = 0
	CreditLimitType_INFINITE_UNMETERED CreditLimitType = 1
	CreditLimitType_INFINITE_METERED   CreditLimitType = 2
)

// Enum value maps for CreditLimitType.
var (
	CreditLimitType_name = map[int32]string{
		0: "FINITE",
		1: "INFINITE_UNMETERED",
		2: "INFINITE_METERED",
	}
	CreditLimitType_value = map[string]int32{
		"FINITE":             0,
		"INFINITE_UNMETERED": 1,
		"INFINITE_METERED":   2,
	}
)

func (x CreditLimitType) Enum() *CreditLimitType {
	p := new(CreditLimitType)
	*p = x
	return p
}

func (x CreditLimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditLimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[4].Descriptor()
}

func (CreditLimitType) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[4]
}

func (x CreditLimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditLimitType.Descriptor instead.
func (CreditLimitType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{4}
}

type MonitoringLevel int32

const (
	MonitoringLevel_SESSION_LEVEL  MonitoringLevel = 0
	MonitoringLevel_PCC_RULE_LEVEL MonitoringLevel = 1
)

// Enum value maps for MonitoringLevel.
var (
	MonitoringLevel_name = map[int32]string{
		0: "SESSION_LEVEL",
		1: "PCC_RULE_LEVEL",
	}
	MonitoringLevel_value = map[string]int32{
		"SESSION_LEVEL":  0,
		"PCC_RULE_LEVEL": 1,
	}
)

func (x MonitoringLevel) Enum() *MonitoringLevel {
	p := new(MonitoringLevel)
	*p = x
	return p
}

func (x MonitoringLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitoringLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[5].Descriptor()
}

func (MonitoringLevel) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[5]
}

func (x MonitoringLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitoringLevel.Descriptor instead.
func (MonitoringLevel) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{5}
}

////////////5GSMCONTEXT/////////////
//PduSessionType
type PduSessionType int32

const (
	PduSessionType_IPV4         PduSessionType = 0
	PduSessionType_IPV6         PduSessionType = 1
	PduSessionType_IPV4IPV6     PduSessionType = 2
	PduSessionType_UNSTRUCTURED PduSessionType = 3
)

// Enum value maps for PduSessionType.
var (
	PduSessionType_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
		2: "IPV4IPV6",
		3: "UNSTRUCTURED",
	}
	PduSessionType_value = map[string]int32{
		"IPV4":         0,
		"IPV6":         1,
		"IPV4IPV6":     2,
		"UNSTRUCTURED": 3,
	}
)

func (x PduSessionType) Enum() *PduSessionType {
	p := new(PduSessionType)
	*p = x
	return p
}

func (x PduSessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PduSessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[6].Descriptor()
}

func (PduSessionType) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[6]
}

func (x PduSessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PduSessionType.Descriptor instead.
func (PduSessionType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{6}
}

//SscMode
type SscMode int32

const (
	SscMode_SSC_MODE_1 SscMode = 0
	SscMode_SSC_MODE_2 SscMode = 1
	SscMode_SSC_MODE_3 SscMode = 2
)

// Enum value maps for SscMode.
var (
	SscMode_name = map[int32]string{
		0: "SSC_MODE_1",
		1: "SSC_MODE_2",
		2: "SSC_MODE_3",
	}
	SscMode_value = map[string]int32{
		"SSC_MODE_1": 0,
		"SSC_MODE_2": 1,
		"SSC_MODE_3": 2,
	}
)

func (x SscMode) Enum() *SscMode {
	p := new(SscMode)
	*p = x
	return p
}

func (x SscMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SscMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[7].Descriptor()
}

func (SscMode) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[7]
}

func (x SscMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SscMode.Descriptor instead.
func (SscMode) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{7}
}

//M5GSMCause
type M5GSMCause int32

const (
	M5GSMCause_OPERATOR_DETERMINED_BARRING                                             M5GSMCause = 0  //actual value 8
	M5GSMCause_INSUFFICIENT_RESOURCES                                                  M5GSMCause = 1  //actual value 26
	M5GSMCause_MISSING_OR_UNKNOWN_DNN                                                  M5GSMCause = 2  //actual value 27
	M5GSMCause_UNKNOWN_PDU_SESSION_TYPE                                                M5GSMCause = 3  //actual value 28
	M5GSMCause_USER_AUTHENTICATION_OR_AUTHORIZATION_FAILED                             M5GSMCause = 4  //actual value 29
	M5GSMCause_REQUEST_REJECTED_UNSPECIFIED                                            M5GSMCause = 5  //actual value 31
	M5GSMCause_SERVICE_OPTION_NOT_SUPPORTED                                            M5GSMCause = 6  //actual value 32
	M5GSMCause_REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED                                 M5GSMCause = 7  //actual value 33
	M5GSMCause_SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER                                 M5GSMCause = 8  //actual value 34
	M5GSMCause_REGULAR_DEACTIVATION                                                    M5GSMCause = 10 //actual value 36
	M5GSMCause_NETWORK_FAILURE                                                         M5GSMCause = 11 //actual value 38
	M5GSMCause_REACTIVATION_REQUESTED                                                  M5GSMCause = 12 //actual value 39
	M5GSMCause_INVALID_PDU_SESSION_IDENTITY                                            M5GSMCause = 13 //actual value 43
	M5GSMCause_SEMANTIC_ERRORS_IN_PACKET_FILTER                                        M5GSMCause = 14 //actual value 44
	M5GSMCause_SYNTACTICAL_ERROR_IN_PACKET_FILTER                                      M5GSMCause = 15 //actual value 45
	M5GSMCause_OUT_OF_LADN_SERVICE_AREA                                                M5GSMCause = 16 //actual value 46
	M5GSMCause_PTI_MISMATCH                                                            M5GSMCause = 17 //actual value 47
	M5GSMCause_PDU_SESSION_TYPE_IPV4_ONLY_ALLOWED                                      M5GSMCause = 18 //actual value 5
	M5GSMCause_PDU_SESSION_TYPE_IPV6_ONLY_ALLOWED                                      M5GSMCause = 19 //actual value 51
	M5GSMCause_PDU_SESSION_DOES_NOT_EXIST                                              M5GSMCause = 20 //actual value 54
	M5GSMCause_INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE_AND_DNN                       M5GSMCause = 21 //actual value 67
	M5GSMCause_NOT_SUPPORTED_SSC_MODE                                                  M5GSMCause = 22 //actual value 68
	M5GSMCause_INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE                               M5GSMCause = 23 //actual value 69
	M5GSMCause_MISSING_OR_UNKNOWN_DNN_IN_A_SLICE                                       M5GSMCause = 24 //actual value 70
	M5GSMCause_INVALID_PTI_VALUE                                                       M5GSMCause = 25 //actual value 81
	M5GSMCause_MAXIMUM_DATA_RATE_PER_UE_FOR_USER_PLANE_INTEGRITY_PROTECTION_IS_TOO_LOW M5GSMCause = 26 //actual value 82
	M5GSMCause_SEMANTIC_ERROR_IN_THE_QOS_OPERATION                                     M5GSMCause = 27 //actual value 83
	M5GSMCause_SYNTACTICAL_ERROR_IN_THE_QOS_OPERATION                                  M5GSMCause = 28 //actual value 84
	M5GSMCause_INVALID_MAPPED_EPS_BEARER_IDENTITY                                      M5GSMCause = 29 //actual value 85
	M5GSMCause_SEMANTICALLY_INCORRECT_MESSAGE                                          M5GSMCause = 30 //actual value 95
	M5GSMCause_INVALID_MANDATORY_INFORMATION                                           M5GSMCause = 31 //actual value 96
	M5GSMCause_MESSAGE_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED                            M5GSMCause = 32 //actual value 97
	M5GSMCause_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE                     M5GSMCause = 33 //actual value 98
	M5GSMCause_INFORMATION_ELEMENT_NON_EXISTENT_OR_NOT_IMPLEMENTED                     M5GSMCause = 34 //actual value 99
	M5GSMCause_CONDITIONAL_IE_ERROR                                                    M5GSMCause = 35 //actual value 100
	M5GSMCause_MESSAGE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE                          M5GSMCause = 36 //actual value 101
	M5GSMCause_PROTOCOL_ERROR_UNSPECIFIED                                              M5GSMCause = 37
	M5GSMCause_PTI_ALREADY_IN_USE                                                      M5GSMCause = 38 //actual value 111
	M5GSMCause_OPERATION_SUCCESS                                                       M5GSMCause = 40 //Response other than failure
)

// Enum value maps for M5GSMCause.
var (
	M5GSMCause_name = map[int32]string{
		0:  "OPERATOR_DETERMINED_BARRING",
		1:  "INSUFFICIENT_RESOURCES",
		2:  "MISSING_OR_UNKNOWN_DNN",
		3:  "UNKNOWN_PDU_SESSION_TYPE",
		4:  "USER_AUTHENTICATION_OR_AUTHORIZATION_FAILED",
		5:  "REQUEST_REJECTED_UNSPECIFIED",
		6:  "SERVICE_OPTION_NOT_SUPPORTED",
		7:  "REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED",
		8:  "SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER",
		10: "REGULAR_DEACTIVATION",
		11: "NETWORK_FAILURE",
		12: "REACTIVATION_REQUESTED",
		13: "INVALID_PDU_SESSION_IDENTITY",
		14: "SEMANTIC_ERRORS_IN_PACKET_FILTER",
		15: "SYNTACTICAL_ERROR_IN_PACKET_FILTER",
		16: "OUT_OF_LADN_SERVICE_AREA",
		17: "PTI_MISMATCH",
		18: "PDU_SESSION_TYPE_IPV4_ONLY_ALLOWED",
		19: "PDU_SESSION_TYPE_IPV6_ONLY_ALLOWED",
		20: "PDU_SESSION_DOES_NOT_EXIST",
		21: "INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE_AND_DNN",
		22: "NOT_SUPPORTED_SSC_MODE",
		23: "INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE",
		24: "MISSING_OR_UNKNOWN_DNN_IN_A_SLICE",
		25: "INVALID_PTI_VALUE",
		26: "MAXIMUM_DATA_RATE_PER_UE_FOR_USER_PLANE_INTEGRITY_PROTECTION_IS_TOO_LOW",
		27: "SEMANTIC_ERROR_IN_THE_QOS_OPERATION",
		28: "SYNTACTICAL_ERROR_IN_THE_QOS_OPERATION",
		29: "INVALID_MAPPED_EPS_BEARER_IDENTITY",
		30: "SEMANTICALLY_INCORRECT_MESSAGE",
		31: "INVALID_MANDATORY_INFORMATION",
		32: "MESSAGE_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED",
		33: "MESSAGE_TYPE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE",
		34: "INFORMATION_ELEMENT_NON_EXISTENT_OR_NOT_IMPLEMENTED",
		35: "CONDITIONAL_IE_ERROR",
		36: "MESSAGE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE",
		37: "PROTOCOL_ERROR_UNSPECIFIED",
		38: "PTI_ALREADY_IN_USE",
		40: "OPERATION_SUCCESS",
	}
	M5GSMCause_value = map[string]int32{
		"OPERATOR_DETERMINED_BARRING":                                             0,
		"INSUFFICIENT_RESOURCES":                                                  1,
		"MISSING_OR_UNKNOWN_DNN":                                                  2,
		"UNKNOWN_PDU_SESSION_TYPE":                                                3,
		"USER_AUTHENTICATION_OR_AUTHORIZATION_FAILED":                             4,
		"REQUEST_REJECTED_UNSPECIFIED":                                            5,
		"SERVICE_OPTION_NOT_SUPPORTED":                                            6,
		"REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED":                                 7,
		"SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER":                                 8,
		"REGULAR_DEACTIVATION":                                                    10,
		"NETWORK_FAILURE":                                                         11,
		"REACTIVATION_REQUESTED":                                                  12,
		"INVALID_PDU_SESSION_IDENTITY":                                            13,
		"SEMANTIC_ERRORS_IN_PACKET_FILTER":                                        14,
		"SYNTACTICAL_ERROR_IN_PACKET_FILTER":                                      15,
		"OUT_OF_LADN_SERVICE_AREA":                                                16,
		"PTI_MISMATCH":                                                            17,
		"PDU_SESSION_TYPE_IPV4_ONLY_ALLOWED":                                      18,
		"PDU_SESSION_TYPE_IPV6_ONLY_ALLOWED":                                      19,
		"PDU_SESSION_DOES_NOT_EXIST":                                              20,
		"INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE_AND_DNN":                       21,
		"NOT_SUPPORTED_SSC_MODE":                                                  22,
		"INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE":                               23,
		"MISSING_OR_UNKNOWN_DNN_IN_A_SLICE":                                       24,
		"INVALID_PTI_VALUE":                                                       25,
		"MAXIMUM_DATA_RATE_PER_UE_FOR_USER_PLANE_INTEGRITY_PROTECTION_IS_TOO_LOW": 26,
		"SEMANTIC_ERROR_IN_THE_QOS_OPERATION":                                     27,
		"SYNTACTICAL_ERROR_IN_THE_QOS_OPERATION":                                  28,
		"INVALID_MAPPED_EPS_BEARER_IDENTITY":                                      29,
		"SEMANTICALLY_INCORRECT_MESSAGE":                                          30,
		"INVALID_MANDATORY_INFORMATION":                                           31,
		"MESSAGE_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED":                            32,
		"MESSAGE_TYPE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE":                     33,
		"INFORMATION_ELEMENT_NON_EXISTENT_OR_NOT_IMPLEMENTED":                     34,
		"CONDITIONAL_IE_ERROR":                                                    35,
		"MESSAGE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE":                          36,
		"PROTOCOL_ERROR_UNSPECIFIED":                                              37,
		"PTI_ALREADY_IN_USE":                                                      38,
		"OPERATION_SUCCESS":                                                       40,
	}
)

func (x M5GSMCause) Enum() *M5GSMCause {
	p := new(M5GSMCause)
	*p = x
	return p
}

func (x M5GSMCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (M5GSMCause) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[8].Descriptor()
}

func (M5GSMCause) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[8]
}

func (x M5GSMCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use M5GSMCause.Descriptor instead.
func (M5GSMCause) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{8}
}

//RequestType
type RequestType int32

const (
	RequestType_INITIAL_REQUEST                RequestType = 0
	RequestType_EXISTING_PDU_SESSION           RequestType = 1
	RequestType_INITIAL_EMERGENCY_REQUEST      RequestType = 2
	RequestType_EXISTING_EMERGENCY_PDU_SESSION RequestType = 3
	RequestType_MODIFICATION_REQUEST           RequestType = 4
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "INITIAL_REQUEST",
		1: "EXISTING_PDU_SESSION",
		2: "INITIAL_EMERGENCY_REQUEST",
		3: "EXISTING_EMERGENCY_PDU_SESSION",
		4: "MODIFICATION_REQUEST",
	}
	RequestType_value = map[string]int32{
		"INITIAL_REQUEST":                0,
		"EXISTING_PDU_SESSION":           1,
		"INITIAL_EMERGENCY_REQUEST":      2,
		"EXISTING_EMERGENCY_PDU_SESSION": 3,
		"MODIFICATION_REQUEST":           4,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[9].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[9]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{9}
}

//AccessType
type AccessType int32

const (
	AccessType_M_3GPP_ACCESS_3GPP AccessType = 0
	AccessType_NON_3GPP_ACCESS    AccessType = 1
)

// Enum value maps for AccessType.
var (
	AccessType_name = map[int32]string{
		0: "M_3GPP_ACCESS_3GPP",
		1: "NON_3GPP_ACCESS",
	}
	AccessType_value = map[string]int32{
		"M_3GPP_ACCESS_3GPP": 0,
		"NON_3GPP_ACCESS":    1,
	}
)

func (x AccessType) Enum() *AccessType {
	p := new(AccessType)
	*p = x
	return p
}

func (x AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[10].Descriptor()
}

func (AccessType) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[10]
}

func (x AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessType.Descriptor instead.
func (AccessType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{10}
}

//DnnSelectionMode
type DnnSelectionMode int32

const (
	DnnSelectionMode_VERIFIED            DnnSelectionMode = 0
	DnnSelectionMode_UE_DNN_NOT_VERIFIED DnnSelectionMode = 1
	DnnSelectionMode_NW_DNN_NOT_VERIFIED DnnSelectionMode = 2
)

// Enum value maps for DnnSelectionMode.
var (
	DnnSelectionMode_name = map[int32]string{
		0: "VERIFIED",
		1: "UE_DNN_NOT_VERIFIED",
		2: "NW_DNN_NOT_VERIFIED",
	}
	DnnSelectionMode_value = map[string]int32{
		"VERIFIED":            0,
		"UE_DNN_NOT_VERIFIED": 1,
		"NW_DNN_NOT_VERIFIED": 2,
	}
)

func (x DnnSelectionMode) Enum() *DnnSelectionMode {
	p := new(DnnSelectionMode)
	*p = x
	return p
}

func (x DnnSelectionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DnnSelectionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[11].Descriptor()
}

func (DnnSelectionMode) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[11]
}

func (x DnnSelectionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DnnSelectionMode.Descriptor instead.
func (DnnSelectionMode) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{11}
}

type TypeOfList int32

const (
	TypeOfList_LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_NON_CONSECUTIVE_TAC_VALUES TypeOfList = 0
	TypeOfList_LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_CONSECUTIVE_TAC_VALUES     TypeOfList = 1
	TypeOfList_LIST_OF_TAIS_BELONGING_TO_DIFFERENT_PLMNS                          TypeOfList = 2
)

// Enum value maps for TypeOfList.
var (
	TypeOfList_name = map[int32]string{
		0: "LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_NON_CONSECUTIVE_TAC_VALUES",
		1: "LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_CONSECUTIVE_TAC_VALUES",
		2: "LIST_OF_TAIS_BELONGING_TO_DIFFERENT_PLMNS",
	}
	TypeOfList_value = map[string]int32{
		"LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_NON_CONSECUTIVE_TAC_VALUES": 0,
		"LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_CONSECUTIVE_TAC_VALUES":     1,
		"LIST_OF_TAIS_BELONGING_TO_DIFFERENT_PLMNS":                          2,
	}
)

func (x TypeOfList) Enum() *TypeOfList {
	p := new(TypeOfList)
	*p = x
	return p
}

func (x TypeOfList) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeOfList) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[12].Descriptor()
}

func (TypeOfList) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[12]
}

func (x TypeOfList) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeOfList.Descriptor instead.
func (TypeOfList) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{12}
}

type Priorityaccess int32

const (
	Priorityaccess_High   Priorityaccess = 0
	Priorityaccess_Normal Priorityaccess = 1
	Priorityaccess_Low    Priorityaccess = 2
)

// Enum value maps for Priorityaccess.
var (
	Priorityaccess_name = map[int32]string{
		0: "High",
		1: "Normal",
		2: "Low",
	}
	Priorityaccess_value = map[string]int32{
		"High":   0,
		"Normal": 1,
		"Low":    2,
	}
)

func (x Priorityaccess) Enum() *Priorityaccess {
	p := new(Priorityaccess)
	*p = x
	return p
}

func (x Priorityaccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Priorityaccess) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[13].Descriptor()
}

func (Priorityaccess) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[13]
}

func (x Priorityaccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Priorityaccess.Descriptor instead.
func (Priorityaccess) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{13}
}

type SMSessionFSMState int32

const (
	SMSessionFSMState_CREATING_0 SMSessionFSMState = 0
	SMSessionFSMState_CREATE_1   SMSessionFSMState = 1
	SMSessionFSMState_ACTIVE_2   SMSessionFSMState = 2
	SMSessionFSMState_INACTIVE_3 SMSessionFSMState = 3
	SMSessionFSMState_RELEASED_4 SMSessionFSMState = 4
)

// Enum value maps for SMSessionFSMState.
var (
	SMSessionFSMState_name = map[int32]string{
		0: "CREATING_0",
		1: "CREATE_1",
		2: "ACTIVE_2",
		3: "INACTIVE_3",
		4: "RELEASED_4",
	}
	SMSessionFSMState_value = map[string]int32{
		"CREATING_0": 0,
		"CREATE_1":   1,
		"ACTIVE_2":   2,
		"INACTIVE_3": 3,
		"RELEASED_4": 4,
	}
)

func (x SMSessionFSMState) Enum() *SMSessionFSMState {
	p := new(SMSessionFSMState)
	*p = x
	return p
}

func (x SMSessionFSMState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMSessionFSMState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[14].Descriptor()
}

func (SMSessionFSMState) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[14]
}

func (x SMSessionFSMState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMSessionFSMState.Descriptor instead.
func (SMSessionFSMState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{14}
}

type ChargingReAuthRequest_Type int32

const (
	ChargingReAuthRequest_SINGLE_SERVICE ChargingReAuthRequest_Type = 0
	ChargingReAuthRequest_ENTIRE_SESSION ChargingReAuthRequest_Type = 1
)

// Enum value maps for ChargingReAuthRequest_Type.
var (
	ChargingReAuthRequest_Type_name = map[int32]string{
		0: "SINGLE_SERVICE",
		1: "ENTIRE_SESSION",
	}
	ChargingReAuthRequest_Type_value = map[string]int32{
		"SINGLE_SERVICE": 0,
		"ENTIRE_SESSION": 1,
	}
)

func (x ChargingReAuthRequest_Type) Enum() *ChargingReAuthRequest_Type {
	p := new(ChargingReAuthRequest_Type)
	*p = x
	return p
}

func (x ChargingReAuthRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingReAuthRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[15].Descriptor()
}

func (ChargingReAuthRequest_Type) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[15]
}

func (x ChargingReAuthRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingReAuthRequest_Type.Descriptor instead.
func (ChargingReAuthRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{12, 0}
}

type PolicyReAuthAnswer_FailureCode int32

const (
	// We want to map these directly to the diameter return codes, so use a
	// placeholder for 0
	PolicyReAuthAnswer_UNUSED                             PolicyReAuthAnswer_FailureCode = 0
	PolicyReAuthAnswer_UNKNOWN_RULE_NAME                  PolicyReAuthAnswer_FailureCode = 1
	PolicyReAuthAnswer_RATING_GROUP_ERROR                 PolicyReAuthAnswer_FailureCode = 2
	PolicyReAuthAnswer_SERVICE_IDENTIFIER_ERROR           PolicyReAuthAnswer_FailureCode = 3
	PolicyReAuthAnswer_GW_PCEF_MALFUNCTION                PolicyReAuthAnswer_FailureCode = 4
	PolicyReAuthAnswer_RESOURCES_LIMITATION               PolicyReAuthAnswer_FailureCode = 5
	PolicyReAuthAnswer_MAX_NR_BEARERS_REACHED             PolicyReAuthAnswer_FailureCode = 6
	PolicyReAuthAnswer_UNKNOWN_BEARER_ID                  PolicyReAuthAnswer_FailureCode = 7
	PolicyReAuthAnswer_MISSING_BEARER_ID                  PolicyReAuthAnswer_FailureCode = 8
	PolicyReAuthAnswer_MISSING_FLOW_INFORMATION           PolicyReAuthAnswer_FailureCode = 9
	PolicyReAuthAnswer_RESOURCE_ALLOCATION_FAILURE        PolicyReAuthAnswer_FailureCode = 10
	PolicyReAuthAnswer_UNSUCCESSFUL_QOS_VALIDATION        PolicyReAuthAnswer_FailureCode = 11
	PolicyReAuthAnswer_INCORRECT_FLOW_INFORMATION         PolicyReAuthAnswer_FailureCode = 12
	PolicyReAuthAnswer_PS_TO_CS_HANDOVER                  PolicyReAuthAnswer_FailureCode = 13
	PolicyReAuthAnswer_TDF_APPLICATION_IDENTIFIER_ERROR   PolicyReAuthAnswer_FailureCode = 14
	PolicyReAuthAnswer_NO_BEARER_FOUND                    PolicyReAuthAnswer_FailureCode = 15
	PolicyReAuthAnswer_FILTER_RESTRICTIONS                PolicyReAuthAnswer_FailureCode = 16
	PolicyReAuthAnswer_AN_GW_FAILED                       PolicyReAuthAnswer_FailureCode = 17
	PolicyReAuthAnswer_MISSING_REDIRECT_SERVER_ADDRESS    PolicyReAuthAnswer_FailureCode = 18
	PolicyReAuthAnswer_CM_END_USER_SERVICE_DENIED         PolicyReAuthAnswer_FailureCode = 19
	PolicyReAuthAnswer_CM_CREDIT_CONTROL_NOT_APPLICABLE   PolicyReAuthAnswer_FailureCode = 20
	PolicyReAuthAnswer_CM_AUTHORIZATION_REJECTED          PolicyReAuthAnswer_FailureCode = 21
	PolicyReAuthAnswer_CM_USER_UNKNOWN                    PolicyReAuthAnswer_FailureCode = 22
	PolicyReAuthAnswer_CM_RATING_FAILED                   PolicyReAuthAnswer_FailureCode = 23
	PolicyReAuthAnswer_ROUTING_RULE_REJECTION             PolicyReAuthAnswer_FailureCode = 24
	PolicyReAuthAnswer_UNKNOWN_ROUTING_ACCESS_INFORMATION PolicyReAuthAnswer_FailureCode = 25
	PolicyReAuthAnswer_NO_NBIFOM_SUPPORT                  PolicyReAuthAnswer_FailureCode = 26
)

// Enum value maps for PolicyReAuthAnswer_FailureCode.
var (
	PolicyReAuthAnswer_FailureCode_name = map[int32]string{
		0:  "UNUSED",
		1:  "UNKNOWN_RULE_NAME",
		2:  "RATING_GROUP_ERROR",
		3:  "SERVICE_IDENTIFIER_ERROR",
		4:  "GW_PCEF_MALFUNCTION",
		5:  "RESOURCES_LIMITATION",
		6:  "MAX_NR_BEARERS_REACHED",
		7:  "UNKNOWN_BEARER_ID",
		8:  "MISSING_BEARER_ID",
		9:  "MISSING_FLOW_INFORMATION",
		10: "RESOURCE_ALLOCATION_FAILURE",
		11: "UNSUCCESSFUL_QOS_VALIDATION",
		12: "INCORRECT_FLOW_INFORMATION",
		13: "PS_TO_CS_HANDOVER",
		14: "TDF_APPLICATION_IDENTIFIER_ERROR",
		15: "NO_BEARER_FOUND",
		16: "FILTER_RESTRICTIONS",
		17: "AN_GW_FAILED",
		18: "MISSING_REDIRECT_SERVER_ADDRESS",
		19: "CM_END_USER_SERVICE_DENIED",
		20: "CM_CREDIT_CONTROL_NOT_APPLICABLE",
		21: "CM_AUTHORIZATION_REJECTED",
		22: "CM_USER_UNKNOWN",
		23: "CM_RATING_FAILED",
		24: "ROUTING_RULE_REJECTION",
		25: "UNKNOWN_ROUTING_ACCESS_INFORMATION",
		26: "NO_NBIFOM_SUPPORT",
	}
	PolicyReAuthAnswer_FailureCode_value = map[string]int32{
		"UNUSED":                             0,
		"UNKNOWN_RULE_NAME":                  1,
		"RATING_GROUP_ERROR":                 2,
		"SERVICE_IDENTIFIER_ERROR":           3,
		"GW_PCEF_MALFUNCTION":                4,
		"RESOURCES_LIMITATION":               5,
		"MAX_NR_BEARERS_REACHED":             6,
		"UNKNOWN_BEARER_ID":                  7,
		"MISSING_BEARER_ID":                  8,
		"MISSING_FLOW_INFORMATION":           9,
		"RESOURCE_ALLOCATION_FAILURE":        10,
		"UNSUCCESSFUL_QOS_VALIDATION":        11,
		"INCORRECT_FLOW_INFORMATION":         12,
		"PS_TO_CS_HANDOVER":                  13,
		"TDF_APPLICATION_IDENTIFIER_ERROR":   14,
		"NO_BEARER_FOUND":                    15,
		"FILTER_RESTRICTIONS":                16,
		"AN_GW_FAILED":                       17,
		"MISSING_REDIRECT_SERVER_ADDRESS":    18,
		"CM_END_USER_SERVICE_DENIED":         19,
		"CM_CREDIT_CONTROL_NOT_APPLICABLE":   20,
		"CM_AUTHORIZATION_REJECTED":          21,
		"CM_USER_UNKNOWN":                    22,
		"CM_RATING_FAILED":                   23,
		"ROUTING_RULE_REJECTION":             24,
		"UNKNOWN_ROUTING_ACCESS_INFORMATION": 25,
		"NO_NBIFOM_SUPPORT":                  26,
	}
)

func (x PolicyReAuthAnswer_FailureCode) Enum() *PolicyReAuthAnswer_FailureCode {
	p := new(PolicyReAuthAnswer_FailureCode)
	*p = x
	return p
}

func (x PolicyReAuthAnswer_FailureCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyReAuthAnswer_FailureCode) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[16].Descriptor()
}

func (PolicyReAuthAnswer_FailureCode) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[16]
}

func (x PolicyReAuthAnswer_FailureCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyReAuthAnswer_FailureCode.Descriptor instead.
func (PolicyReAuthAnswer_FailureCode) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{16, 0}
}

type RedirectServer_RedirectAddressType int32

const (
	RedirectServer_IPV4    RedirectServer_RedirectAddressType = 0
	RedirectServer_IPV6    RedirectServer_RedirectAddressType = 1
	RedirectServer_URL     RedirectServer_RedirectAddressType = 2
	RedirectServer_SIP_URI RedirectServer_RedirectAddressType = 3
)

// Enum value maps for RedirectServer_RedirectAddressType.
var (
	RedirectServer_RedirectAddressType_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
		2: "URL",
		3: "SIP_URI",
	}
	RedirectServer_RedirectAddressType_value = map[string]int32{
		"IPV4":    0,
		"IPV6":    1,
		"URL":     2,
		"SIP_URI": 3,
	}
)

func (x RedirectServer_RedirectAddressType) Enum() *RedirectServer_RedirectAddressType {
	p := new(RedirectServer_RedirectAddressType)
	*p = x
	return p
}

func (x RedirectServer_RedirectAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedirectServer_RedirectAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[17].Descriptor()
}

func (RedirectServer_RedirectAddressType) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[17]
}

func (x RedirectServer_RedirectAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedirectServer_RedirectAddressType.Descriptor instead.
func (RedirectServer_RedirectAddressType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{23, 0}
}

type ChargingCredit_UnitType int32

const (
	ChargingCredit_BYTES   ChargingCredit_UnitType = 0
	ChargingCredit_SECONDS ChargingCredit_UnitType = 1
)

// Enum value maps for ChargingCredit_UnitType.
var (
	ChargingCredit_UnitType_name = map[int32]string{
		0: "BYTES",
		1: "SECONDS",
	}
	ChargingCredit_UnitType_value = map[string]int32{
		"BYTES":   0,
		"SECONDS": 1,
	}
)

func (x ChargingCredit_UnitType) Enum() *ChargingCredit_UnitType {
	p := new(ChargingCredit_UnitType)
	*p = x
	return p
}

func (x ChargingCredit_UnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingCredit_UnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[18].Descriptor()
}

func (ChargingCredit_UnitType) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[18]
}

func (x ChargingCredit_UnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingCredit_UnitType.Descriptor instead.
func (ChargingCredit_UnitType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{24, 0}
}

type ChargingCredit_FinalAction int32

const (
	ChargingCredit_TERMINATE       ChargingCredit_FinalAction = 0
	ChargingCredit_REDIRECT        ChargingCredit_FinalAction = 1
	ChargingCredit_RESTRICT_ACCESS ChargingCredit_FinalAction = 2
)

// Enum value maps for ChargingCredit_FinalAction.
var (
	ChargingCredit_FinalAction_name = map[int32]string{
		0: "TERMINATE",
		1: "REDIRECT",
		2: "RESTRICT_ACCESS",
	}
	ChargingCredit_FinalAction_value = map[string]int32{
		"TERMINATE":       0,
		"REDIRECT":        1,
		"RESTRICT_ACCESS": 2,
	}
)

func (x ChargingCredit_FinalAction) Enum() *ChargingCredit_FinalAction {
	p := new(ChargingCredit_FinalAction)
	*p = x
	return p
}

func (x ChargingCredit_FinalAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingCredit_FinalAction) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[19].Descriptor()
}

func (ChargingCredit_FinalAction) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[19]
}

func (x ChargingCredit_FinalAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingCredit_FinalAction.Descriptor instead.
func (ChargingCredit_FinalAction) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{24, 1}
}

type CreditUsage_UpdateType int32

const (
	CreditUsage_THRESHOLD               CreditUsage_UpdateType = 0
	CreditUsage_QHT                     CreditUsage_UpdateType = 1
	CreditUsage_TERMINATED              CreditUsage_UpdateType = 2 // FINAL - UE disconnected, flow not in use
	CreditUsage_QUOTA_EXHAUSTED         CreditUsage_UpdateType = 3 // UE hit credit limit
	CreditUsage_VALIDITY_TIMER_EXPIRED  CreditUsage_UpdateType = 4 // Credit expired
	CreditUsage_OTHER_QUOTA_TYPE        CreditUsage_UpdateType = 5
	CreditUsage_RATING_CONDITION_CHANGE CreditUsage_UpdateType = 6
	CreditUsage_REAUTH_REQUIRED         CreditUsage_UpdateType = 7 // FORCED_REAUTHORISATION
	CreditUsage_POOL_EXHAUSTED          CreditUsage_UpdateType = 8
)

// Enum value maps for CreditUsage_UpdateType.
var (
	CreditUsage_UpdateType_name = map[int32]string{
		0: "THRESHOLD",
		1: "QHT",
		2: "TERMINATED",
		3: "QUOTA_EXHAUSTED",
		4: "VALIDITY_TIMER_EXPIRED",
		5: "OTHER_QUOTA_TYPE",
		6: "RATING_CONDITION_CHANGE",
		7: "REAUTH_REQUIRED",
		8: "POOL_EXHAUSTED",
	}
	CreditUsage_UpdateType_value = map[string]int32{
		"THRESHOLD":               0,
		"QHT":                     1,
		"TERMINATED":              2,
		"QUOTA_EXHAUSTED":         3,
		"VALIDITY_TIMER_EXPIRED":  4,
		"OTHER_QUOTA_TYPE":        5,
		"RATING_CONDITION_CHANGE": 6,
		"REAUTH_REQUIRED":         7,
		"POOL_EXHAUSTED":          8,
	}
)

func (x CreditUsage_UpdateType) Enum() *CreditUsage_UpdateType {
	p := new(CreditUsage_UpdateType)
	*p = x
	return p
}

func (x CreditUsage_UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditUsage_UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[20].Descriptor()
}

func (CreditUsage_UpdateType) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[20]
}

func (x CreditUsage_UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditUsage_UpdateType.Descriptor instead.
func (CreditUsage_UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{26, 0}
}

type UsageMonitoringCredit_Action int32

const (
	UsageMonitoringCredit_CONTINUE UsageMonitoringCredit_Action = 0 // continue monitoring as normal
	UsageMonitoringCredit_DISABLE  UsageMonitoringCredit_Action = 1 // no need to monitor any more  `AVP: Usage-Monitor-Support`
	UsageMonitoringCredit_FORCE    UsageMonitoringCredit_Action = 2 // monitor no matter if credit is exhausted `AVP: Usage-Monitor-Report` // TODO: not implemented on sessiond
)

// Enum value maps for UsageMonitoringCredit_Action.
var (
	UsageMonitoringCredit_Action_name = map[int32]string{
		0: "CONTINUE",
		1: "DISABLE",
		2: "FORCE",
	}
	UsageMonitoringCredit_Action_value = map[string]int32{
		"CONTINUE": 0,
		"DISABLE":  1,
		"FORCE":    2,
	}
)

func (x UsageMonitoringCredit_Action) Enum() *UsageMonitoringCredit_Action {
	p := new(UsageMonitoringCredit_Action)
	*p = x
	return p
}

func (x UsageMonitoringCredit_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsageMonitoringCredit_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_session_manager_proto_enumTypes[21].Descriptor()
}

func (UsageMonitoringCredit_Action) Type() protoreflect.EnumType {
	return &file_lte_protos_session_manager_proto_enumTypes[21]
}

func (x UsageMonitoringCredit_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsageMonitoringCredit_Action.Descriptor instead.
func (UsageMonitoringCredit_Action) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{30, 0}
}

type RuleRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid     string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"` // Session ID - specified as IMSI
	RuleId  string `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	BytesTx uint64 `protobuf:"varint,3,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	BytesRx uint64 `protobuf:"varint,4,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	UeIpv4  string `protobuf:"bytes,5,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
}

func (x *RuleRecord) Reset() {
	*x = RuleRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRecord) ProtoMessage() {}

func (x *RuleRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRecord.ProtoReflect.Descriptor instead.
func (*RuleRecord) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{0}
}

func (x *RuleRecord) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *RuleRecord) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *RuleRecord) GetBytesTx() uint64 {
	if x != nil {
		return x.BytesTx
	}
	return 0
}

func (x *RuleRecord) GetBytesRx() uint64 {
	if x != nil {
		return x.BytesRx
	}
	return 0
}

func (x *RuleRecord) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

type RuleRecordTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*RuleRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Epoch   uint64        `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *RuleRecordTable) Reset() {
	*x = RuleRecordTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRecordTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRecordTable) ProtoMessage() {}

func (x *RuleRecordTable) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRecordTable.ProtoReflect.Descriptor instead.
func (*RuleRecordTable) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{1}
}

func (x *RuleRecordTable) GetRecords() []*RuleRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RuleRecordTable) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type LocalCreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonContext      *CommonSessionContext `protobuf:"bytes,16,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext *RatSpecificContext   `protobuf:"bytes,17,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
}

func (x *LocalCreateSessionRequest) Reset() {
	*x = LocalCreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCreateSessionRequest) ProtoMessage() {}

func (x *LocalCreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCreateSessionRequest.ProtoReflect.Descriptor instead.
func (*LocalCreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{2}
}

func (x *LocalCreateSessionRequest) GetCommonContext() *CommonSessionContext {
	if x != nil {
		return x.CommonContext
	}
	return nil
}

func (x *LocalCreateSessionRequest) GetRatSpecificContext() *RatSpecificContext {
	if x != nil {
		return x.RatSpecificContext
	}
	return nil
}

type CommonSessionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid     *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	UeIpv4  string        `protobuf:"bytes,3,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	Apn     string        `protobuf:"bytes,4,opt,name=apn,proto3" json:"apn,omitempty"`
	Msisdn  []byte        `protobuf:"bytes,5,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	RatType RATType       `protobuf:"varint,6,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	//PDU session state to mirror with AMF or MME
	SmSessionState   SMSessionFSMState `protobuf:"varint,7,opt,name=sm_session_state,json=smSessionState,proto3,enum=magma.lte.SMSessionFSMState" json:"sm_session_state,omitempty"`
	SmSessionVersion uint32            `protobuf:"varint,9,opt,name=sm_session_version,json=smSessionVersion,proto3" json:"sm_session_version,omitempty"`
	UeIpv6           string            `protobuf:"bytes,10,opt,name=ue_ipv6,json=ueIpv6,proto3" json:"ue_ipv6,omitempty"`
}

func (x *CommonSessionContext) Reset() {
	*x = CommonSessionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSessionContext) ProtoMessage() {}

func (x *CommonSessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSessionContext.ProtoReflect.Descriptor instead.
func (*CommonSessionContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{3}
}

func (x *CommonSessionContext) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *CommonSessionContext) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *CommonSessionContext) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *CommonSessionContext) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *CommonSessionContext) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

func (x *CommonSessionContext) GetSmSessionState() SMSessionFSMState {
	if x != nil {
		return x.SmSessionState
	}
	return SMSessionFSMState_CREATING_0
}

func (x *CommonSessionContext) GetSmSessionVersion() uint32 {
	if x != nil {
		return x.SmSessionVersion
	}
	return 0
}

func (x *CommonSessionContext) GetUeIpv6() string {
	if x != nil {
		return x.UeIpv6
	}
	return ""
}

type RatSpecificContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Context:
	//	*RatSpecificContext_LteContext
	//	*RatSpecificContext_WlanContext
	//	*RatSpecificContext_M5GsmSessionContext
	Context isRatSpecificContext_Context `protobuf_oneof:"context"`
}

func (x *RatSpecificContext) Reset() {
	*x = RatSpecificContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatSpecificContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatSpecificContext) ProtoMessage() {}

func (x *RatSpecificContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatSpecificContext.ProtoReflect.Descriptor instead.
func (*RatSpecificContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{4}
}

func (m *RatSpecificContext) GetContext() isRatSpecificContext_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *RatSpecificContext) GetLteContext() *LTESessionContext {
	if x, ok := x.GetContext().(*RatSpecificContext_LteContext); ok {
		return x.LteContext
	}
	return nil
}

func (x *RatSpecificContext) GetWlanContext() *WLANSessionContext {
	if x, ok := x.GetContext().(*RatSpecificContext_WlanContext); ok {
		return x.WlanContext
	}
	return nil
}

func (x *RatSpecificContext) GetM5GsmSessionContext() *M5GSMSessionContext {
	if x, ok := x.GetContext().(*RatSpecificContext_M5GsmSessionContext); ok {
		return x.M5GsmSessionContext
	}
	return nil
}

type isRatSpecificContext_Context interface {
	isRatSpecificContext_Context()
}

type RatSpecificContext_LteContext struct {
	LteContext *LTESessionContext `protobuf:"bytes,17,opt,name=lte_context,json=lteContext,proto3,oneof"`
}

type RatSpecificContext_WlanContext struct {
	WlanContext *WLANSessionContext `protobuf:"bytes,18,opt,name=wlan_context,json=wlanContext,proto3,oneof"`
}

type RatSpecificContext_M5GsmSessionContext struct {
	M5GsmSessionContext *M5GSMSessionContext `protobuf:"bytes,19,opt,name=m5gsm_session_context,json=m5gsmSessionContext,proto3,oneof"`
}

func (*RatSpecificContext_LteContext) isRatSpecificContext_Context() {}

func (*RatSpecificContext_WlanContext) isRatSpecificContext_Context() {}

func (*RatSpecificContext_M5GsmSessionContext) isRatSpecificContext_Context() {}

type LTESessionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpgwIpv4     string                 `protobuf:"bytes,1,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Imei         string                 `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId       string                 `protobuf:"bytes,3,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId   string                 `protobuf:"bytes,4,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation []byte                 `protobuf:"bytes,5,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	QosInfo      *QosInformationRequest `protobuf:"bytes,6,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`
	BearerId     uint32                 `protobuf:"varint,7,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
}

func (x *LTESessionContext) Reset() {
	*x = LTESessionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTESessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTESessionContext) ProtoMessage() {}

func (x *LTESessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTESessionContext.ProtoReflect.Descriptor instead.
func (*LTESessionContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{5}
}

func (x *LTESessionContext) GetSpgwIpv4() string {
	if x != nil {
		return x.SpgwIpv4
	}
	return ""
}

func (x *LTESessionContext) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *LTESessionContext) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *LTESessionContext) GetImsiPlmnId() string {
	if x != nil {
		return x.ImsiPlmnId
	}
	return ""
}

func (x *LTESessionContext) GetUserLocation() []byte {
	if x != nil {
		return x.UserLocation
	}
	return nil
}

func (x *LTESessionContext) GetQosInfo() *QosInformationRequest {
	if x != nil {
		return x.QosInfo
	}
	return nil
}

func (x *LTESessionContext) GetBearerId() uint32 {
	if x != nil {
		return x.BearerId
	}
	return 0
}

type WLANSessionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddrBinary   []byte `protobuf:"bytes,1,opt,name=mac_addr_binary,json=macAddrBinary,proto3" json:"mac_addr_binary,omitempty"`
	MacAddr         string `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	RadiusSessionId string `protobuf:"bytes,3,opt,name=radius_session_id,json=radiusSessionId,proto3" json:"radius_session_id,omitempty"`
}

func (x *WLANSessionContext) Reset() {
	*x = WLANSessionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WLANSessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WLANSessionContext) ProtoMessage() {}

func (x *WLANSessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WLANSessionContext.ProtoReflect.Descriptor instead.
func (*WLANSessionContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{6}
}

func (x *WLANSessionContext) GetMacAddrBinary() []byte {
	if x != nil {
		return x.MacAddrBinary
	}
	return nil
}

func (x *WLANSessionContext) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *WLANSessionContext) GetRadiusSessionId() string {
	if x != nil {
		return x.RadiusSessionId
	}
	return ""
}

type LocalCreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *LocalCreateSessionResponse) Reset() {
	*x = LocalCreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCreateSessionResponse) ProtoMessage() {}

func (x *LocalCreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCreateSessionResponse.ProtoReflect.Descriptor instead.
func (*LocalCreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{7}
}

func (x *LocalCreateSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type LocalEndSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Apn string        `protobuf:"bytes,2,opt,name=apn,proto3" json:"apn,omitempty"`
}

func (x *LocalEndSessionRequest) Reset() {
	*x = LocalEndSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalEndSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalEndSessionRequest) ProtoMessage() {}

func (x *LocalEndSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalEndSessionRequest.ProtoReflect.Descriptor instead.
func (*LocalEndSessionRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{8}
}

func (x *LocalEndSessionRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *LocalEndSessionRequest) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

type LocalEndSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocalEndSessionResponse) Reset() {
	*x = LocalEndSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalEndSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalEndSessionResponse) ProtoMessage() {}

func (x *LocalEndSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalEndSessionResponse.ProtoReflect.Descriptor instead.
func (*LocalEndSessionResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{9}
}

type PolicyBearerBindingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid            *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	LinkedBearerId uint32        `protobuf:"varint,2,opt,name=linked_bearer_id,json=linkedBearerId,proto3" json:"linked_bearer_id,omitempty"`
	PolicyRuleId   string        `protobuf:"bytes,3,opt,name=policy_rule_id,json=policyRuleId,proto3" json:"policy_rule_id,omitempty"`
	BearerId       uint32        `protobuf:"varint,4,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
}

func (x *PolicyBearerBindingRequest) Reset() {
	*x = PolicyBearerBindingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyBearerBindingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyBearerBindingRequest) ProtoMessage() {}

func (x *PolicyBearerBindingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyBearerBindingRequest.ProtoReflect.Descriptor instead.
func (*PolicyBearerBindingRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{10}
}

func (x *PolicyBearerBindingRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *PolicyBearerBindingRequest) GetLinkedBearerId() uint32 {
	if x != nil {
		return x.LinkedBearerId
	}
	return 0
}

func (x *PolicyBearerBindingRequest) GetPolicyRuleId() string {
	if x != nil {
		return x.PolicyRuleId
	}
	return ""
}

func (x *PolicyBearerBindingRequest) GetBearerId() uint32 {
	if x != nil {
		return x.BearerId
	}
	return 0
}

type PolicyBearerBindingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyBearerBindingResponse) Reset() {
	*x = PolicyBearerBindingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyBearerBindingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyBearerBindingResponse) ProtoMessage() {}

func (x *PolicyBearerBindingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyBearerBindingResponse.ProtoReflect.Descriptor instead.
func (*PolicyBearerBindingResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{11}
}

type ChargingReAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId         string                     `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ChargingKey       uint32                     `protobuf:"varint,2,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Sid               string                     `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"`
	Type              ChargingReAuthRequest_Type `protobuf:"varint,4,opt,name=type,proto3,enum=magma.lte.ChargingReAuthRequest_Type" json:"type,omitempty"`
	ServiceIdentifier *ServiceIdentifier         `protobuf:"bytes,5,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
}

func (x *ChargingReAuthRequest) Reset() {
	*x = ChargingReAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingReAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingReAuthRequest) ProtoMessage() {}

func (x *ChargingReAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingReAuthRequest.ProtoReflect.Descriptor instead.
func (*ChargingReAuthRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{12}
}

func (x *ChargingReAuthRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChargingReAuthRequest) GetChargingKey() uint32 {
	if x != nil {
		return x.ChargingKey
	}
	return 0
}

func (x *ChargingReAuthRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *ChargingReAuthRequest) GetType() ChargingReAuthRequest_Type {
	if x != nil {
		return x.Type
	}
	return ChargingReAuthRequest_SINGLE_SERVICE
}

func (x *ChargingReAuthRequest) GetServiceIdentifier() *ServiceIdentifier {
	if x != nil {
		return x.ServiceIdentifier
	}
	return nil
}

type ChargingReAuthAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ReAuthResult `protobuf:"varint,1,opt,name=result,proto3,enum=magma.lte.ReAuthResult" json:"result,omitempty"`
}

func (x *ChargingReAuthAnswer) Reset() {
	*x = ChargingReAuthAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingReAuthAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingReAuthAnswer) ProtoMessage() {}

func (x *ChargingReAuthAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingReAuthAnswer.ProtoReflect.Descriptor instead.
func (*ChargingReAuthAnswer) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{13}
}

func (x *ChargingReAuthAnswer) GetResult() ReAuthResult {
	if x != nil {
		return x.Result
	}
	return ReAuthResult_UPDATE_INITIATED
}

type PolicyReAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: if no session_id is specified, apply to all sessions for the IMSI
	SessionId              string                   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Imsi                   string                   `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RulesToRemove          []string                 `protobuf:"bytes,3,rep,name=rules_to_remove,json=rulesToRemove,proto3" json:"rules_to_remove,omitempty"`
	RulesToInstall         []*StaticRuleInstall     `protobuf:"bytes,6,rep,name=rules_to_install,json=rulesToInstall,proto3" json:"rules_to_install,omitempty"`
	DynamicRulesToInstall  []*DynamicRuleInstall    `protobuf:"bytes,7,rep,name=dynamic_rules_to_install,json=dynamicRulesToInstall,proto3" json:"dynamic_rules_to_install,omitempty"`
	EventTriggers          []EventTrigger           `protobuf:"varint,8,rep,packed,name=event_triggers,json=eventTriggers,proto3,enum=magma.lte.EventTrigger" json:"event_triggers,omitempty"`
	RevalidationTime       *timestamp.Timestamp     `protobuf:"bytes,9,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
	UsageMonitoringCredits []*UsageMonitoringCredit `protobuf:"bytes,10,rep,name=usage_monitoring_credits,json=usageMonitoringCredits,proto3" json:"usage_monitoring_credits,omitempty"`
	QosInfo                *QoSInformation          `protobuf:"bytes,11,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`
}

func (x *PolicyReAuthRequest) Reset() {
	*x = PolicyReAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyReAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyReAuthRequest) ProtoMessage() {}

func (x *PolicyReAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyReAuthRequest.ProtoReflect.Descriptor instead.
func (*PolicyReAuthRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{14}
}

func (x *PolicyReAuthRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PolicyReAuthRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *PolicyReAuthRequest) GetRulesToRemove() []string {
	if x != nil {
		return x.RulesToRemove
	}
	return nil
}

func (x *PolicyReAuthRequest) GetRulesToInstall() []*StaticRuleInstall {
	if x != nil {
		return x.RulesToInstall
	}
	return nil
}

func (x *PolicyReAuthRequest) GetDynamicRulesToInstall() []*DynamicRuleInstall {
	if x != nil {
		return x.DynamicRulesToInstall
	}
	return nil
}

func (x *PolicyReAuthRequest) GetEventTriggers() []EventTrigger {
	if x != nil {
		return x.EventTriggers
	}
	return nil
}

func (x *PolicyReAuthRequest) GetRevalidationTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevalidationTime
	}
	return nil
}

func (x *PolicyReAuthRequest) GetUsageMonitoringCredits() []*UsageMonitoringCredit {
	if x != nil {
		return x.UsageMonitoringCredits
	}
	return nil
}

func (x *PolicyReAuthRequest) GetQosInfo() *QoSInformation {
	if x != nil {
		return x.QosInfo
	}
	return nil
}

type QoSInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BearerId string `protobuf:"bytes,1,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
	Qci      QCI    `protobuf:"varint,2,opt,name=qci,proto3,enum=magma.lte.QCI" json:"qci,omitempty"`
}

func (x *QoSInformation) Reset() {
	*x = QoSInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSInformation) ProtoMessage() {}

func (x *QoSInformation) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSInformation.ProtoReflect.Descriptor instead.
func (*QoSInformation) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{15}
}

func (x *QoSInformation) GetBearerId() string {
	if x != nil {
		return x.BearerId
	}
	return ""
}

func (x *QoSInformation) GetQci() QCI {
	if x != nil {
		return x.Qci
	}
	return QCI_QCI_0
}

type PolicyReAuthAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string                                    `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Result      ReAuthResult                              `protobuf:"varint,2,opt,name=result,proto3,enum=magma.lte.ReAuthResult" json:"result,omitempty"`
	FailedRules map[string]PolicyReAuthAnswer_FailureCode `protobuf:"bytes,3,rep,name=failed_rules,json=failedRules,proto3" json:"failed_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=magma.lte.PolicyReAuthAnswer_FailureCode"`
}

func (x *PolicyReAuthAnswer) Reset() {
	*x = PolicyReAuthAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyReAuthAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyReAuthAnswer) ProtoMessage() {}

func (x *PolicyReAuthAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyReAuthAnswer.ProtoReflect.Descriptor instead.
func (*PolicyReAuthAnswer) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{16}
}

func (x *PolicyReAuthAnswer) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PolicyReAuthAnswer) GetResult() ReAuthResult {
	if x != nil {
		return x.Result
	}
	return ReAuthResult_UPDATE_INITIATED
}

func (x *PolicyReAuthAnswer) GetFailedRules() map[string]PolicyReAuthAnswer_FailureCode {
	if x != nil {
		return x.FailedRules
	}
	return nil
}

type RuleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplySubscriberWide bool                  `protobuf:"varint,1,opt,name=apply_subscriber_wide,json=applySubscriberWide,proto3" json:"apply_subscriber_wide,omitempty"` // Apply the rules to all sessions for IMSI
	Apn                 string                `protobuf:"bytes,2,opt,name=apn,proto3" json:"apn,omitempty"`
	StaticRules         []*StaticRuleInstall  `protobuf:"bytes,3,rep,name=static_rules,json=staticRules,proto3" json:"static_rules,omitempty"`
	DynamicRules        []*DynamicRuleInstall `protobuf:"bytes,4,rep,name=dynamic_rules,json=dynamicRules,proto3" json:"dynamic_rules,omitempty"`
}

func (x *RuleSet) Reset() {
	*x = RuleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleSet) ProtoMessage() {}

func (x *RuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleSet.ProtoReflect.Descriptor instead.
func (*RuleSet) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{17}
}

func (x *RuleSet) GetApplySubscriberWide() bool {
	if x != nil {
		return x.ApplySubscriberWide
	}
	return false
}

func (x *RuleSet) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *RuleSet) GetStaticRules() []*StaticRuleInstall {
	if x != nil {
		return x.StaticRules
	}
	return nil
}

func (x *RuleSet) GetDynamicRules() []*DynamicRuleInstall {
	if x != nil {
		return x.DynamicRules
	}
	return nil
}

type RulesPerSubscriber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi    string     `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RuleSet []*RuleSet `protobuf:"bytes,3,rep,name=rule_set,json=ruleSet,proto3" json:"rule_set,omitempty"`
}

func (x *RulesPerSubscriber) Reset() {
	*x = RulesPerSubscriber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RulesPerSubscriber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulesPerSubscriber) ProtoMessage() {}

func (x *RulesPerSubscriber) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulesPerSubscriber.ProtoReflect.Descriptor instead.
func (*RulesPerSubscriber) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{18}
}

func (x *RulesPerSubscriber) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *RulesPerSubscriber) GetRuleSet() []*RuleSet {
	if x != nil {
		return x.RuleSet
	}
	return nil
}

type SessionRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RulesPerSubscriber []*RulesPerSubscriber `protobuf:"bytes,1,rep,name=rules_per_subscriber,json=rulesPerSubscriber,proto3" json:"rules_per_subscriber,omitempty"`
}

func (x *SessionRules) Reset() {
	*x = SessionRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRules) ProtoMessage() {}

func (x *SessionRules) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRules.ProtoReflect.Descriptor instead.
func (*SessionRules) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{19}
}

func (x *SessionRules) GetRulesPerSubscriber() []*RulesPerSubscriber {
	if x != nil {
		return x.RulesPerSubscriber
	}
	return nil
}

type Timezone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describe a timezone by offset from UTC in minutes
	OffsetMinutes int32 `protobuf:"varint,1,opt,name=offset_minutes,json=offsetMinutes,proto3" json:"offset_minutes,omitempty"`
}

func (x *Timezone) Reset() {
	*x = Timezone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timezone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timezone) ProtoMessage() {}

func (x *Timezone) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timezone.ProtoReflect.Descriptor instead.
func (*Timezone) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{20}
}

func (x *Timezone) GetOffsetMinutes() int32 {
	if x != nil {
		return x.OffsetMinutes
	}
	return 0
}

type CreditUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Volume  uint64 `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *CreditUnit) Reset() {
	*x = CreditUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUnit) ProtoMessage() {}

func (x *CreditUnit) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUnit.ProtoReflect.Descriptor instead.
func (*CreditUnit) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{21}
}

func (x *CreditUnit) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CreditUnit) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type GrantedUnits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total *CreditUnit `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Tx    *CreditUnit `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Rx    *CreditUnit `protobuf:"bytes,3,opt,name=rx,proto3" json:"rx,omitempty"`
}

func (x *GrantedUnits) Reset() {
	*x = GrantedUnits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantedUnits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedUnits) ProtoMessage() {}

func (x *GrantedUnits) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedUnits.ProtoReflect.Descriptor instead.
func (*GrantedUnits) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{22}
}

func (x *GrantedUnits) GetTotal() *CreditUnit {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *GrantedUnits) GetTx() *CreditUnit {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *GrantedUnits) GetRx() *CreditUnit {
	if x != nil {
		return x.Rx
	}
	return nil
}

type RedirectServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectAddressType   RedirectServer_RedirectAddressType `protobuf:"varint,1,opt,name=redirect_address_type,json=redirectAddressType,proto3,enum=magma.lte.RedirectServer_RedirectAddressType" json:"redirect_address_type,omitempty"`
	RedirectServerAddress string                             `protobuf:"bytes,2,opt,name=redirect_server_address,json=redirectServerAddress,proto3" json:"redirect_server_address,omitempty"`
}

func (x *RedirectServer) Reset() {
	*x = RedirectServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectServer) ProtoMessage() {}

func (x *RedirectServer) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectServer.ProtoReflect.Descriptor instead.
func (*RedirectServer) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{23}
}

func (x *RedirectServer) GetRedirectAddressType() RedirectServer_RedirectAddressType {
	if x != nil {
		return x.RedirectAddressType
	}
	return RedirectServer_IPV4
}

func (x *RedirectServer) GetRedirectServerAddress() string {
	if x != nil {
		return x.RedirectServerAddress
	}
	return ""
}

type ChargingCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           ChargingCredit_UnitType    `protobuf:"varint,2,opt,name=type,proto3,enum=magma.lte.ChargingCredit_UnitType" json:"type,omitempty"`
	ValidityTime   uint32                     `protobuf:"varint,3,opt,name=validity_time,json=validityTime,proto3" json:"validity_time,omitempty"` // seconds
	IsFinal        bool                       `protobuf:"varint,4,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	FinalAction    ChargingCredit_FinalAction `protobuf:"varint,5,opt,name=final_action,json=finalAction,proto3,enum=magma.lte.ChargingCredit_FinalAction" json:"final_action,omitempty"`
	GrantedUnits   *GrantedUnits              `protobuf:"bytes,6,opt,name=granted_units,json=grantedUnits,proto3" json:"granted_units,omitempty"`
	RedirectServer *RedirectServer            `protobuf:"bytes,7,opt,name=redirect_server,json=redirectServer,proto3" json:"redirect_server,omitempty"`
	RestrictRules  []string                   `protobuf:"bytes,8,rep,name=restrict_rules,json=restrictRules,proto3" json:"restrict_rules,omitempty"`
}

func (x *ChargingCredit) Reset() {
	*x = ChargingCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingCredit) ProtoMessage() {}

func (x *ChargingCredit) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingCredit.ProtoReflect.Descriptor instead.
func (*ChargingCredit) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{24}
}

func (x *ChargingCredit) GetType() ChargingCredit_UnitType {
	if x != nil {
		return x.Type
	}
	return ChargingCredit_BYTES
}

func (x *ChargingCredit) GetValidityTime() uint32 {
	if x != nil {
		return x.ValidityTime
	}
	return 0
}

func (x *ChargingCredit) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *ChargingCredit) GetFinalAction() ChargingCredit_FinalAction {
	if x != nil {
		return x.FinalAction
	}
	return ChargingCredit_TERMINATE
}

func (x *ChargingCredit) GetGrantedUnits() *GrantedUnits {
	if x != nil {
		return x.GrantedUnits
	}
	return nil
}

func (x *ChargingCredit) GetRedirectServer() *RedirectServer {
	if x != nil {
		return x.RedirectServer
	}
	return nil
}

func (x *ChargingCredit) GetRestrictRules() []string {
	if x != nil {
		return x.RestrictRules
	}
	return nil
}

type RequestedUnits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Tx    uint64 `protobuf:"varint,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Rx    uint64 `protobuf:"varint,3,opt,name=rx,proto3" json:"rx,omitempty"`
}

func (x *RequestedUnits) Reset() {
	*x = RequestedUnits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedUnits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedUnits) ProtoMessage() {}

func (x *RequestedUnits) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedUnits.ProtoReflect.Descriptor instead.
func (*RequestedUnits) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{25}
}

func (x *RequestedUnits) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RequestedUnits) GetTx() uint64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *RequestedUnits) GetRx() uint64 {
	if x != nil {
		return x.Rx
	}
	return 0
}

type CreditUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesTx           uint64                 `protobuf:"varint,1,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	BytesRx           uint64                 `protobuf:"varint,2,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	ChargingKey       uint32                 `protobuf:"varint,4,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Type              CreditUsage_UpdateType `protobuf:"varint,5,opt,name=type,proto3,enum=magma.lte.CreditUsage_UpdateType" json:"type,omitempty"`
	MonitoringKey     []byte                 `protobuf:"bytes,6,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	ServiceIdentifier *ServiceIdentifier     `protobuf:"bytes,7,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	RequestedUnits    *RequestedUnits        `protobuf:"bytes,8,opt,name=requested_units,json=requestedUnits,proto3" json:"requested_units,omitempty"`
}

func (x *CreditUsage) Reset() {
	*x = CreditUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUsage) ProtoMessage() {}

func (x *CreditUsage) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUsage.ProtoReflect.Descriptor instead.
func (*CreditUsage) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{26}
}

func (x *CreditUsage) GetBytesTx() uint64 {
	if x != nil {
		return x.BytesTx
	}
	return 0
}

func (x *CreditUsage) GetBytesRx() uint64 {
	if x != nil {
		return x.BytesRx
	}
	return 0
}

func (x *CreditUsage) GetChargingKey() uint32 {
	if x != nil {
		return x.ChargingKey
	}
	return 0
}

func (x *CreditUsage) GetType() CreditUsage_UpdateType {
	if x != nil {
		return x.Type
	}
	return CreditUsage_THRESHOLD
}

func (x *CreditUsage) GetMonitoringKey() []byte {
	if x != nil {
		return x.MonitoringKey
	}
	return nil
}

func (x *CreditUsage) GetServiceIdentifier() *ServiceIdentifier {
	if x != nil {
		return x.ServiceIdentifier
	}
	return nil
}

func (x *CreditUsage) GetRequestedUnits() *RequestedUnits {
	if x != nil {
		return x.RequestedUnits
	}
	return nil
}

type CreditUsageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage              *CreditUsage          `protobuf:"bytes,1,opt,name=usage,proto3" json:"usage,omitempty"`
	SessionId          string                `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RequestNumber      uint32                `protobuf:"varint,3,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"` // unique among session
	Sid                string                `protobuf:"bytes,4,opt,name=sid,proto3" json:"sid,omitempty"`                                           // System Identification Number
	Msisdn             []byte                `protobuf:"bytes,5,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	UeIpv4             string                `protobuf:"bytes,6,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	SpgwIpv4           string                `protobuf:"bytes,7,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Apn                string                `protobuf:"bytes,8,opt,name=apn,proto3" json:"apn,omitempty"`
	Imei               string                `protobuf:"bytes,9,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId             string                `protobuf:"bytes,10,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId         string                `protobuf:"bytes,11,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation       []byte                `protobuf:"bytes,12,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	RatType            RATType               `protobuf:"varint,13,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	HardwareAddr       []byte                `protobuf:"bytes,14,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"` // MAC Address for WLAN
	TgppCtx            *TgppContext          `protobuf:"bytes,15,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	CommonContext      *CommonSessionContext `protobuf:"bytes,16,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext *RatSpecificContext   `protobuf:"bytes,17,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
}

func (x *CreditUsageUpdate) Reset() {
	*x = CreditUsageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUsageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUsageUpdate) ProtoMessage() {}

func (x *CreditUsageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUsageUpdate.ProtoReflect.Descriptor instead.
func (*CreditUsageUpdate) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{27}
}

func (x *CreditUsageUpdate) GetUsage() *CreditUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *CreditUsageUpdate) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreditUsageUpdate) GetRequestNumber() uint32 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *CreditUsageUpdate) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *CreditUsageUpdate) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *CreditUsageUpdate) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *CreditUsageUpdate) GetSpgwIpv4() string {
	if x != nil {
		return x.SpgwIpv4
	}
	return ""
}

func (x *CreditUsageUpdate) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *CreditUsageUpdate) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *CreditUsageUpdate) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *CreditUsageUpdate) GetImsiPlmnId() string {
	if x != nil {
		return x.ImsiPlmnId
	}
	return ""
}

func (x *CreditUsageUpdate) GetUserLocation() []byte {
	if x != nil {
		return x.UserLocation
	}
	return nil
}

func (x *CreditUsageUpdate) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

func (x *CreditUsageUpdate) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

func (x *CreditUsageUpdate) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

func (x *CreditUsageUpdate) GetCommonContext() *CommonSessionContext {
	if x != nil {
		return x.CommonContext
	}
	return nil
}

func (x *CreditUsageUpdate) GetRatSpecificContext() *RatSpecificContext {
	if x != nil {
		return x.RatSpecificContext
	}
	return nil
}

type CreditUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success           bool               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Sid               string             `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"` // System Identification Number
	ChargingKey       uint32             `protobuf:"varint,3,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Credit            *ChargingCredit    `protobuf:"bytes,4,opt,name=credit,proto3" json:"credit,omitempty"`
	ResultCode        uint32             `protobuf:"varint,6,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	ServiceIdentifier *ServiceIdentifier `protobuf:"bytes,7,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	// When this is set to an infinite limit, field 'credit' should be ignored
	LimitType CreditLimitType `protobuf:"varint,9,opt,name=limit_type,json=limitType,proto3,enum=magma.lte.CreditLimitType" json:"limit_type,omitempty"`
	TgppCtx   *TgppContext    `protobuf:"bytes,10,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	SessionId string          `protobuf:"bytes,11,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *CreditUpdateResponse) Reset() {
	*x = CreditUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUpdateResponse) ProtoMessage() {}

func (x *CreditUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUpdateResponse.ProtoReflect.Descriptor instead.
func (*CreditUpdateResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{28}
}

func (x *CreditUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreditUpdateResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *CreditUpdateResponse) GetChargingKey() uint32 {
	if x != nil {
		return x.ChargingKey
	}
	return 0
}

func (x *CreditUpdateResponse) GetCredit() *ChargingCredit {
	if x != nil {
		return x.Credit
	}
	return nil
}

func (x *CreditUpdateResponse) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *CreditUpdateResponse) GetServiceIdentifier() *ServiceIdentifier {
	if x != nil {
		return x.ServiceIdentifier
	}
	return nil
}

func (x *CreditUpdateResponse) GetLimitType() CreditLimitType {
	if x != nil {
		return x.LimitType
	}
	return CreditLimitType_FINITE
}

func (x *CreditUpdateResponse) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

func (x *CreditUpdateResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Used amount for a usage monitor
type UsageMonitorUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitoringKey []byte          `protobuf:"bytes,1,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	Level         MonitoringLevel `protobuf:"varint,2,opt,name=level,proto3,enum=magma.lte.MonitoringLevel" json:"level,omitempty"`
	BytesTx       uint64          `protobuf:"varint,3,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	BytesRx       uint64          `protobuf:"varint,4,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
}

func (x *UsageMonitorUpdate) Reset() {
	*x = UsageMonitorUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitorUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitorUpdate) ProtoMessage() {}

func (x *UsageMonitorUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitorUpdate.ProtoReflect.Descriptor instead.
func (*UsageMonitorUpdate) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{29}
}

func (x *UsageMonitorUpdate) GetMonitoringKey() []byte {
	if x != nil {
		return x.MonitoringKey
	}
	return nil
}

func (x *UsageMonitorUpdate) GetLevel() MonitoringLevel {
	if x != nil {
		return x.Level
	}
	return MonitoringLevel_SESSION_LEVEL
}

func (x *UsageMonitorUpdate) GetBytesTx() uint64 {
	if x != nil {
		return x.BytesTx
	}
	return 0
}

func (x *UsageMonitorUpdate) GetBytesRx() uint64 {
	if x != nil {
		return x.BytesRx
	}
	return 0
}

// New received threshold for a usage monitor
type UsageMonitoringCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        UsageMonitoringCredit_Action `protobuf:"varint,1,opt,name=action,proto3,enum=magma.lte.UsageMonitoringCredit_Action" json:"action,omitempty"`
	MonitoringKey []byte                       `protobuf:"bytes,2,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	Level         MonitoringLevel              `protobuf:"varint,3,opt,name=level,proto3,enum=magma.lte.MonitoringLevel" json:"level,omitempty"`
	GrantedUnits  *GrantedUnits                `protobuf:"bytes,5,opt,name=granted_units,json=grantedUnits,proto3" json:"granted_units,omitempty"`
}

func (x *UsageMonitoringCredit) Reset() {
	*x = UsageMonitoringCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitoringCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitoringCredit) ProtoMessage() {}

func (x *UsageMonitoringCredit) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitoringCredit.ProtoReflect.Descriptor instead.
func (*UsageMonitoringCredit) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{30}
}

func (x *UsageMonitoringCredit) GetAction() UsageMonitoringCredit_Action {
	if x != nil {
		return x.Action
	}
	return UsageMonitoringCredit_CONTINUE
}

func (x *UsageMonitoringCredit) GetMonitoringKey() []byte {
	if x != nil {
		return x.MonitoringKey
	}
	return nil
}

func (x *UsageMonitoringCredit) GetLevel() MonitoringLevel {
	if x != nil {
		return x.Level
	}
	return MonitoringLevel_SESSION_LEVEL
}

func (x *UsageMonitoringCredit) GetGrantedUnits() *GrantedUnits {
	if x != nil {
		return x.GrantedUnits
	}
	return nil
}

// A request to update a usage monitor given its usage and session information
// TODO this message name is misleading since we don't only use it for
// usage reporting
type UsageMonitoringUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update        *UsageMonitorUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
	SessionId     string              `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RequestNumber uint32              `protobuf:"varint,3,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"` // unique among session
	Sid           string              `protobuf:"bytes,4,opt,name=sid,proto3" json:"sid,omitempty"`                                           // System Identification Number
	UeIpv4        string              `protobuf:"bytes,5,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	HardwareAddr  []byte              `protobuf:"bytes,6,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"` // MAC Address for WLAN
	RatType       RATType             `protobuf:"varint,7,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	TgppCtx       *TgppContext        `protobuf:"bytes,8,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	EventTrigger  EventTrigger        `protobuf:"varint,9,opt,name=event_trigger,json=eventTrigger,proto3,enum=magma.lte.EventTrigger" json:"event_trigger,omitempty"`
}

func (x *UsageMonitoringUpdateRequest) Reset() {
	*x = UsageMonitoringUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitoringUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitoringUpdateRequest) ProtoMessage() {}

func (x *UsageMonitoringUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitoringUpdateRequest.ProtoReflect.Descriptor instead.
func (*UsageMonitoringUpdateRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{31}
}

func (x *UsageMonitoringUpdateRequest) GetUpdate() *UsageMonitorUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UsageMonitoringUpdateRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UsageMonitoringUpdateRequest) GetRequestNumber() uint32 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *UsageMonitoringUpdateRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *UsageMonitoringUpdateRequest) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *UsageMonitoringUpdateRequest) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

func (x *UsageMonitoringUpdateRequest) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

func (x *UsageMonitoringUpdateRequest) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

func (x *UsageMonitoringUpdateRequest) GetEventTrigger() EventTrigger {
	if x != nil {
		return x.EventTrigger
	}
	return EventTrigger_SGSN_CHANGE
}

// Response to a usage monitor update with the credit received and session info
type UsageMonitoringUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credit                *UsageMonitoringCredit `protobuf:"bytes,1,opt,name=credit,proto3" json:"credit,omitempty"`
	SessionId             string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Sid                   string                 `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"` // System Identification Number
	Success               bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	EventTriggers         []EventTrigger         `protobuf:"varint,5,rep,packed,name=event_triggers,json=eventTriggers,proto3,enum=magma.lte.EventTrigger" json:"event_triggers,omitempty"`
	RevalidationTime      *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
	ResultCode            uint32                 `protobuf:"varint,7,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	RulesToRemove         []string               `protobuf:"bytes,8,rep,name=rules_to_remove,json=rulesToRemove,proto3" json:"rules_to_remove,omitempty"`
	StaticRulesToInstall  []*StaticRuleInstall   `protobuf:"bytes,9,rep,name=static_rules_to_install,json=staticRulesToInstall,proto3" json:"static_rules_to_install,omitempty"`
	DynamicRulesToInstall []*DynamicRuleInstall  `protobuf:"bytes,10,rep,name=dynamic_rules_to_install,json=dynamicRulesToInstall,proto3" json:"dynamic_rules_to_install,omitempty"`
	TgppCtx               *TgppContext           `protobuf:"bytes,11,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
}

func (x *UsageMonitoringUpdateResponse) Reset() {
	*x = UsageMonitoringUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitoringUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitoringUpdateResponse) ProtoMessage() {}

func (x *UsageMonitoringUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitoringUpdateResponse.ProtoReflect.Descriptor instead.
func (*UsageMonitoringUpdateResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{32}
}

func (x *UsageMonitoringUpdateResponse) GetCredit() *UsageMonitoringCredit {
	if x != nil {
		return x.Credit
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UsageMonitoringUpdateResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *UsageMonitoringUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UsageMonitoringUpdateResponse) GetEventTriggers() []EventTrigger {
	if x != nil {
		return x.EventTriggers
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetRevalidationTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevalidationTime
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *UsageMonitoringUpdateResponse) GetRulesToRemove() []string {
	if x != nil {
		return x.RulesToRemove
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetStaticRulesToInstall() []*StaticRuleInstall {
	if x != nil {
		return x.StaticRulesToInstall
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetDynamicRulesToInstall() []*DynamicRuleInstall {
	if x != nil {
		return x.DynamicRulesToInstall
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

// QoS Information to be sent in CCR-Init message
type QosInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnAmbrDl               uint32 `protobuf:"varint,1,opt,name=apn_ambr_dl,json=apnAmbrDl,proto3" json:"apn_ambr_dl,omitempty"`
	ApnAmbrUl               uint32 `protobuf:"varint,2,opt,name=apn_ambr_ul,json=apnAmbrUl,proto3" json:"apn_ambr_ul,omitempty"`
	PriorityLevel           uint32 `protobuf:"varint,3,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreemptionCapability    uint32 `protobuf:"varint,4,opt,name=preemption_capability,json=preemptionCapability,proto3" json:"preemption_capability,omitempty"`
	PreemptionVulnerability uint32 `protobuf:"varint,5,opt,name=preemption_vulnerability,json=preemptionVulnerability,proto3" json:"preemption_vulnerability,omitempty"`
	QosClassId              uint32 `protobuf:"varint,6,opt,name=qos_class_id,json=qosClassId,proto3" json:"qos_class_id,omitempty"`
}

func (x *QosInformationRequest) Reset() {
	*x = QosInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosInformationRequest) ProtoMessage() {}

func (x *QosInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosInformationRequest.ProtoReflect.Descriptor instead.
func (*QosInformationRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{33}
}

func (x *QosInformationRequest) GetApnAmbrDl() uint32 {
	if x != nil {
		return x.ApnAmbrDl
	}
	return 0
}

func (x *QosInformationRequest) GetApnAmbrUl() uint32 {
	if x != nil {
		return x.ApnAmbrUl
	}
	return 0
}

func (x *QosInformationRequest) GetPriorityLevel() uint32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *QosInformationRequest) GetPreemptionCapability() uint32 {
	if x != nil {
		return x.PreemptionCapability
	}
	return 0
}

func (x *QosInformationRequest) GetPreemptionVulnerability() uint32 {
	if x != nil {
		return x.PreemptionVulnerability
	}
	return 0
}

func (x *QosInformationRequest) GetQosClassId() uint32 {
	if x != nil {
		return x.QosClassId
	}
	return 0
}

// TgppContext is a session specific 3GPP context session proxy may meed session manager to persist
type TgppContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GxDestHost string `protobuf:"bytes,1,opt,name=gx_dest_host,json=gxDestHost,proto3" json:"gx_dest_host,omitempty"`
	GyDestHost string `protobuf:"bytes,2,opt,name=gy_dest_host,json=gyDestHost,proto3" json:"gy_dest_host,omitempty"`
}

func (x *TgppContext) Reset() {
	*x = TgppContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TgppContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TgppContext) ProtoMessage() {}

func (x *TgppContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TgppContext.ProtoReflect.Descriptor instead.
func (*TgppContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{34}
}

func (x *TgppContext) GetGxDestHost() string {
	if x != nil {
		return x.GxDestHost
	}
	return ""
}

func (x *TgppContext) GetGyDestHost() string {
	if x != nil {
		return x.GyDestHost
	}
	return ""
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessTimezone     *Timezone             `protobuf:"bytes,1,opt,name=access_timezone,json=accessTimezone,proto3" json:"access_timezone,omitempty"`
	SessionId          string                `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CommonContext      *CommonSessionContext `protobuf:"bytes,16,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext *RatSpecificContext   `protobuf:"bytes,17,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{35}
}

func (x *CreateSessionRequest) GetAccessTimezone() *Timezone {
	if x != nil {
		return x.AccessTimezone
	}
	return nil
}

func (x *CreateSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionRequest) GetCommonContext() *CommonSessionContext {
	if x != nil {
		return x.CommonContext
	}
	return nil
}

func (x *CreateSessionRequest) GetRatSpecificContext() *RatSpecificContext {
	if x != nil {
		return x.RatSpecificContext
	}
	return nil
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credits          []*CreditUpdateResponse          `protobuf:"bytes,1,rep,name=credits,proto3" json:"credits,omitempty"` // these will only have updates
	UsageMonitors    []*UsageMonitoringUpdateResponse `protobuf:"bytes,6,rep,name=usage_monitors,json=usageMonitors,proto3" json:"usage_monitors,omitempty"`
	StaticRules      []*StaticRuleInstall             `protobuf:"bytes,7,rep,name=static_rules,json=staticRules,proto3" json:"static_rules,omitempty"`    // static rules
	DynamicRules     []*DynamicRuleInstall            `protobuf:"bytes,8,rep,name=dynamic_rules,json=dynamicRules,proto3" json:"dynamic_rules,omitempty"` // dynamic rules
	SessionId        string                           `protobuf:"bytes,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TgppCtx          *TgppContext                     `protobuf:"bytes,10,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	EventTriggers    []EventTrigger                   `protobuf:"varint,11,rep,packed,name=event_triggers,json=eventTriggers,proto3,enum=magma.lte.EventTrigger" json:"event_triggers,omitempty"`
	RevalidationTime *timestamp.Timestamp             `protobuf:"bytes,12,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{36}
}

func (x *CreateSessionResponse) GetCredits() []*CreditUpdateResponse {
	if x != nil {
		return x.Credits
	}
	return nil
}

func (x *CreateSessionResponse) GetUsageMonitors() []*UsageMonitoringUpdateResponse {
	if x != nil {
		return x.UsageMonitors
	}
	return nil
}

func (x *CreateSessionResponse) GetStaticRules() []*StaticRuleInstall {
	if x != nil {
		return x.StaticRules
	}
	return nil
}

func (x *CreateSessionResponse) GetDynamicRules() []*DynamicRuleInstall {
	if x != nil {
		return x.DynamicRules
	}
	return nil
}

func (x *CreateSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionResponse) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

func (x *CreateSessionResponse) GetEventTriggers() []EventTrigger {
	if x != nil {
		return x.EventTriggers
	}
	return nil
}

func (x *CreateSessionResponse) GetRevalidationTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevalidationTime
	}
	return nil
}

type StaticRuleInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId         string               `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	ActivationTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	// Optional field. Set as 0 to mark as unused
	DeactivationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=deactivation_time,json=deactivationTime,proto3" json:"deactivation_time,omitempty"`
}

func (x *StaticRuleInstall) Reset() {
	*x = StaticRuleInstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticRuleInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRuleInstall) ProtoMessage() {}

func (x *StaticRuleInstall) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRuleInstall.ProtoReflect.Descriptor instead.
func (*StaticRuleInstall) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{37}
}

func (x *StaticRuleInstall) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *StaticRuleInstall) GetActivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActivationTime
	}
	return nil
}

func (x *StaticRuleInstall) GetDeactivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeactivationTime
	}
	return nil
}

type DynamicRuleInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyRule     *PolicyRule          `protobuf:"bytes,1,opt,name=policy_rule,json=policyRule,proto3" json:"policy_rule,omitempty"`
	ActivationTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	// Optional field. Set as 0 to mark as unused
	DeactivationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=deactivation_time,json=deactivationTime,proto3" json:"deactivation_time,omitempty"`
}

func (x *DynamicRuleInstall) Reset() {
	*x = DynamicRuleInstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicRuleInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicRuleInstall) ProtoMessage() {}

func (x *DynamicRuleInstall) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicRuleInstall.ProtoReflect.Descriptor instead.
func (*DynamicRuleInstall) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{38}
}

func (x *DynamicRuleInstall) GetPolicyRule() *PolicyRule {
	if x != nil {
		return x.PolicyRule
	}
	return nil
}

func (x *DynamicRuleInstall) GetActivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActivationTime
	}
	return nil
}

func (x *DynamicRuleInstall) GetDeactivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeactivationTime
	}
	return nil
}

type UpdateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates       []*CreditUsageUpdate            `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	UsageMonitors []*UsageMonitoringUpdateRequest `protobuf:"bytes,3,rep,name=usage_monitors,json=usageMonitors,proto3" json:"usage_monitors,omitempty"`
}

func (x *UpdateSessionRequest) Reset() {
	*x = UpdateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionRequest) ProtoMessage() {}

func (x *UpdateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateSessionRequest) GetUpdates() []*CreditUsageUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateSessionRequest) GetUsageMonitors() []*UsageMonitoringUpdateRequest {
	if x != nil {
		return x.UsageMonitors
	}
	return nil
}

type UpdateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses             []*CreditUpdateResponse          `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	UsageMonitorResponses []*UsageMonitoringUpdateResponse `protobuf:"bytes,3,rep,name=usage_monitor_responses,json=usageMonitorResponses,proto3" json:"usage_monitor_responses,omitempty"`
}

func (x *UpdateSessionResponse) Reset() {
	*x = UpdateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionResponse) ProtoMessage() {}

func (x *UpdateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionResponse.ProtoReflect.Descriptor instead.
func (*UpdateSessionResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateSessionResponse) GetResponses() []*CreditUpdateResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *UpdateSessionResponse) GetUsageMonitorResponses() []*UsageMonitoringUpdateResponse {
	if x != nil {
		return x.UsageMonitorResponses
	}
	return nil
}

type SessionTerminateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid       string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"` // System Identification Number
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionTerminateResponse) Reset() {
	*x = SessionTerminateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateResponse) ProtoMessage() {}

func (x *SessionTerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateResponse.ProtoReflect.Descriptor instead.
func (*SessionTerminateResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{41}
}

func (x *SessionTerminateResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *SessionTerminateResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SessionTerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid           string                `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"` // System Identification Number
	SessionId     string                `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Apn           string                `protobuf:"bytes,3,opt,name=apn,proto3" json:"apn,omitempty"`
	RequestNumber uint32                `protobuf:"varint,4,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	CreditUsages  []*CreditUsage        `protobuf:"bytes,5,rep,name=credit_usages,json=creditUsages,proto3" json:"credit_usages,omitempty"`
	MonitorUsages []*UsageMonitorUpdate `protobuf:"bytes,6,rep,name=monitor_usages,json=monitorUsages,proto3" json:"monitor_usages,omitempty"`
	UeIpv4        string                `protobuf:"bytes,7,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	Msisdn        []byte                `protobuf:"bytes,8,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	SpgwIpv4      string                `protobuf:"bytes,9,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Imei          string                `protobuf:"bytes,10,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId        string                `protobuf:"bytes,11,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId    string                `protobuf:"bytes,12,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation  []byte                `protobuf:"bytes,13,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	RatType       RATType               `protobuf:"varint,14,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	HardwareAddr  []byte                `protobuf:"bytes,15,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"` // MAC Address for WLAN
	TgppCtx       *TgppContext          `protobuf:"bytes,16,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
}

func (x *SessionTerminateRequest) Reset() {
	*x = SessionTerminateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateRequest) ProtoMessage() {}

func (x *SessionTerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateRequest.ProtoReflect.Descriptor instead.
func (*SessionTerminateRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{42}
}

func (x *SessionTerminateRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *SessionTerminateRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionTerminateRequest) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *SessionTerminateRequest) GetRequestNumber() uint32 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *SessionTerminateRequest) GetCreditUsages() []*CreditUsage {
	if x != nil {
		return x.CreditUsages
	}
	return nil
}

func (x *SessionTerminateRequest) GetMonitorUsages() []*UsageMonitorUpdate {
	if x != nil {
		return x.MonitorUsages
	}
	return nil
}

func (x *SessionTerminateRequest) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *SessionTerminateRequest) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *SessionTerminateRequest) GetSpgwIpv4() string {
	if x != nil {
		return x.SpgwIpv4
	}
	return ""
}

func (x *SessionTerminateRequest) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *SessionTerminateRequest) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *SessionTerminateRequest) GetImsiPlmnId() string {
	if x != nil {
		return x.ImsiPlmnId
	}
	return ""
}

func (x *SessionTerminateRequest) GetUserLocation() []byte {
	if x != nil {
		return x.UserLocation
	}
	return nil
}

func (x *SessionTerminateRequest) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

func (x *SessionTerminateRequest) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

func (x *SessionTerminateRequest) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

//M5GSMCapability
type M5GSMCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReflectiveQos            bool `protobuf:"varint,1,opt,name=reflective_qos,json=reflectiveQos,proto3" json:"reflective_qos,omitempty"`
	MultiHomedIpv6PduSession bool `protobuf:"varint,2,opt,name=multi_homed_ipv6_pdu_session,json=multiHomedIpv6PduSession,proto3" json:"multi_homed_ipv6_pdu_session,omitempty"`
}

func (x *M5GSMCapability) Reset() {
	*x = M5GSMCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M5GSMCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M5GSMCapability) ProtoMessage() {}

func (x *M5GSMCapability) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M5GSMCapability.ProtoReflect.Descriptor instead.
func (*M5GSMCapability) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{43}
}

func (x *M5GSMCapability) GetReflectiveQos() bool {
	if x != nil {
		return x.ReflectiveQos
	}
	return false
}

func (x *M5GSMCapability) GetMultiHomedIpv6PduSession() bool {
	if x != nil {
		return x.MultiHomedIpv6PduSession
	}
	return false
}

//RequestedQosRules and AuthorizedQosRules
type QosRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosRuleIdentifier      uint32  `protobuf:"varint,1,opt,name=qos_rule_identifier,json=qosRuleIdentifier,proto3" json:"qos_rule_identifier,omitempty"`
	Dqr                    bool    `protobuf:"varint,2,opt,name=dqr,proto3" json:"dqr,omitempty"`
	NumberOfPacketFilters  uint32  `protobuf:"varint,3,opt,name=number_of_packet_filters,json=numberOfPacketFilters,proto3" json:"number_of_packet_filters,omitempty"`
	PacketFilterIdentifier []int32 `protobuf:"varint,4,rep,packed,name=packet_filter_identifier,json=packetFilterIdentifier,proto3" json:"packet_filter_identifier,omitempty"`
	QosRulePrecedence      uint32  `protobuf:"varint,5,opt,name=qos_rule_precedence,json=qosRulePrecedence,proto3" json:"qos_rule_precedence,omitempty"`
	Segregation            bool    `protobuf:"varint,6,opt,name=segregation,proto3" json:"segregation,omitempty"`
	QosFlowIdentifier      uint32  `protobuf:"varint,7,opt,name=qos_flow_identifier,json=qosFlowIdentifier,proto3" json:"qos_flow_identifier,omitempty"`
}

func (x *QosRules) Reset() {
	*x = QosRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosRules) ProtoMessage() {}

func (x *QosRules) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosRules.ProtoReflect.Descriptor instead.
func (*QosRules) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{44}
}

func (x *QosRules) GetQosRuleIdentifier() uint32 {
	if x != nil {
		return x.QosRuleIdentifier
	}
	return 0
}

func (x *QosRules) GetDqr() bool {
	if x != nil {
		return x.Dqr
	}
	return false
}

func (x *QosRules) GetNumberOfPacketFilters() uint32 {
	if x != nil {
		return x.NumberOfPacketFilters
	}
	return 0
}

func (x *QosRules) GetPacketFilterIdentifier() []int32 {
	if x != nil {
		return x.PacketFilterIdentifier
	}
	return nil
}

func (x *QosRules) GetQosRulePrecedence() uint32 {
	if x != nil {
		return x.QosRulePrecedence
	}
	return 0
}

func (x *QosRules) GetSegregation() bool {
	if x != nil {
		return x.Segregation
	}
	return false
}

func (x *QosRules) GetQosFlowIdentifier() uint32 {
	if x != nil {
		return x.QosFlowIdentifier
	}
	return 0
}

type LadnServiceArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnnValue     string                      `protobuf:"bytes,1,opt,name=dnn_value,json=dnnValue,proto3" json:"dnn_value,omitempty"`
	IdentityList []*TrackingAreaIdentityList `protobuf:"bytes,2,rep,name=identity_list,json=identityList,proto3" json:"identity_list,omitempty"`
}

func (x *LadnServiceArea) Reset() {
	*x = LadnServiceArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadnServiceArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadnServiceArea) ProtoMessage() {}

func (x *LadnServiceArea) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadnServiceArea.ProtoReflect.Descriptor instead.
func (*LadnServiceArea) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{45}
}

func (x *LadnServiceArea) GetDnnValue() string {
	if x != nil {
		return x.DnnValue
	}
	return ""
}

func (x *LadnServiceArea) GetIdentityList() []*TrackingAreaIdentityList {
	if x != nil {
		return x.IdentityList
	}
	return nil
}

type TrackingAreaIdentityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeOfList       []TypeOfList `protobuf:"varint,1,rep,packed,name=type_of_list,json=typeOfList,proto3,enum=magma.lte.TypeOfList" json:"type_of_list,omitempty"`
	NumberOfElements []int32      `protobuf:"varint,2,rep,packed,name=number_of_elements,json=numberOfElements,proto3" json:"number_of_elements,omitempty"`
	MCC              string       `protobuf:"bytes,3,opt,name=MCC,proto3" json:"MCC,omitempty"`
	MNC              string       `protobuf:"bytes,4,opt,name=MNC,proto3" json:"MNC,omitempty"`
	TAC              string       `protobuf:"bytes,5,opt,name=TAC,proto3" json:"TAC,omitempty"` // tac is havaing length 8 bytes,MCC is 3 bytes, MNC is 3 bytes
}

func (x *TrackingAreaIdentityList) Reset() {
	*x = TrackingAreaIdentityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackingAreaIdentityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackingAreaIdentityList) ProtoMessage() {}

func (x *TrackingAreaIdentityList) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackingAreaIdentityList.ProtoReflect.Descriptor instead.
func (*TrackingAreaIdentityList) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{46}
}

func (x *TrackingAreaIdentityList) GetTypeOfList() []TypeOfList {
	if x != nil {
		return x.TypeOfList
	}
	return nil
}

func (x *TrackingAreaIdentityList) GetNumberOfElements() []int32 {
	if x != nil {
		return x.NumberOfElements
	}
	return nil
}

func (x *TrackingAreaIdentityList) GetMCC() string {
	if x != nil {
		return x.MCC
	}
	return ""
}

func (x *TrackingAreaIdentityList) GetMNC() string {
	if x != nil {
		return x.MNC
	}
	return ""
}

func (x *TrackingAreaIdentityList) GetTAC() string {
	if x != nil {
		return x.TAC
	}
	return ""
}

//PDU session Establishment from AMF to SMF
//SET MESSSAGE
type M5GSMSessionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduSessionId     []byte          `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`                     //One byte
	RquestType       RequestType     `protobuf:"varint,2,opt,name=rquest_type,json=rquestType,proto3,enum=magma.lte.RequestType" json:"rquest_type,omitempty"` //Define ENUM 24-501 - 9.11.3.47 . 1 byte. i.e. initial requerst, existing pdusession etc...
	PduAddress       *RedirectServer `protobuf:"bytes,3,opt,name=pdu_address,json=pduAddress,proto3" json:"pdu_address,omitempty"`                             //IP address. Imported from session_manager.proto file
	PriorityAccess   Priorityaccess  `protobuf:"varint,4,opt,name=priority_access,json=priorityAccess,proto3,enum=magma.lte.Priorityaccess" json:"priority_access,omitempty"`
	AccessType       AccessType      `protobuf:"varint,5,opt,name=access_type,json=accessType,proto3,enum=magma.lte.AccessType" json:"access_type,omitempty"` //Define enum TS-29.571 - section 5.4.3
	Sid              *SubscriberID   `protobuf:"bytes,25,opt,name=sid,proto3" json:"sid,omitempty"`
	Imei             string          `protobuf:"bytes,8,opt,name=imei,proto3" json:"imei,omitempty"`                                                    // pei - permanent equipment ID. Variable length of 16 bytes. TS-23.003 - 6.4 Like IMEI or IMEISV
	Gpsi             string          `protobuf:"bytes,9,opt,name=gpsi,proto3" json:"gpsi,omitempty"`                                                    //Lenght is 10 bytes + 2 bytes country code generic public subscription id.
	UserLocationInfo string          `protobuf:"bytes,10,opt,name=user_location_info,json=userLocationInfo,proto3" json:"user_location_info,omitempty"` //up to 6 byte. TS-23.003 - 28.15.3
	PcfId            string          `protobuf:"bytes,11,opt,name=pcf_id,json=pcfId,proto3" json:"pcf_id,omitempty"`                                    //length 16 bytes as UUID "Universally Unique IDentifier" TS-29.571 to ietf rfc 4122
	//Variable length of 20 bytes. TS-23.003 - 28.8 & TS-23.501 5.9.8
	LadnServiceArea                 []*LadnServiceArea `protobuf:"bytes,12,rep,name=ladn_service_area,json=ladnServiceArea,proto3" json:"ladn_service_area,omitempty"`                                                      //Length is 10 bytes, like PLMN
	PduSessionStatusNotificationSub bool               `protobuf:"varint,13,opt,name=pdu_session_status_notification_sub,json=pduSessionStatusNotificationSub,proto3" json:"pdu_session_status_notification_sub,omitempty"` //Subscription For PDU Session Status Notification true or false
	DnnSelectionMode                DnnSelectionMode   `protobuf:"varint,14,opt,name=dnn_selection_mode,json=dnnSelectionMode,proto3,enum=magma.lte.DnnSelectionMode" json:"dnn_selection_mode,omitempty"`                  // TS-29-502 - 6.1.6.3.10
	TraceRequirment                 string             `protobuf:"bytes,15,opt,name=trace_requirment,json=traceRequirment,proto3" json:"trace_requirment,omitempty"`                                                        // TS-29.571 5.6.
	IntegrityProtectionMaxDataRate  []byte             `protobuf:"bytes,16,opt,name=integrity_protection_max_data_rate,json=integrityProtectionMaxDataRate,proto3" json:"integrity_protection_max_data_rate,omitempty"`     //Length is 3 bytes, TS-24.501 9.11.4.7
	PduSessionType                  PduSessionType     `protobuf:"varint,17,opt,name=pdu_session_type,json=pduSessionType,proto3,enum=magma.lte.PduSessionType" json:"pdu_session_type,omitempty"`
	SscMode                         SscMode            `protobuf:"varint,18,opt,name=ssc_mode,json=sscMode,proto3,enum=magma.lte.SscMode" json:"ssc_mode,omitempty"`
	M5GSmCapability                 *M5GSMCapability   `protobuf:"bytes,19,opt,name=m5g_sm_capability,json=m5gSmCapability,proto3" json:"m5g_sm_capability,omitempty"`                        // max size go up to 15 bytes. TLV and 9.11.4.1.
	MaxPktFilterSupported           uint32             `protobuf:"varint,20,opt,name=max_pkt_filter_supported,json=maxPktFilterSupported,proto3" json:"max_pkt_filter_supported,omitempty"`   //Maximum no. of supported packet filters
	PduSessionReqAlwaysOn           bool               `protobuf:"varint,21,opt,name=pdu_session_req_always_on,json=pduSessionReqAlwaysOn,proto3" json:"pdu_session_req_always_on,omitempty"` //Always-on PDU session requested TS-24.501 9.11.4.4
	SmPduDnReq                      string             `protobuf:"bytes,22,opt,name=sm_pdu_dn_req,json=smPduDnReq,proto3" json:"sm_pdu_dn_req,omitempty"`                                     //SM PDU DN request container. Max size up to 255. TLV and 9.11.4.16.
	M5GsmCause                      M5GSMCause         `protobuf:"varint,23,opt,name=m5gsm_cause,json=m5gsmCause,proto3,enum=magma.lte.M5GSMCause" json:"m5gsm_cause,omitempty"`
	RequestedQosRules               *QosRules          `protobuf:"bytes,24,opt,name=requested_qos_rules,json=requestedQosRules,proto3" json:"requested_qos_rules,omitempty"` //TS-24501 - 9.11.4.13 minimum 7 and max 65538, variable length.
}

func (x *M5GSMSessionContext) Reset() {
	*x = M5GSMSessionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M5GSMSessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M5GSMSessionContext) ProtoMessage() {}

func (x *M5GSMSessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M5GSMSessionContext.ProtoReflect.Descriptor instead.
func (*M5GSMSessionContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{47}
}

func (x *M5GSMSessionContext) GetPduSessionId() []byte {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *M5GSMSessionContext) GetRquestType() RequestType {
	if x != nil {
		return x.RquestType
	}
	return RequestType_INITIAL_REQUEST
}

func (x *M5GSMSessionContext) GetPduAddress() *RedirectServer {
	if x != nil {
		return x.PduAddress
	}
	return nil
}

func (x *M5GSMSessionContext) GetPriorityAccess() Priorityaccess {
	if x != nil {
		return x.PriorityAccess
	}
	return Priorityaccess_High
}

func (x *M5GSMSessionContext) GetAccessType() AccessType {
	if x != nil {
		return x.AccessType
	}
	return AccessType_M_3GPP_ACCESS_3GPP
}

func (x *M5GSMSessionContext) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *M5GSMSessionContext) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *M5GSMSessionContext) GetGpsi() string {
	if x != nil {
		return x.Gpsi
	}
	return ""
}

func (x *M5GSMSessionContext) GetUserLocationInfo() string {
	if x != nil {
		return x.UserLocationInfo
	}
	return ""
}

func (x *M5GSMSessionContext) GetPcfId() string {
	if x != nil {
		return x.PcfId
	}
	return ""
}

func (x *M5GSMSessionContext) GetLadnServiceArea() []*LadnServiceArea {
	if x != nil {
		return x.LadnServiceArea
	}
	return nil
}

func (x *M5GSMSessionContext) GetPduSessionStatusNotificationSub() bool {
	if x != nil {
		return x.PduSessionStatusNotificationSub
	}
	return false
}

func (x *M5GSMSessionContext) GetDnnSelectionMode() DnnSelectionMode {
	if x != nil {
		return x.DnnSelectionMode
	}
	return DnnSelectionMode_VERIFIED
}

func (x *M5GSMSessionContext) GetTraceRequirment() string {
	if x != nil {
		return x.TraceRequirment
	}
	return ""
}

func (x *M5GSMSessionContext) GetIntegrityProtectionMaxDataRate() []byte {
	if x != nil {
		return x.IntegrityProtectionMaxDataRate
	}
	return nil
}

func (x *M5GSMSessionContext) GetPduSessionType() PduSessionType {
	if x != nil {
		return x.PduSessionType
	}
	return PduSessionType_IPV4
}

func (x *M5GSMSessionContext) GetSscMode() SscMode {
	if x != nil {
		return x.SscMode
	}
	return SscMode_SSC_MODE_1
}

func (x *M5GSMSessionContext) GetM5GSmCapability() *M5GSMCapability {
	if x != nil {
		return x.M5GSmCapability
	}
	return nil
}

func (x *M5GSMSessionContext) GetMaxPktFilterSupported() uint32 {
	if x != nil {
		return x.MaxPktFilterSupported
	}
	return 0
}

func (x *M5GSMSessionContext) GetPduSessionReqAlwaysOn() bool {
	if x != nil {
		return x.PduSessionReqAlwaysOn
	}
	return false
}

func (x *M5GSMSessionContext) GetSmPduDnReq() string {
	if x != nil {
		return x.SmPduDnReq
	}
	return ""
}

func (x *M5GSMSessionContext) GetM5GsmCause() M5GSMCause {
	if x != nil {
		return x.M5GsmCause
	}
	return M5GSMCause_OPERATOR_DETERMINED_BARRING
}

func (x *M5GSMSessionContext) GetRequestedQosRules() *QosRules {
	if x != nil {
		return x.RequestedQosRules
	}
	return nil
}

type SetSMSessionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonContext      *CommonSessionContext `protobuf:"bytes,1,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"` //Common message for 4g, 5g and WiFi.
	RatSpecificContext *RatSpecificContext   `protobuf:"bytes,2,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
}

func (x *SetSMSessionContext) Reset() {
	*x = SetSMSessionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSMSessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSMSessionContext) ProtoMessage() {}

func (x *SetSMSessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSMSessionContext.ProtoReflect.Descriptor instead.
func (*SetSMSessionContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{48}
}

func (x *SetSMSessionContext) GetCommonContext() *CommonSessionContext {
	if x != nil {
		return x.CommonContext
	}
	return nil
}

func (x *SetSMSessionContext) GetRatSpecificContext() *RatSpecificContext {
	if x != nil {
		return x.RatSpecificContext
	}
	return nil
}

//TODO This supposed to be empty message and the element will be removed later
type SmContextVoid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *SmContextVoid) Reset() {
	*x = SmContextVoid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmContextVoid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmContextVoid) ProtoMessage() {}

func (x *SmContextVoid) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmContextVoid.ProtoReflect.Descriptor instead.
func (*SmContextVoid) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{49}
}

func (x *SmContextVoid) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

//4G response message has not been refactored yet. Hence only considering M5G.
type RatSpecificContextAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//oneof context {//TODO need to be implemented after 4G refactored
	//LTESessionContextAccess lte_context = 1;
	M5GSessionContextRsp *M5GSMSessionContextAccess `protobuf:"bytes,2,opt,name=m5g_session_context_rsp,json=m5gSessionContextRsp,proto3" json:"m5g_session_context_rsp,omitempty"` //}
}

func (x *RatSpecificContextAccess) Reset() {
	*x = RatSpecificContextAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatSpecificContextAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatSpecificContextAccess) ProtoMessage() {}

func (x *RatSpecificContextAccess) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatSpecificContextAccess.ProtoReflect.Descriptor instead.
func (*RatSpecificContextAccess) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{50}
}

func (x *RatSpecificContextAccess) GetM5GSessionContextRsp() *M5GSMSessionContextAccess {
	if x != nil {
		return x.M5GSessionContextRsp
	}
	return nil
}

type M5GSMSessionContextAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//One byte, received from UE. For 5G pdu_session_id.
	PduSessionId []byte `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	//selected PDU session TS-24501 - 9.11.4.11
	PduSessionType PduSessionType `protobuf:"varint,2,opt,name=pdu_session_type,json=pduSessionType,proto3,enum=magma.lte.PduSessionType" json:"pdu_session_type,omitempty"`
	//selected session and service continuty mode TS-24501 - 9.11.4.16
	SelectedSscMode SscMode `protobuf:"varint,3,opt,name=selected_ssc_mode,json=selectedSscMode,proto3,enum=magma.lte.SscMode" json:"selected_ssc_mode,omitempty"`
	//TS-24501 - 9.11.4.3 - minimum 7 and max 65538, variable length
	AuthorizedQosRules []*QosRules `protobuf:"bytes,4,rep,name=authorized_qos_rules,json=authorizedQosRules,proto3" json:"authorized_qos_rules,omitempty"`
	//TS-24501 - 9.11.4.14 PDU session Aggregate Maximum Bit Rate imported from subscriberdb.proto
	SessionAmbr *AggregatedMaximumBitrate `protobuf:"bytes,5,opt,name=session_ambr,json=sessionAmbr,proto3" json:"session_ambr,omitempty"`
	M5GsmCause  M5GSMCause                `protobuf:"varint,6,opt,name=M5gsm_cause,json=M5gsmCause,proto3,enum=magma.lte.M5GSMCause" json:"M5gsm_cause,omitempty"` //TS-24501 - 9.11.4.2
	//PDU session is requested to be established as always-on PDU session.
	AlwaysOnPduSessionIndication     bool    `protobuf:"varint,7,opt,name=always_on_pdu_session_indication,json=alwaysOnPduSessionIndication,proto3" json:"always_on_pdu_session_indication,omitempty"`
	AllowedSscMode                   SscMode `protobuf:"varint,8,opt,name=allowed_ssc_mode,json=allowedSscMode,proto3,enum=magma.lte.SscMode" json:"allowed_ssc_mode,omitempty"` //Indicates SSC mode.
	M5GsmCongetionReAttemptIndicator bool    `protobuf:"varint,9,opt,name=M5gsm_congetion_re_attempt_indicator,json=M5gsmCongetionReAttemptIndicator,proto3" json:"M5gsm_congetion_re_attempt_indicator,omitempty"`
	//IP address. Imported from session_manager.proto file.
	PduAddress *RedirectServer `protobuf:"bytes,12,opt,name=pdu_address,json=pduAddress,proto3" json:"pdu_address,omitempty"`
}

func (x *M5GSMSessionContextAccess) Reset() {
	*x = M5GSMSessionContextAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M5GSMSessionContextAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M5GSMSessionContextAccess) ProtoMessage() {}

func (x *M5GSMSessionContextAccess) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M5GSMSessionContextAccess.ProtoReflect.Descriptor instead.
func (*M5GSMSessionContextAccess) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{51}
}

func (x *M5GSMSessionContextAccess) GetPduSessionId() []byte {
	if x != nil {
		return x.PduSessionId
	}
	return nil
}

func (x *M5GSMSessionContextAccess) GetPduSessionType() PduSessionType {
	if x != nil {
		return x.PduSessionType
	}
	return PduSessionType_IPV4
}

func (x *M5GSMSessionContextAccess) GetSelectedSscMode() SscMode {
	if x != nil {
		return x.SelectedSscMode
	}
	return SscMode_SSC_MODE_1
}

func (x *M5GSMSessionContextAccess) GetAuthorizedQosRules() []*QosRules {
	if x != nil {
		return x.AuthorizedQosRules
	}
	return nil
}

func (x *M5GSMSessionContextAccess) GetSessionAmbr() *AggregatedMaximumBitrate {
	if x != nil {
		return x.SessionAmbr
	}
	return nil
}

func (x *M5GSMSessionContextAccess) GetM5GsmCause() M5GSMCause {
	if x != nil {
		return x.M5GsmCause
	}
	return M5GSMCause_OPERATOR_DETERMINED_BARRING
}

func (x *M5GSMSessionContextAccess) GetAlwaysOnPduSessionIndication() bool {
	if x != nil {
		return x.AlwaysOnPduSessionIndication
	}
	return false
}

func (x *M5GSMSessionContextAccess) GetAllowedSscMode() SscMode {
	if x != nil {
		return x.AllowedSscMode
	}
	return SscMode_SSC_MODE_1
}

func (x *M5GSMSessionContextAccess) GetM5GsmCongetionReAttemptIndicator() bool {
	if x != nil {
		return x.M5GsmCongetionReAttemptIndicator
	}
	return false
}

func (x *M5GSMSessionContextAccess) GetPduAddress() *RedirectServer {
	if x != nil {
		return x.PduAddress
	}
	return nil
}

type SetSMSessionContextAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonContext      *CommonSessionContext     `protobuf:"bytes,1,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"` //Common message for 4g, 5g and WiFi.
	RatSpecificContext *RatSpecificContextAccess `protobuf:"bytes,2,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
}

func (x *SetSMSessionContextAccess) Reset() {
	*x = SetSMSessionContextAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_session_manager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSMSessionContextAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSMSessionContextAccess) ProtoMessage() {}

func (x *SetSMSessionContextAccess) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_session_manager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSMSessionContextAccess.ProtoReflect.Descriptor instead.
func (*SetSMSessionContextAccess) Descriptor() ([]byte, []int) {
	return file_lte_protos_session_manager_proto_rawDescGZIP(), []int{52}
}

func (x *SetSMSessionContextAccess) GetCommonContext() *CommonSessionContext {
	if x != nil {
		return x.CommonContext
	}
	return nil
}

func (x *SetSMSessionContextAccess) GetRatSpecificContext() *RatSpecificContextAccess {
	if x != nil {
		return x.RatSpecificContext
	}
	return nil
}

var File_lte_protos_session_manager_proto protoreflect.FileDescriptor

var file_lte_protos_session_manager_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x1a, 0x19, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x72, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x65, 0x49, 0x70, 0x76, 0x34, 0x22, 0x58, 0x0a, 0x0f,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0xb4, 0x01, 0x0a, 0x19, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x14,
	0x72, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x72, 0x61, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc2, 0x02,
	0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03, 0x73, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x73,
	0x69, 0x73, 0x64, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x4d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x53, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x6d, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x65, 0x49, 0x70,
	0x76, 0x36, 0x22, 0xfa, 0x01, 0x0a, 0x12, 0x52, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x54, 0x45, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x6c, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x77, 0x6c,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x57, 0x4c, 0x41,
	0x4e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x77, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x54,
	0x0a, 0x15, 0x6d, 0x35, 0x67, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4d, 0x35, 0x47, 0x53, 0x4d, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x6d, 0x35, 0x67, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xfe, 0x01, 0x0a, 0x11, 0x4c, 0x54, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x67, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x73, 0x69, 0x50, 0x6c, 0x6d, 0x6e, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x71, 0x6f, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x83, 0x01, 0x0a, 0x12, 0x57, 0x4c, 0x41, 0x4e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x16, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x15,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x4e, 0x54, 0x49, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x22, 0x47, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xab, 0x04, 0x0a, 0x13, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x46, 0x0a,
	0x10, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x18, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x3e, 0x0a,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a,
	0x11, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x16, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x51, 0x6f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x71, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a, 0x0e, 0x51, 0x6f, 0x53, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x71, 0x63, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x51, 0x43, 0x49, 0x52, 0x03, 0x71, 0x63, 0x69, 0x22, 0x95, 0x08, 0x0a, 0x12, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x51, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x10, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0,
	0x05, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x57, 0x5f, 0x50, 0x43,
	0x45, 0x46, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41,
	0x58, 0x5f, 0x4e, 0x52, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x45, 0x44, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x46, 0x55, 0x4c, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x53,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x24, 0x0a, 0x20, 0x54,
	0x44, 0x46, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x10, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x4e, 0x5f, 0x47, 0x57, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4d, 0x5f, 0x45, 0x4e, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4d, 0x5f, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x16,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4d, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f,
	0x5f, 0x4e, 0x42, 0x49, 0x46, 0x4f, 0x4d, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x1a, 0x22, 0xd4, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x77, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x57, 0x69, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x12, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x22, 0x5f, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x4f, 0x0a, 0x14, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x12,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x22, 0x31, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x02, 0x74, 0x78, 0x12, 0x25, 0x0a, 0x02, 0x72,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x02,
	0x72, 0x78, 0x22, 0xec, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x13, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x3f, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x52, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x50, 0x5f, 0x55, 0x52, 0x49, 0x10,
	0x03, 0x22, 0xe0, 0x03, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x0c,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x22, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x53, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02,
	0x72, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x78, 0x22, 0x99, 0x04, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x48, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x45, 0x58, 0x48,
	0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x22, 0x8d, 0x05, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x67, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x6d, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x73, 0x69, 0x50, 0x6c, 0x6d,
	0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x72, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x31, 0x0a, 0x08,
	0x74, 0x67, 0x70, 0x70, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x12,
	0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x72, 0x61, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x52, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x72, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x06, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08,
	0x74, 0x67, 0x70, 0x70, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa3,
	0x01, 0x0a, 0x12, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x78, 0x22, 0x9f, 0x02, 0x0a, 0x15, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x3f,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x10, 0x02, 0x22, 0x8b, 0x03, 0x0a, 0x1c, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x65, 0x49, 0x70, 0x76, 0x34, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x67, 0x70, 0x70, 0x5f, 0x63, 0x74, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x74,
	0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x22, 0xd6, 0x04, 0x0a, 0x1d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x72,
	0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x53, 0x0a,
	0x17, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x14, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x18, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x67,
	0x70, 0x70, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x22, 0x90, 0x02,
	0x0a, 0x15, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x70, 0x6e, 0x5f, 0x61,
	0x6d, 0x62, 0x72, 0x5f, 0x64, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x70,
	0x6e, 0x41, 0x6d, 0x62, 0x72, 0x44, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x70, 0x6e, 0x5f, 0x61,
	0x6d, 0x62, 0x72, 0x5f, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x70,
	0x6e, 0x41, 0x6d, 0x62, 0x72, 0x55, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0c, 0x71, 0x6f, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x6f, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x22, 0x51, 0x0a, 0x0b, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x67, 0x78, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x78, 0x44, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x79, 0x44, 0x65, 0x73, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x4f, 0x0a, 0x14, 0x72, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12,
	0x72, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x83, 0x04, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52,
	0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08,
	0x74, 0x67, 0x70, 0x70, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x12,
	0x3e, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12,
	0x47, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11,
	0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x0b,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x17,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x4b,
	0x0a, 0x18, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xcf, 0x04, 0x0a, 0x17,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d,
	0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x67, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x73, 0x69, 0x50, 0x6c, 0x6d, 0x6e, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x67,
	0x70, 0x70, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x22, 0x78, 0x0a,
	0x0f, 0x4d, 0x35, 0x47, 0x53, 0x4d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x64, 0x75, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x48, 0x6f, 0x6d, 0x65, 0x64, 0x49, 0x70, 0x76, 0x36, 0x50, 0x64, 0x75,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x02, 0x0a, 0x08, 0x51, 0x6f, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x71, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x64, 0x71, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x71, 0x6f, 0x73,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x73, 0x65, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x71,
	0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x0f, 0x4c,
	0x61, 0x64, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6e, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6e, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x43, 0x43,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x43, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x4d,
	0x4e, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x4e, 0x43, 0x12, 0x10, 0x0a,
	0x03, 0x54, 0x41, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x41, 0x43, 0x22,
	0xeb, 0x09, 0x0a, 0x13, 0x4d, 0x35, 0x47, 0x53, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x72, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x64, 0x75, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x64, 0x75, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65,
	0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x70, 0x73, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x70, 0x73,
	0x69, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x63, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x63, 0x66, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x64, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x61,
	0x64, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0f, 0x6c,
	0x61, 0x64, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x4c,
	0x0a, 0x23, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x70, 0x64, 0x75,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x12, 0x49, 0x0a, 0x12,
	0x64, 0x6e, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x6e, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x64, 0x6e, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x43,
	0x0a, 0x10, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x73, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x73, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x73, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x35, 0x67, 0x5f, 0x73, 0x6d, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4d, 0x35, 0x47, 0x53, 0x4d, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x6d, 0x35, 0x67, 0x53, 0x6d,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61,
	0x78, 0x50, 0x6b, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f, 0x6e, 0x12, 0x21, 0x0a,
	0x0d, 0x73, 0x6d, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x64, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6d, 0x50, 0x64, 0x75, 0x44, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x35, 0x67, 0x73, 0x6d, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x4d, 0x35, 0x47, 0x53, 0x4d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0a, 0x6d, 0x35,
	0x67, 0x73, 0x6d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x6f, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xae, 0x01,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x53, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a,
	0x14, 0x72, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x72, 0x61, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x27,
	0x0a, 0x0d, 0x53, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x6f, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x77, 0x0a, 0x18, 0x52, 0x61, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x6d, 0x35, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x4d, 0x35, 0x47, 0x53, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x14, 0x6d, 0x35, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x73, 0x70,
	0x22, 0x9f, 0x05, 0x0a, 0x19, 0x4d, 0x35, 0x47, 0x53, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x64, 0x75, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x64, 0x75, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x73, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x53, 0x73, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x53, 0x73, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x51, 0x6f, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x62, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x4d, 0x35, 0x67, 0x73,
	0x6d, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4d, 0x35, 0x47, 0x53, 0x4d, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x0a, 0x4d, 0x35, 0x67, 0x73, 0x6d, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x64,
	0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x4f, 0x6e, 0x50, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x73, 0x73, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x73, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x73, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x4d, 0x35, 0x67, 0x73, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x67, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x4d, 0x35, 0x67, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x67, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x64, 0x75, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x64, 0x75, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x53, 0x4d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x72, 0x61, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x12, 0x72, 0x61, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2a,
	0x33, 0x0a, 0x07, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x47,
	0x50, 0x50, 0x5f, 0x4c, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x47, 0x50, 0x50,
	0x5f, 0x57, 0x4c, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x47, 0x50, 0x50, 0x5f,
	0x4e, 0x52, 0x10, 0x02, 0x2a, 0xb3, 0x09, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x47, 0x53, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x4f, 0x53, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x46, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x4d, 0x4e, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x53, 0x53, 0x5f,
	0x4f, 0x46, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x51, 0x4f, 0x53, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x41, 0x49, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x53, 0x10, 0x0e, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x10, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x45, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x45, 0x5f, 0x49,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x13, 0x12,
	0x21, 0x0a, 0x1d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x50, 0x53, 0x5f, 0x42,
	0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4e, 0x5f, 0x47, 0x57, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46,
	0x55, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x47, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x41, 0x49, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x43, 0x47, 0x49, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1b, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1c, 0x12,
	0x21, 0x0a, 0x1d, 0x41, 0x50, 0x4e, 0x5f, 0x41, 0x4d, 0x42, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x1d, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x53, 0x47, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x21, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x45, 0x50, 0x53, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x22, 0x12, 0x31, 0x0a, 0x2d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43,
	0x53, 0x47, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x23, 0x12, 0x33, 0x0a, 0x2f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x53, 0x47, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x24, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x27, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x53,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x2a, 0x12, 0x1e, 0x0a, 0x1a, 0x55,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2b, 0x12, 0x20, 0x0a, 0x1c, 0x48,
	0x45, 0x4e, 0x42, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2c, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x2d, 0x12, 0x25, 0x0a,
	0x21, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x51, 0x4f, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2f, 0x12, 0x3b, 0x0a, 0x37,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x55, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x30, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x31, 0x2a, 0xbb, 0x01, 0x0a, 0x03, 0x51,
	0x43, 0x49, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x51, 0x43, 0x49, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f,
	0x32, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49,
	0x5f, 0x35, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x36, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43,
	0x49, 0x5f, 0x38, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x39, 0x10, 0x09,
	0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f, 0x36, 0x35, 0x10, 0x41, 0x12, 0x0a, 0x0a, 0x06,
	0x51, 0x43, 0x49, 0x5f, 0x36, 0x36, 0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f,
	0x36, 0x37, 0x10, 0x43, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f, 0x37, 0x30, 0x10, 0x46,
	0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f, 0x37, 0x35, 0x10, 0x4b, 0x12, 0x0a, 0x0a, 0x06,
	0x51, 0x43, 0x49, 0x5f, 0x37, 0x39, 0x10, 0x4f, 0x2a, 0x65, 0x0a, 0x0c, 0x52, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x2a,
	0x4b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x0f,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x43, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x0e, 0x50, 0x64, 0x75, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x50, 0x56, 0x34, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x07,
	0x53, 0x73, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x53, 0x43, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x53, 0x43, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x32, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x53, 0x43, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x33, 0x10, 0x02, 0x2a, 0xbf, 0x0b, 0x0a, 0x0a, 0x4d, 0x35, 0x47, 0x53,
	0x4d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x41,
	0x52, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x4e, 0x4e, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x44, 0x55, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x2f, 0x0a,
	0x2b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x20,
	0x0a, 0x1c, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x2b, 0x0a, 0x27, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x52,
	0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x50, 0x44, 0x55, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x4d,
	0x41, 0x4e, 0x54, 0x49, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x4c, 0x41, 0x44, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x54, 0x49, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x44, 0x55, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x12, 0x12,
	0x26, 0x0a, 0x22, 0x50, 0x44, 0x55, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x44, 0x55, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x14, 0x12, 0x35, 0x0a, 0x31, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x53,
	0x4c, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x4e, 0x4e, 0x10, 0x15, 0x12, 0x1a,
	0x0a, 0x16, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x53, 0x53, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x16, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4e,
	0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x43, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x44, 0x4e, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x18,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x54, 0x49, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x19, 0x12, 0x4b, 0x0a, 0x47, 0x4d, 0x41, 0x58, 0x49, 0x4d,
	0x55, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x55, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x1a, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x51, 0x4f,
	0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12, 0x2a, 0x0a,
	0x26, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1c, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x45, 0x50, 0x53, 0x5f,
	0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x1e, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4d, 0x41, 0x4e, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x20, 0x12, 0x37, 0x0a, 0x33, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54,
	0x48, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x21, 0x12, 0x37, 0x0a, 0x33, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x23, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x25, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x54,
	0x49, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x28, 0x2a, 0x99, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x44, 0x55, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x44,
	0x55, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e,
	0x4f, 0x4e, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x2a, 0x52, 0x0a, 0x10, 0x44, 0x6e, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x45, 0x5f, 0x44, 0x4e, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x57, 0x5f, 0x44, 0x4e, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0xc7, 0x01, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x42, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54,
	0x41, 0x43, 0x53, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f,
	0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x4d, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54,
	0x41, 0x43, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x3e, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x41, 0x43, 0x53, 0x5f, 0x42, 0x45, 0x4c, 0x4f,
	0x4e, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x4d,
	0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x54, 0x41, 0x43, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10, 0x01, 0x12,
	0x2d, 0x0a, 0x29, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x41, 0x49, 0x53, 0x5f,
	0x42, 0x45, 0x4c, 0x4f, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x49, 0x46,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x4d, 0x4e, 0x53, 0x10, 0x02, 0x2a, 0x2f,
	0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x10, 0x02, 0x2a,
	0x5f, 0x0a, 0x11, 0x53, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x53, 0x4d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x30, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x31,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x32, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x33, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x34, 0x10, 0x04,
	0x32, 0xb7, 0x03, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a,
	0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45,
	0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x32, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x32, 0xbf, 0x01, 0x0a, 0x15, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x32, 0xa5, 0x02, 0x0a,
	0x18, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x6a, 0x0a, 0x16, 0x41, 0x6d, 0x66, 0x50, 0x64, 0x75, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x50,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x6d, 0x66, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x6f, 0x69, 0x64,
	0x32, 0x70, 0x0a, 0x16, 0x53, 0x6d, 0x66, 0x50, 0x64, 0x75, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x53, 0x65,
	0x74, 0x53, 0x6d, 0x66, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x6f,
	0x69, 0x64, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_session_manager_proto_rawDescOnce sync.Once
	file_lte_protos_session_manager_proto_rawDescData = file_lte_protos_session_manager_proto_rawDesc
)

func file_lte_protos_session_manager_proto_rawDescGZIP() []byte {
	file_lte_protos_session_manager_proto_rawDescOnce.Do(func() {
		file_lte_protos_session_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_session_manager_proto_rawDescData)
	})
	return file_lte_protos_session_manager_proto_rawDescData
}

var file_lte_protos_session_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 22)
var file_lte_protos_session_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_lte_protos_session_manager_proto_goTypes = []interface{}{
	(RATType)(0),                            // 0: magma.lte.RATType
	(EventTrigger)(0),                       // 1: magma.lte.EventTrigger
	(QCI)(0),                                // 2: magma.lte.QCI
	(ReAuthResult)(0),                       // 3: magma.lte.ReAuthResult
	(CreditLimitType)(0),                    // 4: magma.lte.CreditLimitType
	(MonitoringLevel)(0),                    // 5: magma.lte.MonitoringLevel
	(PduSessionType)(0),                     // 6: magma.lte.PduSessionType
	(SscMode)(0),                            // 7: magma.lte.SscMode
	(M5GSMCause)(0),                         // 8: magma.lte.M5GSMCause
	(RequestType)(0),                        // 9: magma.lte.RequestType
	(AccessType)(0),                         // 10: magma.lte.AccessType
	(DnnSelectionMode)(0),                   // 11: magma.lte.DnnSelectionMode
	(TypeOfList)(0),                         // 12: magma.lte.TypeOfList
	(Priorityaccess)(0),                     // 13: magma.lte.priorityaccess
	(SMSessionFSMState)(0),                  // 14: magma.lte.SMSessionFSMState
	(ChargingReAuthRequest_Type)(0),         // 15: magma.lte.ChargingReAuthRequest.Type
	(PolicyReAuthAnswer_FailureCode)(0),     // 16: magma.lte.PolicyReAuthAnswer.FailureCode
	(RedirectServer_RedirectAddressType)(0), // 17: magma.lte.RedirectServer.RedirectAddressType
	(ChargingCredit_UnitType)(0),            // 18: magma.lte.ChargingCredit.UnitType
	(ChargingCredit_FinalAction)(0),         // 19: magma.lte.ChargingCredit.FinalAction
	(CreditUsage_UpdateType)(0),             // 20: magma.lte.CreditUsage.UpdateType
	(UsageMonitoringCredit_Action)(0),       // 21: magma.lte.UsageMonitoringCredit.Action
	(*RuleRecord)(nil),                      // 22: magma.lte.RuleRecord
	(*RuleRecordTable)(nil),                 // 23: magma.lte.RuleRecordTable
	(*LocalCreateSessionRequest)(nil),       // 24: magma.lte.LocalCreateSessionRequest
	(*CommonSessionContext)(nil),            // 25: magma.lte.CommonSessionContext
	(*RatSpecificContext)(nil),              // 26: magma.lte.RatSpecificContext
	(*LTESessionContext)(nil),               // 27: magma.lte.LTESessionContext
	(*WLANSessionContext)(nil),              // 28: magma.lte.WLANSessionContext
	(*LocalCreateSessionResponse)(nil),      // 29: magma.lte.LocalCreateSessionResponse
	(*LocalEndSessionRequest)(nil),          // 30: magma.lte.LocalEndSessionRequest
	(*LocalEndSessionResponse)(nil),         // 31: magma.lte.LocalEndSessionResponse
	(*PolicyBearerBindingRequest)(nil),      // 32: magma.lte.PolicyBearerBindingRequest
	(*PolicyBearerBindingResponse)(nil),     // 33: magma.lte.PolicyBearerBindingResponse
	(*ChargingReAuthRequest)(nil),           // 34: magma.lte.ChargingReAuthRequest
	(*ChargingReAuthAnswer)(nil),            // 35: magma.lte.ChargingReAuthAnswer
	(*PolicyReAuthRequest)(nil),             // 36: magma.lte.PolicyReAuthRequest
	(*QoSInformation)(nil),                  // 37: magma.lte.QoSInformation
	(*PolicyReAuthAnswer)(nil),              // 38: magma.lte.PolicyReAuthAnswer
	(*RuleSet)(nil),                         // 39: magma.lte.RuleSet
	(*RulesPerSubscriber)(nil),              // 40: magma.lte.RulesPerSubscriber
	(*SessionRules)(nil),                    // 41: magma.lte.SessionRules
	(*Timezone)(nil),                        // 42: magma.lte.Timezone
	(*CreditUnit)(nil),                      // 43: magma.lte.CreditUnit
	(*GrantedUnits)(nil),                    // 44: magma.lte.GrantedUnits
	(*RedirectServer)(nil),                  // 45: magma.lte.RedirectServer
	(*ChargingCredit)(nil),                  // 46: magma.lte.ChargingCredit
	(*RequestedUnits)(nil),                  // 47: magma.lte.RequestedUnits
	(*CreditUsage)(nil),                     // 48: magma.lte.CreditUsage
	(*CreditUsageUpdate)(nil),               // 49: magma.lte.CreditUsageUpdate
	(*CreditUpdateResponse)(nil),            // 50: magma.lte.CreditUpdateResponse
	(*UsageMonitorUpdate)(nil),              // 51: magma.lte.UsageMonitorUpdate
	(*UsageMonitoringCredit)(nil),           // 52: magma.lte.UsageMonitoringCredit
	(*UsageMonitoringUpdateRequest)(nil),    // 53: magma.lte.UsageMonitoringUpdateRequest
	(*UsageMonitoringUpdateResponse)(nil),   // 54: magma.lte.UsageMonitoringUpdateResponse
	(*QosInformationRequest)(nil),           // 55: magma.lte.QosInformationRequest
	(*TgppContext)(nil),                     // 56: magma.lte.TgppContext
	(*CreateSessionRequest)(nil),            // 57: magma.lte.CreateSessionRequest
	(*CreateSessionResponse)(nil),           // 58: magma.lte.CreateSessionResponse
	(*StaticRuleInstall)(nil),               // 59: magma.lte.StaticRuleInstall
	(*DynamicRuleInstall)(nil),              // 60: magma.lte.DynamicRuleInstall
	(*UpdateSessionRequest)(nil),            // 61: magma.lte.UpdateSessionRequest
	(*UpdateSessionResponse)(nil),           // 62: magma.lte.UpdateSessionResponse
	(*SessionTerminateResponse)(nil),        // 63: magma.lte.SessionTerminateResponse
	(*SessionTerminateRequest)(nil),         // 64: magma.lte.SessionTerminateRequest
	(*M5GSMCapability)(nil),                 // 65: magma.lte.M5GSMCapability
	(*QosRules)(nil),                        // 66: magma.lte.QosRules
	(*LadnServiceArea)(nil),                 // 67: magma.lte.LadnServiceArea
	(*TrackingAreaIdentityList)(nil),        // 68: magma.lte.TrackingAreaIdentityList
	(*M5GSMSessionContext)(nil),             // 69: magma.lte.M5GSMSessionContext
	(*SetSMSessionContext)(nil),             // 70: magma.lte.SetSMSessionContext
	(*SmContextVoid)(nil),                   // 71: magma.lte.SmContextVoid
	(*RatSpecificContextAccess)(nil),        // 72: magma.lte.RatSpecificContextAccess
	(*M5GSMSessionContextAccess)(nil),       // 73: magma.lte.M5GSMSessionContextAccess
	(*SetSMSessionContextAccess)(nil),       // 74: magma.lte.SetSMSessionContextAccess
	nil,                                     // 75: magma.lte.PolicyReAuthAnswer.FailedRulesEntry
	(*SubscriberID)(nil),                    // 76: magma.lte.SubscriberID
	(*ServiceIdentifier)(nil),               // 77: magma.lte.ServiceIdentifier
	(*timestamp.Timestamp)(nil),             // 78: google.protobuf.Timestamp
	(*PolicyRule)(nil),                      // 79: magma.lte.PolicyRule
	(*AggregatedMaximumBitrate)(nil),        // 80: magma.lte.AggregatedMaximumBitrate
	(*protos.Void)(nil),                     // 81: magma.orc8r.Void
}
var file_lte_protos_session_manager_proto_depIdxs = []int32{
	22,  // 0: magma.lte.RuleRecordTable.records:type_name -> magma.lte.RuleRecord
	25,  // 1: magma.lte.LocalCreateSessionRequest.common_context:type_name -> magma.lte.CommonSessionContext
	26,  // 2: magma.lte.LocalCreateSessionRequest.rat_specific_context:type_name -> magma.lte.RatSpecificContext
	76,  // 3: magma.lte.CommonSessionContext.sid:type_name -> magma.lte.SubscriberID
	0,   // 4: magma.lte.CommonSessionContext.rat_type:type_name -> magma.lte.RATType
	14,  // 5: magma.lte.CommonSessionContext.sm_session_state:type_name -> magma.lte.SMSessionFSMState
	27,  // 6: magma.lte.RatSpecificContext.lte_context:type_name -> magma.lte.LTESessionContext
	28,  // 7: magma.lte.RatSpecificContext.wlan_context:type_name -> magma.lte.WLANSessionContext
	69,  // 8: magma.lte.RatSpecificContext.m5gsm_session_context:type_name -> magma.lte.M5GSMSessionContext
	55,  // 9: magma.lte.LTESessionContext.qos_info:type_name -> magma.lte.QosInformationRequest
	76,  // 10: magma.lte.LocalEndSessionRequest.sid:type_name -> magma.lte.SubscriberID
	76,  // 11: magma.lte.PolicyBearerBindingRequest.sid:type_name -> magma.lte.SubscriberID
	15,  // 12: magma.lte.ChargingReAuthRequest.type:type_name -> magma.lte.ChargingReAuthRequest.Type
	77,  // 13: magma.lte.ChargingReAuthRequest.service_identifier:type_name -> magma.lte.ServiceIdentifier
	3,   // 14: magma.lte.ChargingReAuthAnswer.result:type_name -> magma.lte.ReAuthResult
	59,  // 15: magma.lte.PolicyReAuthRequest.rules_to_install:type_name -> magma.lte.StaticRuleInstall
	60,  // 16: magma.lte.PolicyReAuthRequest.dynamic_rules_to_install:type_name -> magma.lte.DynamicRuleInstall
	1,   // 17: magma.lte.PolicyReAuthRequest.event_triggers:type_name -> magma.lte.EventTrigger
	78,  // 18: magma.lte.PolicyReAuthRequest.revalidation_time:type_name -> google.protobuf.Timestamp
	52,  // 19: magma.lte.PolicyReAuthRequest.usage_monitoring_credits:type_name -> magma.lte.UsageMonitoringCredit
	37,  // 20: magma.lte.PolicyReAuthRequest.qos_info:type_name -> magma.lte.QoSInformation
	2,   // 21: magma.lte.QoSInformation.qci:type_name -> magma.lte.QCI
	3,   // 22: magma.lte.PolicyReAuthAnswer.result:type_name -> magma.lte.ReAuthResult
	75,  // 23: magma.lte.PolicyReAuthAnswer.failed_rules:type_name -> magma.lte.PolicyReAuthAnswer.FailedRulesEntry
	59,  // 24: magma.lte.RuleSet.static_rules:type_name -> magma.lte.StaticRuleInstall
	60,  // 25: magma.lte.RuleSet.dynamic_rules:type_name -> magma.lte.DynamicRuleInstall
	39,  // 26: magma.lte.RulesPerSubscriber.rule_set:type_name -> magma.lte.RuleSet
	40,  // 27: magma.lte.SessionRules.rules_per_subscriber:type_name -> magma.lte.RulesPerSubscriber
	43,  // 28: magma.lte.GrantedUnits.total:type_name -> magma.lte.CreditUnit
	43,  // 29: magma.lte.GrantedUnits.tx:type_name -> magma.lte.CreditUnit
	43,  // 30: magma.lte.GrantedUnits.rx:type_name -> magma.lte.CreditUnit
	17,  // 31: magma.lte.RedirectServer.redirect_address_type:type_name -> magma.lte.RedirectServer.RedirectAddressType
	18,  // 32: magma.lte.ChargingCredit.type:type_name -> magma.lte.ChargingCredit.UnitType
	19,  // 33: magma.lte.ChargingCredit.final_action:type_name -> magma.lte.ChargingCredit.FinalAction
	44,  // 34: magma.lte.ChargingCredit.granted_units:type_name -> magma.lte.GrantedUnits
	45,  // 35: magma.lte.ChargingCredit.redirect_server:type_name -> magma.lte.RedirectServer
	20,  // 36: magma.lte.CreditUsage.type:type_name -> magma.lte.CreditUsage.UpdateType
	77,  // 37: magma.lte.CreditUsage.service_identifier:type_name -> magma.lte.ServiceIdentifier
	47,  // 38: magma.lte.CreditUsage.requested_units:type_name -> magma.lte.RequestedUnits
	48,  // 39: magma.lte.CreditUsageUpdate.usage:type_name -> magma.lte.CreditUsage
	0,   // 40: magma.lte.CreditUsageUpdate.rat_type:type_name -> magma.lte.RATType
	56,  // 41: magma.lte.CreditUsageUpdate.tgpp_ctx:type_name -> magma.lte.TgppContext
	25,  // 42: magma.lte.CreditUsageUpdate.common_context:type_name -> magma.lte.CommonSessionContext
	26,  // 43: magma.lte.CreditUsageUpdate.rat_specific_context:type_name -> magma.lte.RatSpecificContext
	46,  // 44: magma.lte.CreditUpdateResponse.credit:type_name -> magma.lte.ChargingCredit
	77,  // 45: magma.lte.CreditUpdateResponse.service_identifier:type_name -> magma.lte.ServiceIdentifier
	4,   // 46: magma.lte.CreditUpdateResponse.limit_type:type_name -> magma.lte.CreditLimitType
	56,  // 47: magma.lte.CreditUpdateResponse.tgpp_ctx:type_name -> magma.lte.TgppContext
	5,   // 48: magma.lte.UsageMonitorUpdate.level:type_name -> magma.lte.MonitoringLevel
	21,  // 49: magma.lte.UsageMonitoringCredit.action:type_name -> magma.lte.UsageMonitoringCredit.Action
	5,   // 50: magma.lte.UsageMonitoringCredit.level:type_name -> magma.lte.MonitoringLevel
	44,  // 51: magma.lte.UsageMonitoringCredit.granted_units:type_name -> magma.lte.GrantedUnits
	51,  // 52: magma.lte.UsageMonitoringUpdateRequest.update:type_name -> magma.lte.UsageMonitorUpdate
	0,   // 53: magma.lte.UsageMonitoringUpdateRequest.rat_type:type_name -> magma.lte.RATType
	56,  // 54: magma.lte.UsageMonitoringUpdateRequest.tgpp_ctx:type_name -> magma.lte.TgppContext
	1,   // 55: magma.lte.UsageMonitoringUpdateRequest.event_trigger:type_name -> magma.lte.EventTrigger
	52,  // 56: magma.lte.UsageMonitoringUpdateResponse.credit:type_name -> magma.lte.UsageMonitoringCredit
	1,   // 57: magma.lte.UsageMonitoringUpdateResponse.event_triggers:type_name -> magma.lte.EventTrigger
	78,  // 58: magma.lte.UsageMonitoringUpdateResponse.revalidation_time:type_name -> google.protobuf.Timestamp
	59,  // 59: magma.lte.UsageMonitoringUpdateResponse.static_rules_to_install:type_name -> magma.lte.StaticRuleInstall
	60,  // 60: magma.lte.UsageMonitoringUpdateResponse.dynamic_rules_to_install:type_name -> magma.lte.DynamicRuleInstall
	56,  // 61: magma.lte.UsageMonitoringUpdateResponse.tgpp_ctx:type_name -> magma.lte.TgppContext
	42,  // 62: magma.lte.CreateSessionRequest.access_timezone:type_name -> magma.lte.Timezone
	25,  // 63: magma.lte.CreateSessionRequest.common_context:type_name -> magma.lte.CommonSessionContext
	26,  // 64: magma.lte.CreateSessionRequest.rat_specific_context:type_name -> magma.lte.RatSpecificContext
	50,  // 65: magma.lte.CreateSessionResponse.credits:type_name -> magma.lte.CreditUpdateResponse
	54,  // 66: magma.lte.CreateSessionResponse.usage_monitors:type_name -> magma.lte.UsageMonitoringUpdateResponse
	59,  // 67: magma.lte.CreateSessionResponse.static_rules:type_name -> magma.lte.StaticRuleInstall
	60,  // 68: magma.lte.CreateSessionResponse.dynamic_rules:type_name -> magma.lte.DynamicRuleInstall
	56,  // 69: magma.lte.CreateSessionResponse.tgpp_ctx:type_name -> magma.lte.TgppContext
	1,   // 70: magma.lte.CreateSessionResponse.event_triggers:type_name -> magma.lte.EventTrigger
	78,  // 71: magma.lte.CreateSessionResponse.revalidation_time:type_name -> google.protobuf.Timestamp
	78,  // 72: magma.lte.StaticRuleInstall.activation_time:type_name -> google.protobuf.Timestamp
	78,  // 73: magma.lte.StaticRuleInstall.deactivation_time:type_name -> google.protobuf.Timestamp
	79,  // 74: magma.lte.DynamicRuleInstall.policy_rule:type_name -> magma.lte.PolicyRule
	78,  // 75: magma.lte.DynamicRuleInstall.activation_time:type_name -> google.protobuf.Timestamp
	78,  // 76: magma.lte.DynamicRuleInstall.deactivation_time:type_name -> google.protobuf.Timestamp
	49,  // 77: magma.lte.UpdateSessionRequest.updates:type_name -> magma.lte.CreditUsageUpdate
	53,  // 78: magma.lte.UpdateSessionRequest.usage_monitors:type_name -> magma.lte.UsageMonitoringUpdateRequest
	50,  // 79: magma.lte.UpdateSessionResponse.responses:type_name -> magma.lte.CreditUpdateResponse
	54,  // 80: magma.lte.UpdateSessionResponse.usage_monitor_responses:type_name -> magma.lte.UsageMonitoringUpdateResponse
	48,  // 81: magma.lte.SessionTerminateRequest.credit_usages:type_name -> magma.lte.CreditUsage
	51,  // 82: magma.lte.SessionTerminateRequest.monitor_usages:type_name -> magma.lte.UsageMonitorUpdate
	0,   // 83: magma.lte.SessionTerminateRequest.rat_type:type_name -> magma.lte.RATType
	56,  // 84: magma.lte.SessionTerminateRequest.tgpp_ctx:type_name -> magma.lte.TgppContext
	68,  // 85: magma.lte.LadnServiceArea.identity_list:type_name -> magma.lte.TrackingAreaIdentityList
	12,  // 86: magma.lte.TrackingAreaIdentityList.type_of_list:type_name -> magma.lte.TypeOfList
	9,   // 87: magma.lte.M5GSMSessionContext.rquest_type:type_name -> magma.lte.RequestType
	45,  // 88: magma.lte.M5GSMSessionContext.pdu_address:type_name -> magma.lte.RedirectServer
	13,  // 89: magma.lte.M5GSMSessionContext.priority_access:type_name -> magma.lte.priorityaccess
	10,  // 90: magma.lte.M5GSMSessionContext.access_type:type_name -> magma.lte.AccessType
	76,  // 91: magma.lte.M5GSMSessionContext.sid:type_name -> magma.lte.SubscriberID
	67,  // 92: magma.lte.M5GSMSessionContext.ladn_service_area:type_name -> magma.lte.LadnServiceArea
	11,  // 93: magma.lte.M5GSMSessionContext.dnn_selection_mode:type_name -> magma.lte.DnnSelectionMode
	6,   // 94: magma.lte.M5GSMSessionContext.pdu_session_type:type_name -> magma.lte.PduSessionType
	7,   // 95: magma.lte.M5GSMSessionContext.ssc_mode:type_name -> magma.lte.SscMode
	65,  // 96: magma.lte.M5GSMSessionContext.m5g_sm_capability:type_name -> magma.lte.M5GSMCapability
	8,   // 97: magma.lte.M5GSMSessionContext.m5gsm_cause:type_name -> magma.lte.M5GSMCause
	66,  // 98: magma.lte.M5GSMSessionContext.requested_qos_rules:type_name -> magma.lte.QosRules
	25,  // 99: magma.lte.SetSMSessionContext.common_context:type_name -> magma.lte.CommonSessionContext
	26,  // 100: magma.lte.SetSMSessionContext.rat_specific_context:type_name -> magma.lte.RatSpecificContext
	73,  // 101: magma.lte.RatSpecificContextAccess.m5g_session_context_rsp:type_name -> magma.lte.M5GSMSessionContextAccess
	6,   // 102: magma.lte.M5GSMSessionContextAccess.pdu_session_type:type_name -> magma.lte.PduSessionType
	7,   // 103: magma.lte.M5GSMSessionContextAccess.selected_ssc_mode:type_name -> magma.lte.SscMode
	66,  // 104: magma.lte.M5GSMSessionContextAccess.authorized_qos_rules:type_name -> magma.lte.QosRules
	80,  // 105: magma.lte.M5GSMSessionContextAccess.session_ambr:type_name -> magma.lte.AggregatedMaximumBitrate
	8,   // 106: magma.lte.M5GSMSessionContextAccess.M5gsm_cause:type_name -> magma.lte.M5GSMCause
	7,   // 107: magma.lte.M5GSMSessionContextAccess.allowed_ssc_mode:type_name -> magma.lte.SscMode
	45,  // 108: magma.lte.M5GSMSessionContextAccess.pdu_address:type_name -> magma.lte.RedirectServer
	25,  // 109: magma.lte.SetSMSessionContextAccess.common_context:type_name -> magma.lte.CommonSessionContext
	72,  // 110: magma.lte.SetSMSessionContextAccess.rat_specific_context:type_name -> magma.lte.RatSpecificContextAccess
	16,  // 111: magma.lte.PolicyReAuthAnswer.FailedRulesEntry.value:type_name -> magma.lte.PolicyReAuthAnswer.FailureCode
	23,  // 112: magma.lte.LocalSessionManager.ReportRuleStats:input_type -> magma.lte.RuleRecordTable
	24,  // 113: magma.lte.LocalSessionManager.CreateSession:input_type -> magma.lte.LocalCreateSessionRequest
	30,  // 114: magma.lte.LocalSessionManager.EndSession:input_type -> magma.lte.LocalEndSessionRequest
	32,  // 115: magma.lte.LocalSessionManager.BindPolicy2Bearer:input_type -> magma.lte.PolicyBearerBindingRequest
	41,  // 116: magma.lte.LocalSessionManager.SetSessionRules:input_type -> magma.lte.SessionRules
	34,  // 117: magma.lte.SessionProxyResponder.ChargingReAuth:input_type -> magma.lte.ChargingReAuthRequest
	36,  // 118: magma.lte.SessionProxyResponder.PolicyReAuth:input_type -> magma.lte.PolicyReAuthRequest
	57,  // 119: magma.lte.CentralSessionController.CreateSession:input_type -> magma.lte.CreateSessionRequest
	61,  // 120: magma.lte.CentralSessionController.UpdateSession:input_type -> magma.lte.UpdateSessionRequest
	64,  // 121: magma.lte.CentralSessionController.TerminateSession:input_type -> magma.lte.SessionTerminateRequest
	70,  // 122: magma.lte.AmfPduSessionSmContext.SetAmfSessionContext:input_type -> magma.lte.SetSMSessionContext
	74,  // 123: magma.lte.SmfPduSessionSmContext.SetSmfSessionContext:input_type -> magma.lte.SetSMSessionContextAccess
	81,  // 124: magma.lte.LocalSessionManager.ReportRuleStats:output_type -> magma.orc8r.Void
	29,  // 125: magma.lte.LocalSessionManager.CreateSession:output_type -> magma.lte.LocalCreateSessionResponse
	31,  // 126: magma.lte.LocalSessionManager.EndSession:output_type -> magma.lte.LocalEndSessionResponse
	33,  // 127: magma.lte.LocalSessionManager.BindPolicy2Bearer:output_type -> magma.lte.PolicyBearerBindingResponse
	81,  // 128: magma.lte.LocalSessionManager.SetSessionRules:output_type -> magma.orc8r.Void
	35,  // 129: magma.lte.SessionProxyResponder.ChargingReAuth:output_type -> magma.lte.ChargingReAuthAnswer
	38,  // 130: magma.lte.SessionProxyResponder.PolicyReAuth:output_type -> magma.lte.PolicyReAuthAnswer
	58,  // 131: magma.lte.CentralSessionController.CreateSession:output_type -> magma.lte.CreateSessionResponse
	62,  // 132: magma.lte.CentralSessionController.UpdateSession:output_type -> magma.lte.UpdateSessionResponse
	63,  // 133: magma.lte.CentralSessionController.TerminateSession:output_type -> magma.lte.SessionTerminateResponse
	71,  // 134: magma.lte.AmfPduSessionSmContext.SetAmfSessionContext:output_type -> magma.lte.SmContextVoid
	71,  // 135: magma.lte.SmfPduSessionSmContext.SetSmfSessionContext:output_type -> magma.lte.SmContextVoid
	124, // [124:136] is the sub-list for method output_type
	112, // [112:124] is the sub-list for method input_type
	112, // [112:112] is the sub-list for extension type_name
	112, // [112:112] is the sub-list for extension extendee
	0,   // [0:112] is the sub-list for field type_name
}

func init() { file_lte_protos_session_manager_proto_init() }
func file_lte_protos_session_manager_proto_init() {
	if File_lte_protos_session_manager_proto != nil {
		return
	}
	file_lte_protos_policydb_proto_init()
	file_lte_protos_subscriberdb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_session_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRecordTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSessionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatSpecificContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTESessionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WLANSessionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalEndSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalEndSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyBearerBindingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyBearerBindingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingReAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingReAuthAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyReAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyReAuthAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RulesPerSubscriber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timezone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantedUnits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedUnits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUsageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitorUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitoringCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitoringUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitoringUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TgppContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticRuleInstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicRuleInstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M5GSMCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LadnServiceArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackingAreaIdentityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M5GSMSessionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSMSessionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmContextVoid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatSpecificContextAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M5GSMSessionContextAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_session_manager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSMSessionContextAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lte_protos_session_manager_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RatSpecificContext_LteContext)(nil),
		(*RatSpecificContext_WlanContext)(nil),
		(*RatSpecificContext_M5GsmSessionContext)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_session_manager_proto_rawDesc,
			NumEnums:      22,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_lte_protos_session_manager_proto_goTypes,
		DependencyIndexes: file_lte_protos_session_manager_proto_depIdxs,
		EnumInfos:         file_lte_protos_session_manager_proto_enumTypes,
		MessageInfos:      file_lte_protos_session_manager_proto_msgTypes,
	}.Build()
	File_lte_protos_session_manager_proto = out.File
	file_lte_protos_session_manager_proto_rawDesc = nil
	file_lte_protos_session_manager_proto_goTypes = nil
	file_lte_protos_session_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LocalSessionManagerClient is the client API for LocalSessionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalSessionManagerClient interface {
	ReportRuleStats(ctx context.Context, in *RuleRecordTable, opts ...grpc.CallOption) (*protos.Void, error)
	CreateSession(ctx context.Context, in *LocalCreateSessionRequest, opts ...grpc.CallOption) (*LocalCreateSessionResponse, error)
	EndSession(ctx context.Context, in *LocalEndSessionRequest, opts ...grpc.CallOption) (*LocalEndSessionResponse, error)
	BindPolicy2Bearer(ctx context.Context, in *PolicyBearerBindingRequest, opts ...grpc.CallOption) (*PolicyBearerBindingResponse, error)
	// A set interface of subscribers -> currently active rules
	SetSessionRules(ctx context.Context, in *SessionRules, opts ...grpc.CallOption) (*protos.Void, error)
}

type localSessionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalSessionManagerClient(cc grpc.ClientConnInterface) LocalSessionManagerClient {
	return &localSessionManagerClient{cc}
}

func (c *localSessionManagerClient) ReportRuleStats(ctx context.Context, in *RuleRecordTable, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/ReportRuleStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) CreateSession(ctx context.Context, in *LocalCreateSessionRequest, opts ...grpc.CallOption) (*LocalCreateSessionResponse, error) {
	out := new(LocalCreateSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) EndSession(ctx context.Context, in *LocalEndSessionRequest, opts ...grpc.CallOption) (*LocalEndSessionResponse, error) {
	out := new(LocalEndSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/EndSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) BindPolicy2Bearer(ctx context.Context, in *PolicyBearerBindingRequest, opts ...grpc.CallOption) (*PolicyBearerBindingResponse, error) {
	out := new(PolicyBearerBindingResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/BindPolicy2Bearer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) SetSessionRules(ctx context.Context, in *SessionRules, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/SetSessionRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalSessionManagerServer is the server API for LocalSessionManager service.
type LocalSessionManagerServer interface {
	ReportRuleStats(context.Context, *RuleRecordTable) (*protos.Void, error)
	CreateSession(context.Context, *LocalCreateSessionRequest) (*LocalCreateSessionResponse, error)
	EndSession(context.Context, *LocalEndSessionRequest) (*LocalEndSessionResponse, error)
	BindPolicy2Bearer(context.Context, *PolicyBearerBindingRequest) (*PolicyBearerBindingResponse, error)
	// A set interface of subscribers -> currently active rules
	SetSessionRules(context.Context, *SessionRules) (*protos.Void, error)
}

// UnimplementedLocalSessionManagerServer can be embedded to have forward compatible implementations.
type UnimplementedLocalSessionManagerServer struct {
}

func (*UnimplementedLocalSessionManagerServer) ReportRuleStats(context.Context, *RuleRecordTable) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportRuleStats not implemented")
}
func (*UnimplementedLocalSessionManagerServer) CreateSession(context.Context, *LocalCreateSessionRequest) (*LocalCreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedLocalSessionManagerServer) EndSession(context.Context, *LocalEndSessionRequest) (*LocalEndSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (*UnimplementedLocalSessionManagerServer) BindPolicy2Bearer(context.Context, *PolicyBearerBindingRequest) (*PolicyBearerBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPolicy2Bearer not implemented")
}
func (*UnimplementedLocalSessionManagerServer) SetSessionRules(context.Context, *SessionRules) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSessionRules not implemented")
}

func RegisterLocalSessionManagerServer(s *grpc.Server, srv LocalSessionManagerServer) {
	s.RegisterService(&_LocalSessionManager_serviceDesc, srv)
}

func _LocalSessionManager_ReportRuleStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRecordTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).ReportRuleStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/ReportRuleStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).ReportRuleStats(ctx, req.(*RuleRecordTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalCreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).CreateSession(ctx, req.(*LocalCreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalEndSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).EndSession(ctx, req.(*LocalEndSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_BindPolicy2Bearer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyBearerBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).BindPolicy2Bearer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/BindPolicy2Bearer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).BindPolicy2Bearer(ctx, req.(*PolicyBearerBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_SetSessionRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).SetSessionRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/SetSessionRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).SetSessionRules(ctx, req.(*SessionRules))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalSessionManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.LocalSessionManager",
	HandlerType: (*LocalSessionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportRuleStats",
			Handler:    _LocalSessionManager_ReportRuleStats_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _LocalSessionManager_CreateSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _LocalSessionManager_EndSession_Handler,
		},
		{
			MethodName: "BindPolicy2Bearer",
			Handler:    _LocalSessionManager_BindPolicy2Bearer_Handler,
		},
		{
			MethodName: "SetSessionRules",
			Handler:    _LocalSessionManager_SetSessionRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// SessionProxyResponderClient is the client API for SessionProxyResponder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionProxyResponderClient interface {
	ChargingReAuth(ctx context.Context, in *ChargingReAuthRequest, opts ...grpc.CallOption) (*ChargingReAuthAnswer, error)
	// NOTE: if no session_id is specified, apply to all sessions for the IMSI
	//
	PolicyReAuth(ctx context.Context, in *PolicyReAuthRequest, opts ...grpc.CallOption) (*PolicyReAuthAnswer, error)
}

type sessionProxyResponderClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionProxyResponderClient(cc grpc.ClientConnInterface) SessionProxyResponderClient {
	return &sessionProxyResponderClient{cc}
}

func (c *sessionProxyResponderClient) ChargingReAuth(ctx context.Context, in *ChargingReAuthRequest, opts ...grpc.CallOption) (*ChargingReAuthAnswer, error) {
	out := new(ChargingReAuthAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.SessionProxyResponder/ChargingReAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionProxyResponderClient) PolicyReAuth(ctx context.Context, in *PolicyReAuthRequest, opts ...grpc.CallOption) (*PolicyReAuthAnswer, error) {
	out := new(PolicyReAuthAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.SessionProxyResponder/PolicyReAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionProxyResponderServer is the server API for SessionProxyResponder service.
type SessionProxyResponderServer interface {
	ChargingReAuth(context.Context, *ChargingReAuthRequest) (*ChargingReAuthAnswer, error)
	// NOTE: if no session_id is specified, apply to all sessions for the IMSI
	//
	PolicyReAuth(context.Context, *PolicyReAuthRequest) (*PolicyReAuthAnswer, error)
}

// UnimplementedSessionProxyResponderServer can be embedded to have forward compatible implementations.
type UnimplementedSessionProxyResponderServer struct {
}

func (*UnimplementedSessionProxyResponderServer) ChargingReAuth(context.Context, *ChargingReAuthRequest) (*ChargingReAuthAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargingReAuth not implemented")
}
func (*UnimplementedSessionProxyResponderServer) PolicyReAuth(context.Context, *PolicyReAuthRequest) (*PolicyReAuthAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyReAuth not implemented")
}

func RegisterSessionProxyResponderServer(s *grpc.Server, srv SessionProxyResponderServer) {
	s.RegisterService(&_SessionProxyResponder_serviceDesc, srv)
}

func _SessionProxyResponder_ChargingReAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargingReAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionProxyResponderServer).ChargingReAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SessionProxyResponder/ChargingReAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionProxyResponderServer).ChargingReAuth(ctx, req.(*ChargingReAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionProxyResponder_PolicyReAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyReAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionProxyResponderServer).PolicyReAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SessionProxyResponder/PolicyReAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionProxyResponderServer).PolicyReAuth(ctx, req.(*PolicyReAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionProxyResponder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SessionProxyResponder",
	HandlerType: (*SessionProxyResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChargingReAuth",
			Handler:    _SessionProxyResponder_ChargingReAuth_Handler,
		},
		{
			MethodName: "PolicyReAuth",
			Handler:    _SessionProxyResponder_PolicyReAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// CentralSessionControllerClient is the client API for CentralSessionController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CentralSessionControllerClient interface {
	// Notify OCS/PCRF of new session and return rules associated with subscriber
	// along with credits for each rule
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Updates OCS/PCRF with used credit and terminations from gateway
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error)
	// Terminates session in OCS/PCRF for a subscriber
	TerminateSession(ctx context.Context, in *SessionTerminateRequest, opts ...grpc.CallOption) (*SessionTerminateResponse, error)
}

type centralSessionControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralSessionControllerClient(cc grpc.ClientConnInterface) CentralSessionControllerClient {
	return &centralSessionControllerClient{cc}
}

func (c *centralSessionControllerClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.CentralSessionController/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralSessionControllerClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error) {
	out := new(UpdateSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.CentralSessionController/UpdateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralSessionControllerClient) TerminateSession(ctx context.Context, in *SessionTerminateRequest, opts ...grpc.CallOption) (*SessionTerminateResponse, error) {
	out := new(SessionTerminateResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.CentralSessionController/TerminateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralSessionControllerServer is the server API for CentralSessionController service.
type CentralSessionControllerServer interface {
	// Notify OCS/PCRF of new session and return rules associated with subscriber
	// along with credits for each rule
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Updates OCS/PCRF with used credit and terminations from gateway
	UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error)
	// Terminates session in OCS/PCRF for a subscriber
	TerminateSession(context.Context, *SessionTerminateRequest) (*SessionTerminateResponse, error)
}

// UnimplementedCentralSessionControllerServer can be embedded to have forward compatible implementations.
type UnimplementedCentralSessionControllerServer struct {
}

func (*UnimplementedCentralSessionControllerServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedCentralSessionControllerServer) UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (*UnimplementedCentralSessionControllerServer) TerminateSession(context.Context, *SessionTerminateRequest) (*SessionTerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateSession not implemented")
}

func RegisterCentralSessionControllerServer(s *grpc.Server, srv CentralSessionControllerServer) {
	s.RegisterService(&_CentralSessionController_serviceDesc, srv)
}

func _CentralSessionController_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSessionControllerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.CentralSessionController/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSessionControllerServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralSessionController_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSessionControllerServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.CentralSessionController/UpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSessionControllerServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralSessionController_TerminateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSessionControllerServer).TerminateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.CentralSessionController/TerminateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSessionControllerServer).TerminateSession(ctx, req.(*SessionTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CentralSessionController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.CentralSessionController",
	HandlerType: (*CentralSessionControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _CentralSessionController_CreateSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _CentralSessionController_UpdateSession_Handler,
		},
		{
			MethodName: "TerminateSession",
			Handler:    _CentralSessionController_TerminateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// AmfPduSessionSmContextClient is the client API for AmfPduSessionSmContext service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AmfPduSessionSmContextClient interface {
	SetAmfSessionContext(ctx context.Context, in *SetSMSessionContext, opts ...grpc.CallOption) (*SmContextVoid, error)
}

type amfPduSessionSmContextClient struct {
	cc grpc.ClientConnInterface
}

func NewAmfPduSessionSmContextClient(cc grpc.ClientConnInterface) AmfPduSessionSmContextClient {
	return &amfPduSessionSmContextClient{cc}
}

func (c *amfPduSessionSmContextClient) SetAmfSessionContext(ctx context.Context, in *SetSMSessionContext, opts ...grpc.CallOption) (*SmContextVoid, error) {
	out := new(SmContextVoid)
	err := c.cc.Invoke(ctx, "/magma.lte.AmfPduSessionSmContext/SetAmfSessionContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmfPduSessionSmContextServer is the server API for AmfPduSessionSmContext service.
type AmfPduSessionSmContextServer interface {
	SetAmfSessionContext(context.Context, *SetSMSessionContext) (*SmContextVoid, error)
}

// UnimplementedAmfPduSessionSmContextServer can be embedded to have forward compatible implementations.
type UnimplementedAmfPduSessionSmContextServer struct {
}

func (*UnimplementedAmfPduSessionSmContextServer) SetAmfSessionContext(context.Context, *SetSMSessionContext) (*SmContextVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAmfSessionContext not implemented")
}

func RegisterAmfPduSessionSmContextServer(s *grpc.Server, srv AmfPduSessionSmContextServer) {
	s.RegisterService(&_AmfPduSessionSmContext_serviceDesc, srv)
}

func _AmfPduSessionSmContext_SetAmfSessionContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSMSessionContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmfPduSessionSmContextServer).SetAmfSessionContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.AmfPduSessionSmContext/SetAmfSessionContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmfPduSessionSmContextServer).SetAmfSessionContext(ctx, req.(*SetSMSessionContext))
	}
	return interceptor(ctx, in, info, handler)
}

var _AmfPduSessionSmContext_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.AmfPduSessionSmContext",
	HandlerType: (*AmfPduSessionSmContextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAmfSessionContext",
			Handler:    _AmfPduSessionSmContext_SetAmfSessionContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// SmfPduSessionSmContextClient is the client API for SmfPduSessionSmContext service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmfPduSessionSmContextClient interface {
	SetSmfSessionContext(ctx context.Context, in *SetSMSessionContextAccess, opts ...grpc.CallOption) (*SmContextVoid, error)
}

type smfPduSessionSmContextClient struct {
	cc grpc.ClientConnInterface
}

func NewSmfPduSessionSmContextClient(cc grpc.ClientConnInterface) SmfPduSessionSmContextClient {
	return &smfPduSessionSmContextClient{cc}
}

func (c *smfPduSessionSmContextClient) SetSmfSessionContext(ctx context.Context, in *SetSMSessionContextAccess, opts ...grpc.CallOption) (*SmContextVoid, error) {
	out := new(SmContextVoid)
	err := c.cc.Invoke(ctx, "/magma.lte.SmfPduSessionSmContext/SetSmfSessionContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmfPduSessionSmContextServer is the server API for SmfPduSessionSmContext service.
type SmfPduSessionSmContextServer interface {
	SetSmfSessionContext(context.Context, *SetSMSessionContextAccess) (*SmContextVoid, error)
}

// UnimplementedSmfPduSessionSmContextServer can be embedded to have forward compatible implementations.
type UnimplementedSmfPduSessionSmContextServer struct {
}

func (*UnimplementedSmfPduSessionSmContextServer) SetSmfSessionContext(context.Context, *SetSMSessionContextAccess) (*SmContextVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSmfSessionContext not implemented")
}

func RegisterSmfPduSessionSmContextServer(s *grpc.Server, srv SmfPduSessionSmContextServer) {
	s.RegisterService(&_SmfPduSessionSmContext_serviceDesc, srv)
}

func _SmfPduSessionSmContext_SetSmfSessionContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSMSessionContextAccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmfPduSessionSmContextServer).SetSmfSessionContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SmfPduSessionSmContext/SetSmfSessionContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmfPduSessionSmContextServer).SetSmfSessionContext(ctx, req.(*SetSMSessionContextAccess))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmfPduSessionSmContext_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SmfPduSessionSmContext",
	HandlerType: (*SmfPduSessionSmContextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSmfSessionContext",
			Handler:    _SmfPduSessionSmContext_SetSmfSessionContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}
