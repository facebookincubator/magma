/*
Copyright 2020 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package magma.lte;

import "orc8r/protos/common.proto";
import "lte/protos/policydb.proto";
import "lte/protos/session_manager.proto";
import "lte/protos/subscriberdb.proto";

option go_package = "magma/lte/cloud/go/protos";

// Deprecated
message SetupFlowsRequest {
  // List of requests to activate
  repeated ActivateFlowsRequest requests = 1;
  // epoch to prevent outdated setup calls
  uint64 epoch = 2;
  // List of subscriber quota updates
  UpdateSubscriberQuotaStateRequest quota_updates = 3;
}

message SetupUEMacRequest {
  // List of UEs to activate
  repeated UEMacFlowRequest requests = 1;
  // epoch to prevent outdated setup calls
  uint64 epoch = 2;
}

message SetupPolicyRequest {
  // List of requests to activate
  repeated ActivateFlowsRequest requests = 1;
  // epoch to prevent outdated setup calls
  uint64 epoch = 2;
}

message SetupQuotaRequest {
  // List of quota rules to activate
  UpdateSubscriberQuotaStateRequest quota_updates = 1;
  // epoch to prevent outdated setup calls
  uint64 epoch = 2;
}

message SetupFlowsResult {
  enum Result {
    SUCCESS = 0;
    FAILURE = 1;
    OUTDATED_EPOCH = 2;
  }
  Result result = 1;
}

message RequestOriginType {
  enum OriginType {
    GX = 0;
    GY = 1;
  }
  OriginType type = 1;
}

message ActivateFlowsRequest {
  SubscriberID sid = 1;

  // Subscriber session ipv4 address
  string ip_addr = 2;

  // List of static rules obtained from PCRF
  repeated string rule_ids = 3;

  // List of dynamic rules obtained from PCRF
  repeated PolicyRule dynamic_rules = 4;

  // Activate flow source (GX/GY)
  RequestOriginType request_origin = 5;
}

// DeactivateFlowsRequest can be used to deactivate all flows for a subscriber,
// all flows for some rules, or particular rules for a subscriber, depending on
// which parameters are passed. Rule IDs can apply to static rules or dynamic
// rules
// If no rule ids are given, all flows are deactivated
message DeactivateFlowsRequest {
  SubscriberID sid = 1;
  repeated string rule_ids = 2;
  RequestOriginType request_origin = 3;
}

message RuleModResult {
  string rule_id = 1;
  enum Result {
    SUCCESS = 0;
    PARTIAL_SUCCESS = 1;
    FAILURE = 2;
  }
  Result result = 2;
}

message ActivateFlowsResult {
  repeated RuleModResult static_rule_results = 1;
  repeated RuleModResult dynamic_rule_results = 2;
}

message DeactivateFlowsResult {
  enum Result {
    SUCCESS = 0;
    FAILURE = 1;
    OUTDATED_EPOCH = 2;
  }
  Result result = 1;
}

message FlowRequest {
  FlowMatch match = 1;
  string app_name = 2;
  uint64 bytes_rx = 3;
  string service_type = 4;
  string src_mac = 5;
  string dst_mac = 6;
  enum FlowState {
    FLOW_CREATED = 0;
    FLOW_PARTIAL_CLASSIFICATION = 1;
    FLOW_FINAL_CLASSIFICATION = 2;
    FLOW_EXPIRED = 3;
  }
  FlowState state = 7;
}

message FlowResponse {
  enum Result {
    SUCCESS = 0;
    FAILURE = 1;
    OUTDATED_EPOCH = 2;
  }
  Result result = 1;
}

// UEMacFlowRequest is used to link a subscriber ID to a MAC address.
// This is used for Carrier WiFi data session establishment
message UEMacFlowRequest {
  SubscriberID sid = 1;

  // UE MAC address
  string mac_addr = 2;

  string msisdn = 3;

  // AP MAC address
  string ap_mac_addr = 4;

  // AP Name
  string ap_name = 5;
}

message SubscriberQuotaUpdate{
  SubscriberID sid = 1;
  enum Type {
    VALID_QUOTA = 0;
    NO_QUOTA = 1;
    TERMINATE = 2;
  }
  // UE MAC address
  string mac_addr = 2;
  Type update_type = 3;
}

message UpdateSubscriberQuotaStateRequest {
  repeated SubscriberQuotaUpdate updates = 1;
}

message TableAssignment {
  string app_name = 1;
  uint64 main_table = 2;
  repeated uint64 scratch_tables = 3;
}

message AllTableAssignments {
  repeated TableAssignment table_assignments = 1;
}

message SerializedRyuPacket {
  bytes pkt = 1;
  string imsi = 2;
}

message PacketDropTableId {
  int32 table_id = 1;
}

//-------------------------------------------------------------------------
// SMF to UPF Proto
//-------------------------------------------------------------------------



message NodeID {
  enum NodeIDType {
    IPv4 = 0;
    IPv6 = 1;
    FQDN = 2;
    }
  NodeIDType node_id_type = 1;
  string node_id = 2;
}


//CPFseid message
message CpFSeid {
  uint64 f_seid = 1;
  NodeID node_id = 2;
}

message OuterHeadRemoval {                //conditional PDR Message Structures
  uint32 o_hd_remo_descr = 1;
}


//message LocalFTeid {                      //not sure about the message structure
 ///local_f_teid = ;                        //doubt
//}



message SdfFilters {                               //8.2.5

  FlowDescriptor fd = 1;
  bytes ttc = 2;
  bytes spi = 3;
  bytes fl = 4;
  uint32 sdf_id = 5;
}

message FlowDescriptor {                //include
FlowMatchNew match = 1;
  enum Action {
    PERMIT = 0;
    DENY = 1;
  }
  Action action = 2;
}

message FlowMatchNew {
  string ipv4_src = 1;
  string ipv4_dst = 2;
  uint32 tcp_src = 3;
  uint32 tcp_dst = 4;
  uint32 udp_src = 5;
  uint32 udp_dst = 6;
}

message MacAddress {            //8.2.93
  bytes mac_src_value = 1;
  bytes mac_dst_value = 2;
  bytes upper_mac_src_value = 3;
  bytes upper_mac_dst_value = 4;
}


//Table 7.5.2.2-3: Ethernet Packet Filter IE within PFCP Session Establishment Request
message EthPackFilter {
  uint32 eth_filt_id = 1;
  uint32 eth_filt_prop = 2;
  MacAddress mac_addr = 3;
  uint32 c_tag = 4;                                   //not verified the tag values
  uint32 s_tag = 5;
  SdfFilters sdf_filters = 6;
  uint32 ethertype = 7;
}


message ApplyAction {               //8.2.26
  enum Action{
    DROP = 0;
    FORW = 1;
    //Below may be reqd. In future.
    BUFF = 2;
    NOCP = 3;
    DUPL = 4;
  }
  repeated Action apply_action = 1;
}


message RedirectInfo {                //8.2.20    //doubt who gives the info to SMF
  enum RedirectAddrType {
    IPV4 = 0;
    IPV6 = 1;
    URL = 2;
    SIPURI = 3;
    IPV4V6 = 4;
  }
  RedirectAddrType red_add_type = 1;
  string red_server_addr = 2;
}

message OuterHeaderCreation {
 uint32 o_teid = 1;
 string ipv4_adr = 2;
 uint32 port_no = 3;
}


//Table 7.5.2.3-2: Forwarding Parameters IE in FAR
message FwdParam {
  uint32 dest_iface = 1;                        // need to add enums for dest. interface 8.2.24
  string net_instace = 2;
  RedirectInfo redirect_info = 3;
  OuterHeaderCreation outr_head_cr = 4;                  //this has to be defined as per MVC // now created
}


//Table 7.5.2.3-3: Duplicating Parameters IE in FAR
message DupParam {
  uint32 dest_iface = 1;
}


//PDI Message Table 7.5.2.2-2: PDI IE within PFCP Session Establishment Request
message PDI {
  uint32 src_interface = 1;
  // LocalFTeid local_f_teid = 2;        //optional and conditionals
  string net_instance = 3;
  string ue_ip_adr = 4;         //modified and added ueipv4 address
  bytes tr_ep_id = 5;                //8.2.92
  SdfFilters sdf_filters = 6;
  string app_id = 7;
}

//Group Type messages - Currently Includes -> 1. PDR 2. FAR

//PDR message Table 7.5.2.2-1: Create PDR IE within PFCP Session Establishment Request
message SetGroupPDR {
  uint32 pdr_id = 1;
  int32 sess_ver_no = 2;
  uint32 precedence = 3;
  PDI pdi = 4;
  OuterHeadRemoval o_h_remo_desc = 5;      
  uint32 far_id = 6;
  uint32 urr_id = 7;
  uint32 qer_id = 8;
  uint32 bar_id = 9;
  string active_pred_rule = 10;     // modified and renamed     //8.2.72 Doubt
}


//FAR message Table 7.5.2.3-1: Create FAR IE within PFCP Session Establishment Request
message SetGroupFAR {
  uint32 far_id = 1;              //FAR ID should be less than 2^32
  int32 sess_ver_no = 2;
  ApplyAction apply_action = 3;
  FwdParam fwd_parm = 4;
  DupParam du_param = 5;     // might be required for 4G
  uint32 bar_id = 6;
}

// ToDO  SetGroupQER   write
// ToDo  SetGroupBAR   write




//SET message - SMF to Upf Session Requests
message SessionSet {
  string seid = 1;
  int32 sess_ver_no = 2;
  NodeID node_id = 3;

  enum SessionState {
    // before 6 all values are already reserved for old FSM states
    CREATING = 7;
    CREATED =  8;
    ACTIVE   =9;
    INACTIVE =10;
    RELEASE  =11;
  }
  SessionState session_state = 4;
  CpFSeid f_seid = 5;
  repeated SetGroupPDR set_gr_pdr = 6;
  repeated SetGroupFAR set_gr_far = 7;
  //repeated SetGroupQER set_gr_qer = 8;
  //repeated SetGroupBAR set_gr_bar = 9;
  //TrafficEndPoint tr_ep = 9;
  //PdnType pdn_type = 10;
  //UserPlId user_pl_id = 11;
  //UserId user_id = 12;
  //TraceInfo tr_info = 13;
  //ApnDnn apn_dnn = 14;
}


message UpfRes {}

service UPFServicesForSMF {
     rpc SetSMFSessions(SessionSet) returns (UpfRes) {}
}





// --------------------------------------------------------------------------
// Pipelined gateway RPC service
// --------------------------------------------------------------------------
service Pipelined {
  // ----------------
  // Enforcement App:
  // ----------------

  // Setup flows for subscribers (used on restarts)
  rpc SetupPolicyFlows (SetupPolicyRequest) returns (SetupFlowsResult) {}

  // Activate flows for a subscriber based on predefined flow templates
  rpc ActivateFlows (ActivateFlowsRequest) returns (ActivateFlowsResult) {}

  // Deactivate flows for a subscriber
  rpc DeactivateFlows (DeactivateFlowsRequest) returns (DeactivateFlowsResult) {}

  // Get policy usage stats
  rpc GetPolicyUsage (magma.orc8r.Void) returns (RuleRecordTable) {}

  // --------
  // DPI App:
  // --------

  // Add new dpi flow
  rpc CreateFlow (FlowRequest) returns (FlowResponse) {};

  // Remove dpi flow
  rpc RemoveFlow (FlowRequest) returns (FlowResponse) {};

  // Update flow stats
  rpc UpdateFlowStats (FlowRequest) returns (FlowResponse) {};

  // ----------------
  // Quota Check App:
  // ----------------

  // Setup subscribers flows (used on restarts)
  rpc SetupQuotaFlows (SetupQuotaRequest) returns (SetupFlowsResult) {}

  // Synchronize subscribers quota check flows
  rpc UpdateSubscriberQuotaState (UpdateSubscriberQuotaStateRequest) returns (FlowResponse) {}

  // -----------
  // UE MAC App:
  // -----------

  // Setup subscribers flows (used on restarts)
  rpc SetupUEMacFlows (SetupUEMacRequest) returns (SetupFlowsResult) {}

  // Add a flow for a subscriber by matching the provided UE MAC address
  rpc AddUEMacFlow (UEMacFlowRequest) returns (FlowResponse) {}

  // Delete a flow for a subscriber by matching the provided UE MAC address
  rpc DeleteUEMacFlow (UEMacFlowRequest) returns (FlowResponse) {}

  // -----------
  // IPFIX App:
  // -----------

  // Update subscriber IPFIX flows
  rpc UpdateIPFIXFlow (UEMacFlowRequest) returns (FlowResponse) {}

  // --------
  // Debugging:
  // --------

  // Get the flow table assignment for all apps ordered by main table number
  // and name
  rpc GetAllTableAssignments (magma.orc8r.Void) returns (AllTableAssignments);
}
