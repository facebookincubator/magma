---
# Copyright 2020 The Magma Authors.

# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Validate MAGMA_ROOT env variable
  fail: msg="MAGMA_ROOT and OUTPUT_DIR are required"
  when:
    - MAGMA_ROOT is not defined or OUTPUT_DIR is not defined

- name: Validate kernel version supported
  fail:
    msg: Kernel {{ ansible_kernel  }} not supported please use 4.9.0-9-amd64
  when: ansible_kernel != '4.9.0-9-amd64'

- name: Converting WORK_DIR to absolute path
  shell: realpath {{ WORK_DIR }}
  register: WORK_DIR_ABSOLUTE

- name: Converting OUTPUT_DIR to absolute path
  shell: realpath {{ OUTPUT_DIR }}
  register: OUTPUT_DIR_ABSOLUTE

- name: Removing "{{ WORK_DIR_ABSOLUTE.stdout }}".
  become: true
  file:
    path: "{{ WORK_DIR_ABSOLUTE.stdout }}"
    state: absent
    force: true

- name: Creating "{{ WORK_DIR }}"
  file:
    path: "{{ WORK_DIR }}"
    state: directory
    mode: 0755
  register: GIT_HOME

- name: Update and upgrade apt packages
  become: true
  apt:
    update_cache: true
    cache_valid_time: 3600
  changed_when: false
  when: ansible_os_family == 'Debian'

- name: Install build dependencies.
  become: true
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ packages }}"

- name: Ensure correct kernel headers are installed.
  become: true
  package:
    name: "linux-headers-{{ ansible_kernel }}"
    state: present
  when: ansible_os_family == 'Debian'

- name: Copy ssh keepAlive configs
  copy:
    mode: preserve
    src: sshd_config
    dest: /etc/ssh/sshd_config
  become: true
  notify:
    - Restart service ssh

- name: Install FPM
  become: true
  gem:
    name: fpm
    user_install: false
    state: present

- name: Check that ovs source code folder exists
  stat:
    path: "{{ GIT_HOME.path }}/ovs"
  register: ovs_dest_stat

- name: Prepare the ovs source code
  block:
    - name: Cloning the ovs "{{ ovs_version }}".
      git:
        repo: https://github.com/openvswitch/ovs.git
        dest: "{{ GIT_HOME.path }}/ovs"
        version: "{{ ovs_version }}"

    - name: Uploading gtp backport patch to remote.
      synchronize:
        src: "{{ MAGMA_ROOT }}/{{ gtp_patch_path }}/gtp-v4.9-backport/"
        dest: "{{ GIT_HOME.path }}/ovs/flow-based-gtp-linux-v4.9"

    - name: Uploading gtp patches to remote.
      synchronize:
        src: "{{ MAGMA_ROOT }}/{{ gtp_patch_path }}/{{ ovs_version_short }}/"
        dest: "{{ GIT_HOME.path }}/ovs/"
      with_items: "{{ patches }}"

    - name: Patch ovs
      command: git apply "{{ item }}"  # noqa 303
      args:
        chdir: "{{ GIT_HOME.path }}/ovs"
      with_items: "{{ patches }}"

    - name: Cherry pick vlan patch
      shell: |
        set -o pipefail
        git show "{{ vlan_fix_hash }}" | git apply -3 -
      args:
        executable: /bin/bash
        chdir: "{{ GIT_HOME.path }}/ovs"
  when: not ovs_dest_stat.stat.exists

- name: Check that ovs depcomp file exists
  stat:
    path: "{{ GIT_HOME.path }}/ovs/build-aux/depcomp"
  register: ovs_depcomp

- name: Execute the boot.sh script.
  command: sh boot.sh  # noqa 301
  args:
    chdir: "{{ GIT_HOME.path }}/ovs"
  when: not ovs_depcomp.stat.exists
