---
# Copyright 2020 The Magma Authors.

# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- fail: msg="MAGMA_ROOT and OUTPUT_DIR are required"
  when:
    - MAGMA_ROOT is not defined or OUTPUT_DIR is not defined

- fail:
    msg: Kernel {{ ansible_kernel  }} not supported please use 4.9.0-9-amd64
  when: ansible_kernel != '4.9.0-9-amd64'

- name: Include vars of all.yaml
  include_vars:
    file: all.yaml
    name: all_vars

- name: Converting WORK_DIR to absolute path
  shell: realpath {{ all_vars.WORK_DIR }}
  register: WORK_DIR_ABSOLUTE

- name: Converting OUTPUT_DIR to absolute path
  shell: realpath {{ OUTPUT_DIR }}
  register: OUTPUT_DIR_ABSOLUTE

- name: Removing "{{ WORK_DIR_ABSOLUTE.stdout }}".
  become: true
  file:
    path: "{{ WORK_DIR_ABSOLUTE.stdout }}"
    state: absent
    force: true

- name: Creating "{{ all_vars.WORK_DIR }}"
  file:
    path: "{{ all_vars.WORK_DIR }}"
    state: directory
    mode: 0755
  register: GIT_HOME

- name: Update and upgrade apt packages
  become: true
  apt:
    update_cache: true
    upgrade: "yes"

- name: Install build dependencies.
  become: true
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - graphviz
      - debhelper
      - dh-autoreconf
      - python-all
      - python-twisted-conch
      - module-assistant
      - openssl
      - pkg-config
      - libssl-dev
      - build-essential
      - libcap-ng-dev
      - git
      - ruby-dev

- name: Ensure correct kernel headers are installed.
  shell: "apt -y install linux-headers-$(uname -r)"
  become: true

- name: Copy ssh keepAlive configs
  copy: src={{ item.src }} dest={{ item.dest }}
  become: true
  with_items:
    - {src: 'sshd_config', dest: '/etc/ssh/sshd_config'}

- name: Restart service ssh
  become: true
  service:
    name: ssh
    state: restarted

- name: Install FPM
  become: true
  gem: name=fpm
       user_install=no
       state=present

- name: Cloning the ovs "{{ all_vars.ovs_version }}".
  git:
    repo: https://github.com/openvswitch/ovs.git
    dest: "{{ GIT_HOME.path }}/ovs"
    version: "{{ all_vars.ovs_version }}"

- name: Uploading gtp backport patch to remote.
  synchronize:
    src: "{{ MAGMA_ROOT }}/{{ all_vars.gtp_patch_path }}/gtp-v4.9-backport/"
    dest: "{{ GIT_HOME.path }}/ovs/flow-based-gtp-linux-v4.9"

- name: Uploading gtp patches to remote.
  synchronize:
    # yamllint disable-line rule:line-length
    src: "{{ MAGMA_ROOT }}/{{ all_vars.gtp_patch_path }}/{{ all_vars.ovs_version_short }}/"
    dest: "{{ GIT_HOME.path }}/ovs/"
  with_items:
    - "{{ all_vars.patches }}"

- name: Patch ovs
  command: git apply "{{ item }}"
  args:
    chdir: "{{ GIT_HOME.path }}/ovs"
  with_items:
    - "{{ all_vars.patches }}"

- name: Cherry pick vlan patch
  command: bash -c 'git show "{{ all_vars.vlan_fix_hash }}" | git apply -3 -'
  args:
    chdir: "{{ GIT_HOME.path }}/ovs"

- name: Execute the boot.sh script.
  command: sh boot.sh
  args:
    chdir: "{{ GIT_HOME.path }}/ovs"
