################################################################
# Builder Image (can also be used as developer's image)
################################################################
FROM ubuntu:focal as mme_builder

ARG GIT_PROXY
ARG FEATURES=mme_oai
ENV MAGMA_ROOT=/magma
ENV BUILD_TYPE=Debug
ENV C_BUILD=/build/c
ENV TZ=Europe/Paris
ENV DEBIAN_FRONTEND=noninteractive

RUN mkdir -p $C_BUILD

RUN echo "Install general purpouse packages" && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        apt-transport-https \
        apt-utils \
        autoconf \
        autoconf automake \
        automake \
        build-essential \
        ca-certificates \
        clang-11 \
        clang-format-7 \
        clang-format-11 \
        clang-tidy-11 \
        curl \
        g++ \
        g++-9 \
        gcc-9 \
        lcov \
        git \
        gnupg \
        golang \
        libclang-11-dev \
        libgmp3-dev \
        libpcap-dev \
        libssl-dev \
        libtins-dev \
        libtool \
        make \
        ninja-build \
        perl \
        pkg-config \
        python2.7 \
        redis-server \
        ruby \
        rubygems \
        ruby-dev \
        software-properties-common \
        tzdata \
        unzip \
        vim \
        wget && \
        gem install fpm && \
        update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-11/bin/clang 10 && \
        update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-11/bin/clang++ 10 && \
        update-alternatives --install /usr/bin/clang-format clang-format /usr/lib/llvm-7/bin/clang-format 10 && \
        update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/lib/llvm-11/bin/clang-tidy 10 && \
        update-alternatives --install /usr/bin/clang-apply-replacements clang-apply-replacements /usr/lib/llvm-11/bin/clang-apply-replacements 10

RUN echo "Install 3rd party dependencies" && \
    apt-get update && \
    echo "Install CMake" && \
    apt-get -y install cmake && \
    echo "Install FMT lib requirements" && \
    apt-get -y install libunwind8-dev libelf-dev libdwarf-dev bzip2 && \
    echo "Install Folly requirements" && \
    apt-get -y install libboost-all-dev libevent-dev libdouble-conversion-dev \
    libgoogle-glog-dev libgflags-dev libiberty-dev liblz4-dev liblzma-dev \
    libsnappy-dev binutils-dev libjemalloc-dev libssl-dev pkg-config libunwind-dev && \
    echo "Install check for test support" && \
    apt-get -y install check && \
    echo "Install gtest for test support" && \
    apt-get -y install libgtest-dev && \
    echo "Install FreeDiameter requirements" && \
    apt-get -y install libsctp1 libsctp-dev libgcrypt-dev \
    bison flex libidn11-dev && \
    echo "Install libgtpnl requirements" && \
    apt-get -y install libmnl-dev && \
    echo "Install Nettle requirements" && \
    apt-get install -y libgoogle-glog-dev libconfig-dev libxml2-dev \
    libyaml-cpp-dev nlohmann-json3-dev && \
    echo "Install ZeroMQ" && \
    apt-get install -y libczmq-dev && \
    ln -s /usr/bin/python2.7 /usr/local/bin/python && \
    # TODO(fixup this include in source code @ MConfigLoader.cpp)
    ln -s /usr/include/nlohmann/json.hpp /usr/include/json.hpp

RUN ["/bin/bash", "-c", "if [[ -v GIT_PROXY ]]; then git config --global http.proxy $GIT_PROXY; fi"]

##### Clean up MAGMA_ROOT so others don't accidentally use it.
# E.g. in CI environments access to repo should occur through docker volume from the parent OS.
# Further, some environments assume specific mount points for the source code (e.g. GitHub Actions).
RUN rm -rf $MAGMA_ROOT

# TODO: Move this up, but for now leverage cache and iterate at bottom
RUN cd /usr/sbin/ && \
    wget https://github.com/bazelbuild/bazelisk/releases/download/v1.6.1/bazelisk-linux-amd64 && \
    chmod +x bazelisk-linux-amd64 && \
    ln -s /usr/sbin/bazelisk-linux-amd64 /usr/sbin/bazel

# Install buildifier to format bazel files
RUN go get github.com/bazelbuild/buildtools/buildifier && \
    export PATH="/root/go/bin:$PATH"