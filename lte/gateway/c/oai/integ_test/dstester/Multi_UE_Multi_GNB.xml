<?xml version="1.0" encoding="UTF-8"?>
<dst:devsol xmlns:dst="http://www.developingsolutions.com/schema/dsTest" test_name="Examples/n2/example_app_n2_Xn_Handoff_gnb.dsx">
<!-- XML generated by dsClientv5.5.20201109 on 02/19/2021 19:03:44 using dsTest schema v5.5.20210117 -->
  <config>
	    <!-- Config element used to specify node configurations-->
    <nodes>
        <spr name="gnb-spr">
			<!-- Configuration for emulated Subscription Profile Repository Node -->
          <auto_start>true</auto_start>
            <subscriber_database count="10" name="gnbSubs">
              <subscriber_profiles>
				  <!-- Subscriber Profile defines the general network and specific application profiles that are assigned to groups of subscribers -->
                  <access_profile name="access_profile">
					  <!-- Access Profile defines the network access parameters for a range of subscribers -->
                    <new_radio_128_nea0_encryption>true</new_radio_128_nea0_encryption>
                    <new_radio_128_nia1_integrity>true</new_radio_128_nia1_integrity>
                    <requested_nssai>
                      <s_nssai>
                        <sst>14</sst>
                        <sd>33</sd>
                      </s_nssai>
                      <s_nssai>
                        <sst>75</sst>
                        <sd>2</sd>
                      </s_nssai>
                    </requested_nssai>
                    <ssc_mode>1</ssc_mode>
                  </access_profile>
                  <authentication_profile name="authentication_profile_1">
					  <!-- Authenticatioin Profile defines the authentication parameters for a range of subscribers -->
                    <auth_type>5gAKA</auth_type>
                    <auth_algorithm>Milenage</auth_algorithm>
                    <amf>0x8000</amf>
                  </authentication_profile>
                  <subscription_profile name="subscription_profile">
					  <!-- Subscription Profile is a data structure that contains a subscriber's current connection profile -->
                    <pdu_config>
                      <context_id>34</context_id>
                      <type>IPv4</type>
                      <dnn>carrier.com</dnn>
                      <s_nssai>
                        <sst>9</sst>
                        <sd>5</sd>
                      </s_nssai>
                    </pdu_config>
                  </subscription_profile>
                  <SmartProfile name="SmartProfile">
					   <!-- Smart Profile contains various parameters used to alter the default behavior of dsTest -->
                      <SmartEvents>
						  <!-- SmarEvents contains the state and event handler definitions for SmartEvents-->
                        <states>
							<!-- States contains a list of unique states that a subscriber can traverse in your state machine -->
                          <state start_point="125.59999999999998,97.59999999999998" width="100.0" height="60.0">idle</state>
                          <state start_point="326.1,97.59999999999998" width="100.0" height="60.0">pdu_setup</state>
                          <state start_point="526.1,185.6" width="100.0" height="60.0">handover</state>
                          <state start_point="526.1,338.6" width="100.0" height="60.0">pdu_delete</state>
                          <state start_point="269.6,394.6000000000001" width="100.0" height="60.0">detach</state>
                          <state start_point="125.59999999999998,318.6" width="100.0" height="60.0">ending</state>
                        </states>
                        <event_handlers>
							<!-- SmartEvent handlers Defines the conditions under which an event is trapped and specifies the action to be performed -->
                          <event_handler start_point="135.9333333333333,97.93333333333332" end_point="215.9333333333333,97.93333333333332" height="-62">
                            <current_state>idle</current_state>
                            <!-- idle is the beginning state of the event handler-->
                            <transaction_start/>
                            <!-- Transaction start traps the event that is fired from an application when a subscriber enters into a transaction-->
                            <action>
								 <!-- Action defines the action to be executed, along with the target application, node, and any supplementary information provided -->
                              <app>n2</app>
                               <!--  App is the name of a dsTest interface application-->
                              <event>registration</event>
                               <!-- gnb_1 node will execute the UE registration event of n2 applicatioin -->
                              <node>gnb_1</node>
                              <!-- Name of the node that will execute the action, or the first node of a range to be used -->
                            </action>
                          </event_handler>
                          <event_handler start_point="225.9333333333333,127.93333333333332" end_point="326.43333333333334,127.93333333333332" height="-180">
                            <current_state>idle</current_state>
                            <!-- idle is the beginning state of the event handler-->
                            <event_received app="n2" event="registration"/>
                            <!-- It Identifies an n2 application UE registration event to be trapped -->
                            <next_state>pdu_setup</next_state>
                             <!-- Pdu Setup state to be entered after an n2 UE registration action is executed -->
                            <timer>5000</timer>
                             <!--starts the timer with 5 seconds -->
                          </event_handler>
                          <event_handler start_point="336.43333333333334,97.93333333333332" end_point="416.4333333333334,97.93333333333332" height="-60">
                            <current_state>pdu_setup</current_state>
                             <!-- Pdu Setup is the beginning state of the event handler -->
                            <timeout/>
                            <!--Time (5s) after a UE registration request is sent, before being retransmitted-->
                            <action>
                              <app>n2</app>
                               <!-- current node will execute the pdu session establish event of n2 application -->
                              <event>pdu_session_establish</event>
                              <node>CURRENT NODE</node>
                            </action>
                          </event_handler>
                          <event_handler start_point="426.4333333333334,127.93333333333332" end_point="576.4333333333334,185.9333333333333" height="-88">
                            <current_state>pdu_setup</current_state>
                            <!-- Pdu Setup is the beginning state of the event handler -->
                            <event_received app="n2" event="pdu_session_establish"/>
                            <!-- It Identifies an n2 application pdu session establish event to be trapped-->
                            <next_state>handover</next_state>
                            <!-- Handover state to be entered after an n2 UE pdu session establishment action is executed -->
                            <timer>5000</timer>
                            <!--starts the timer with 5 seconds -->
                          </event_handler>
                          <event_handler start_point="526.4333333333334,235.9333333333333" end_point="526.4333333333334,195.9333333333333" height="-60">
                            <current_state>handover</current_state>
                            <!-- Handover is the beginning state of the event handler -->
                            <timeout/>
                            <!--Time (5s) after a UE pdu session establishment is sent, before being retransmitted-->
                            <action>
                              <app>n2</app>
                               <!-- gnb_2 node will execute the xn_handover event of n2 applicatioin -->
                              <event>xn_handover</event>
                              <node>gnb_2</node>
                            </action>
                          </event_handler>
                          <event_handler start_point="576.4333333333334,245.9333333333333" end_point="576.4333333333334,338.93333333333334" height="112">
                            <current_state>handover</current_state>
                            <!-- Handover is the beginning state of the event handler -->
                            <event_received app="n2" event="xn_handover"/>
                            <!-- It Identifies an n2 application xn handover event to be trapped-->
                            <next_state>pdu_delete</next_state>
                            <!-- Pdu Delete state to be entered after an n2 xn handover action is executed -->
                            <timer>5000</timer>
                             <!--starts the timer with 5 seconds -->
                          </event_handler>
                          <event_handler start_point="526.4333333333334,348.9333333333334" end_point="526.4333333333334,388.9333333333334" height="-64">
                            <current_state>pdu_delete</current_state>
                            <!-- Pdu Delete is the beginning state of the event handler -->
                            <timeout/>
                             <!--Time (5s) after a xn handover is sent, before being retransmitted-->
                            <action>
                              <app>n2</app>
                              <event>pdu_session_release</event>
                              <!-- current node will execute the pdu session release event of n2 application -->
                              <node>CURRENT NODE</node>
                              <dnn>carrier.com</dnn>
                              <!-- Identifies the DNN for which the associated action will be generated on -->
                            </action>
                          </event_handler>
                          <event_handler start_point="576.4333333333334,398.9333333333334" end_point="369.9333333333334,424.9333333333334" height="-88">
                            <current_state>pdu_delete</current_state>
                            <!-- Pdu Delete is the beginning state of the event handler -->
                            <event_received app="n2" event="pdu_session_release"/>
                            <!-- It Identifies an n2 application pdu session release event to be trapped-->
                            <next_state>detach</next_state>
                            <!-- detach state to be entered after an n2 pdu session release action is executed -->
                            <timer>5000</timer>
                            <!--starts the timer with 5 seconds -->
                          </event_handler>
                          <event_handler start_point="269.93333333333334,424.9333333333334" end_point="175.9333333333333,378.9333333333334" height="-48">
                            <current_state>detach</current_state>
                            <!-- detach is the beginning state of the event handler -->
                            <timeout/>
                            <!--Time (5s) after a pdu session release request is sent, before being retransmitted-->
                            <action>
                              <app>n2</app>
                              <event>deregistration</event>
                               <!-- current node will execute the UE deregistration event of n2 application -->
                              <node>CURRENT NODE</node>
                            </action>
                            <next_state>ending</next_state>
                          </event_handler>
                          <event_handler start_point="175.9333333333333,318.93333333333334" end_point="175.9333333333333,157.9333333333333" height="-72">
                            <current_state>ending</current_state>
                             <!-- Ending is the beginning state of the event handler -->
                            <event_received app="n2" event="deregistration"/>
                            <!-- It Identifies an n2 application UE Detach event to be trapped-->
                            <transaction_complete/>
                             <!-- Indicates that the message flow was successfully completed -->
                          </event_handler>
                          <event_handler start_point="45.866666666666674,263.2" end_point="125.93333333333332,127.93333333333332" height="-52">
                            <current_state>ANY</current_state>
                            <!-- ANY is a special state that can be used to process an event that may occur at any time-->
                            <error/>
                            <transaction_failed/>
                            <!-- Indicates that a state machine transaction failed because of error event to complete -->
                          </event_handler>
                          <event_handler start_point="23.0,197.66666666666666" end_point="125.93333333333332,107.93333333333332" height="-47">
                            <current_state>ANY</current_state>
                            <!-- ANY is a special state that can be used to process an event that may occur at any time-->
                            <event_received app="n2" event="protocol_failed"/>
                            <!-- Indicates that a state machine transaction failed because of error event to complete -->
                            <next_state>idle</next_state>
                          </event_handler>
                        </event_handlers>
                      </SmartEvents>
                  </SmartProfile>
              </subscriber_profiles>
              <subscriber_group percentage="100" name="subscriber_group">
				  <!-- Subscriber group defines the unique values for a range of subscribers and which profiles are associated with those subscribers -->
                <group_profiles>
					<!-- Group profiles links a group of subscribers to their profiles-->
                  <access_profile>access_profile</access_profile>
                  <authentication_profile>authentication_profile_1</authentication_profile>
                  <subscription_profile>subscription_profile</subscription_profile>
                  <SmartProfile>SmartProfile</SmartProfile>
                </group_profiles>
                <identities>
					<!-- Defines the starting identity values for a group of subscribers -->
                  <imsi>26012300000001</imsi>
                  <key>0x0C0A34601D4F07677303652C0462535B</key>
                  <op>0x63bfa50ee6523365ff14c1f45f88737d</op>
                </identities>
                <dynamic_information>
					<!--Defines the starting values for a group of subscribers-->
                  <sqn>0x1708d5d0</sqn>
                  <vplmn>431-265</vplmn>
                  <cell_id>1485</cell_id>
                </dynamic_information>
              </subscriber_group>
            </subscriber_database>
             <!--Subscriber database referenced by a node-->
        </spr>
        <gnb name="gnb_1" count="2">
			<!-- Configuration for emulated multi gNodeB-->
          <auto_start>true</auto_start>
          <n2 count="100">
            <interface name="interface_1" native="true">
              <sctp>
                <ip_address>127.2.0.1</ip_address>
                <dest_ip_address>127.1.0.1</dest_ip_address>
              </sctp>
              <user_socket>
                <ip_address>127.12.0.1</ip_address>
              </user_socket>
            </interface>
              <user_data>
                <delay>20</delay>
                  <basic_data name="basic_data">
                    <dest_ip>127.20.0.1</dest_ip>
                    <protocol>UDP</protocol>
                    <size>60</size>
                    <rate>1</rate>
                    <auto_start>true</auto_start>
                    <auto_stop>2</auto_stop>
                  </basic_data>
              </user_data>
          </n2>
          <mcc>320</mcc>
          <mnc>230</mnc>
          <node_name>dstest.gnb</node_name>
          <global_gnb_id>1048575</global_gnb_id>
          <default_paging_drx>v256</default_paging_drx>
          <supported_ta>
            <tac>0xa000</tac>
            <bplmn>
              <mcc>320</mcc>
              <mnc>230</mnc>
              <slice_support_item>
                <nssai_sst>0x56</nssai_sst>
                <nssai_sd>0x943145</nssai_sd>
              </slice_support_item>
              <slice_support_item>
                <nssai_sst>0x27</nssai_sst>
                <nssai_sd>0x385382</nssai_sd>
              </slice_support_item>
            </bplmn>
            <bplmn>
              <mcc>456</mcc>
              <mnc>54</mnc>
              <slice_support_item>
                <nssai_sst>0x10</nssai_sst>
                <nssai_sd>0x583922</nssai_sd>
              </slice_support_item>
            </bplmn>
          </supported_ta>
          <supported_ta>
            <tac>0xa001</tac>
            <bplmn>
              <mcc>202</mcc>
              <mnc>100</mnc>
              <slice_support_item>
                <nssai_sst>0x23</nssai_sst>
                <nssai_sd>0x321236</nssai_sd>
              </slice_support_item>
            </bplmn>
            <bplmn>
              <mcc>203</mcc>
              <mnc>001</mnc>
              <slice_support_item>
                <nssai_sst>0xFF</nssai_sst>
                <nssai_sd>0x123483</nssai_sd>
              </slice_support_item>
            </bplmn>
          </supported_ta>
          <subscriber_database name="gnbSubs"/>
        </gnb>
    </nodes>
  </config>
  <command>
	    <!--Element used to specify various commands for the nodes-->
    <wait>1000</wait>
     <!--Causes processing to be suspended at this point for a duration equal to 1s -->
  </command>
  <command>
    <spr name="gnb-spr">
      <action>
        <rate>1</rate>
         <!-- Rate at which to generate the event -->
        <cycle>1</cycle>
        <!--Number of time to cycle through the selected subscribers -->
        <start>1</start>
        <!-- index or IMSI of a subscriber for action -->
        <end>10</end>
        <!-- index or IMSI of a subscriber for action -->
        <ready>gnb_1</ready>
         <!-- Defines a node which must be ready before starting this action -->
        <ready>gnb_2</ready>
         <!-- Defines a node which must be ready before starting this action -->
        <app>SmartEvents</app>
         <!-- Application which the SPR supports -->
        <event>start</event>
         <!-- Events which an SPR can initiate-->
      </action>
      <!-- Definition of an action for an SPR Node-->
    </spr>
  </command>
</dst:devsol>
