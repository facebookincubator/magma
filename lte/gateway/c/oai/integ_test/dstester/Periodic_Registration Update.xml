<?xml version="1.0" encoding="UTF-8"?>
<dst:devsol xmlns:dst="http://www.developingsolutions.com/schema/dsTest" test_name="Local Library/Testlib/Idle_mode.dsx">
<!-- XML generated by dsClientv5.5.20201109 on 02/08/2021 21:58:14 using dsTest schema v5.5.20210117 -->
  <config>
	  <!-- Config element used to specify node configurations-->
    <nodes>
        <spr name="spr_gnb">
			<!-- Configuration for emulated Subscription Profile Repository Node -->
          <auto_start>true</auto_start>
            <subscriber_database count="1" name="gnb_subs">
              <subscriber_profiles>
				  <!-- Subscriber Profile defines the general network and specific application profiles that are assigned to groups of subscribers -->
                  <access_profile name="access_profile">
					  <!-- Access Profile defines the network access parameters for a range of subscribers -->
                  <new_radio_128_nea0_encryption>true</new_radio_128_nea0_encryption>
                    <new_radio_128_nia0_integrity>true</new_radio_128_nia0_integrity>
                    <requested_nssai>
                      <s_nssai>
                        <sst>222</sst>
                        <sd>123</sd>
                      </s_nssai>
                      <s_nssai>
                        <sst>75</sst>
                        <sd>2</sd>
                      </s_nssai>
                    </requested_nssai>
                    <ssc_mode>1</ssc_mode>
                  </access_profile>
                  <authentication_profile name="authentication_profile_1">
					  <!-- Authenticatioin Profile defines the authentication parameters for a range of subscribers -->
                    <auth_type>5gAKA</auth_type>
                    <auth_algorithm>Milenage</auth_algorithm>
                    <amf>0x8000</amf>
                  </authentication_profile>
                  <subscription_profile name="subscription_profile">
					  <!-- Subscription Profile is a data structure that contains a subscriber's current connection profile -->
                    <pdu_config>
                      <context_id>34</context_id>
                      <type>IPv4</type>
                      <dnn>carrier.com</dnn>
                      <s_nssai>
                        <sst>222</sst>
                        <sd>123</sd>
                      </s_nssai>
                      <up_transport_address>10.32.116.1</up_transport_address>
                    </pdu_config>
                  </subscription_profile>
                  <user_data_profile name="user_data_profile_1">
			        <!-- User data profile contains data about user data type -->
                    <delay>500</delay>
                      <basic_data name="basic_data">
                        <dest_ip>8.8.8.8</dest_ip>
                        <protocol>TCP</protocol>
                        <dport>53</dport>
                        <sport>5001</sport>
                        <size>1024</size>
                        <rate>1000</rate>
                        <auto_start>true</auto_start>
                      </basic_data>
                  </user_data_profile>
                  <SmartProfile name="SmartProfile">
					  <!-- Smart Profile contains various parameters used to alter the default behavior of dsTest -->
                      <SmartEvents>
						  <!-- SmarEvents contains the state and event handler definitions for SmartEvents-->
                      <states>
						  <!-- States contains a list of unique states that a subscriber can traverse in your state machine -->
    <state start_point="133.6,81.6" width="100.0" height="60.0">idle</state>
    <state start_point="366.1000000000001,81.6" width="100.0" height="60.0">pdu_setup</state>
    <state start_point="510.1000000000001,193.6" width="100.0" height="60.0">Periodic_Reg</state>
    <state start_point="381.6000000000001,337.6" width="100.0" height="60.0">deregistration</state>
    <state start_point="157.6,341.6000000000001" width="100.0" height="60.0">ending</state>
  </states>
  <event_handlers>
	  <!-- SmartEvent handlers Defines the conditions under which an event is trapped and specifies the action to be performed -->
    <event_handler start_point="144.1,82.1" end_point="224.1,82.1" height="-68">
      <current_state>idle</current_state>
      <!-- idle is the beginning state of the event handler-->
      <transaction_start/>
      <!-- Transaction start traps the event that is fired from an application when a subscriber enters into a transaction-->
      <action>
		  <!-- Action defines the action to be executed, along with the target application, node, and any supplementary information provided -->
        <app>n2</app>
        <!--  App is the name of a dsTest interface application-->
        <event>registration</event>
         <!-- gnb_1 node will execute the UE registration event of n2 applicatioin -->
        <node>gnb_1</node>
        <!-- Name of the node that will execute the action, or the first node of a range to be used -->
      </action>
    </event_handler>
    <event_handler start_point="234.1,112.1" end_point="366.6000000000001,112.1" height="-92">
      <current_state>idle</current_state>
      <!-- idle is the beginning state of the event handler-->
      <event_received app="n2" event="registration"/>
      <!-- It Identifies an n2 application UE registration event to be trapped -->
      <next_state>pdu_setup</next_state>
      <!-- Pdu Setup state to be entered after an n2 UE registration action is executed -->
      <timer>2000</timer>
      <!--starts the timer with 2 seconds -->
    </event_handler>
    <event_handler start_point="466.6000000000001,112.1" end_point="560.6000000000001,194.1" height="-72">
      <current_state>pdu_setup</current_state>
      <!-- Pdu Setup is the beginning state of the event handler -->
      <timeout/>
      <!--Time (2s) after a UE registration request is sent, before being retransmitted-->
      <action>
        <app>n2</app>
        <event>registration</event>
        <!-- gnb_1 node will execute the periodic registration event of n2 application -->
        <node>gnb_1</node>
      </action>
      <next_state>Periodic_Reg</next_state>
      <!--- periodic registration state to be entered after an n2 pdu setup action is executed-->
      <timer>2000</timer>
      <!--starts the timer with 2 seconds -->
    </event_handler>
    <event_handler start_point="560.6000000000001,254.1" end_point="482.1000000000001,368.1" height="-92">
      <current_state>Periodic_Reg</current_state>
      <!-- periodic reg is the beginning state of the event handler -->
      <event_received app="n2" event="registration"/>
      <!-- It Identifies an n2 application UE registration event to be trapped -->
      <next_state>deregistration</next_state>
      <!-- deregistration state to be entered after an n2 UE registration action is executed -->
      <timer>2000</timer>
      <!--starts the timer with 2 seconds -->
    </event_handler>
    <event_handler start_point="382.1000000000001,368.1" end_point="258.1,372.1000000000001" height="-68">
      <current_state>deregistration</current_state>
      <!-- Deregistration is the beginning state of the event handler -->
      <timeout/>
      <!--Time (2s) after a UE periodic registration request is sent, before being retransmitted-->
      <action>
        <app>n2</app>
        <event>deregistration</event>
        <!-- gnb_1 node will execute the UE deregistration event of n2 application -->
        <node>gnb_1</node>
      </action>
      <next_state>ending</next_state>
      <!-- Ending state to be entered after an n2 UE deregistration action is executed -->
    </event_handler>
    <event_handler start_point="208.1,342.1000000000001" end_point="184.1,142.1" height="-52">
      <current_state>ending</current_state>
      <!-- Ending is the beginning state of the event handler -->
      <event_received app="n2" event="deregistration"/>
      <!-- It Identifies an n2 application UE Deregistration event to be trapped-->
      <transaction_complete/>
      <!-- Indicates that the message flow was successfully completed -->
    </event_handler>
    <event_handler start_point="110.06666666666668,273.0" end_point="134.1,132.1" height="-72">
      <current_state>ANY</current_state>
      <!-- ANY is a special state that can be used to process an event that may occur at any time-->
      <error/>
      <transaction_failed/>
      <!-- Indicates that a state machine transaction failed because of error event to complete -->
    </event_handler>
    <event_handler start_point="56.666666666666664,243.33333333333337" end_point="134.1,112.1" height="-74">
      <current_state>ANY</current_state>
      <!-- ANY is a special state that can be used to process an event that may occur at any time-->
      <event_received app="n2" event="protocol_failed"/>
      <!-- Indicates that a state machine transaction failed because of protocol failed event to complete -->
      <next_state>idle</next_state>
    </event_handler>
  </event_handlers>
                      </SmartEvents>
                  </SmartProfile>
              </subscriber_profiles>
               <subscriber_group start="1" end="1" name="subscriber_group">
				   <!-- Subscriber group defines the unique values for a range of subscribers and which profiles are associated with those subscribers -->
                <group_profiles>
					<!-- Group profiles links a group of subscribers to their profiles-->
                  <access_profile>access_profile</access_profile>
                  <authentication_profile>authentication_profile_1</authentication_profile>
                  <subscription_profile>subscription_profile</subscription_profile>
                  <user_data_profile>user_data_profile_1</user_data_profile>
                  <SmartProfile>SmartProfile</SmartProfile>
                </group_profiles>
                <identities>
					<!-- Defines the starting identity values for a group of subscribers -->
                  <imsi>208950000000031</imsi>
                  <key>0x0C0A34601D4F07677303652C0462535B</key>
                  <opc>0x63bfa50ee6523365ff14c1f45f88737d</opc>
                </identities>
                <dynamic_information>
					  <!--Defines the starting values for a group of subscribers-->
                  <sqn>0x40</sqn>
                  <vplmn>431-265</vplmn>
                  <cell_id>1485</cell_id>
                </dynamic_information>
              </subscriber_group>
            </subscriber_database>
            <!--Subscriber database referenced by a node-->
        </spr>
        <gnb name="gnb_1">
			<!-- Configuration for emulated gNodeB-->
          <auto_start>true</auto_start>
          <n2>
            <interface name="interface_1" native="true">
              <sctp>
                <dport>38412</dport>
                <ip_address>10.32.116.1</ip_address>
                <dest_ip_address>10.32.116.9</dest_ip_address>
              </sctp>
              <user_socket>
                <ip_address>10.32.116.1</ip_address>
              </user_socket>
            </interface>
              <user_data>
                <basic_data name="basic_data"/>
              </user_data>
          </n2>
          <mcc>208</mcc>
          <mnc>95</mnc>
          <node_name>gnb-1</node_name>
          <global_gnb_id>1048575</global_gnb_id>
          <default_paging_drx>v32</default_paging_drx>
          <supported_ta>
            <tac>0xa000</tac>
            <bplmn>
              <mcc>208</mcc>
              <mnc>95</mnc>
              <slice_support_item>
                <nssai_sst>222</nssai_sst>
                <nssai_sd>123</nssai_sd>
              </slice_support_item>
              <slice_support_item>
                <nssai_sst>0x27</nssai_sst>
                <nssai_sd>0x385382</nssai_sd>
              </slice_support_item>
            </bplmn>
            <bplmn>
              <mcc>207</mcc>
              <mnc>54</mnc>
              <slice_support_item>
                <nssai_sst>0x10</nssai_sst>
                <nssai_sd>0x583922</nssai_sd>
              </slice_support_item>
            </bplmn>
          </supported_ta>
          <supported_ta>
            <tac>0xa001</tac>
            <bplmn>
              <mcc>202</mcc>
              <mnc>100</mnc>
              <slice_support_item>
                <nssai_sst>0x23</nssai_sst>
                <nssai_sd>0x321236</nssai_sd>
              </slice_support_item>
            </bplmn>
            <bplmn>
              <mcc>203</mcc>
              <mnc>001</mnc>
              <slice_support_item>
                <nssai_sst>0xFF</nssai_sst>
                <nssai_sd>0x123483</nssai_sd>
              </slice_support_item>
            </bplmn>
          </supported_ta>
          <subscriber_database name="gnb_subs"/>
        </gnb>
    </nodes>
  </config>
  <command>
	  <!--Element used to specify various commands for the nodes-->
    <wait>1000</wait>
    <!--Causes processing to be suspended at this point for a duration equal to 1s -->
  </command>
  <command>
    <spr name="spr_gnb">
      <action>
        <rate>1</rate>
        <!-- Rate at which to generate the event -->
        <cycle>1</cycle>
        <!--Number of time to cycle through the selected subscribers -->
        <start>1</start>
        <!-- index or IMSI of a subscriber for action -->
        <end>1</end>
         <!-- index or IMSI of a subscriber for action -->
        <ready>gnb_1</ready>
        <!-- Defines a node which must be ready before starting this action -->
        <app>SmartEvents</app>
        <!-- Application which the SPR supports -->
        <event>start</event>
        <!-- Events which an SPR can initiate-->
      </action>
       <!-- Definition of an action for an SPR Node-->
    </spr>
  </command>
</dst:devsol>
