version: 2.1

refs:
  only_master: &only_master
    filters:
      branches:
        only: master

orbs:
  artifactory: circleci/artifactory@0.0.7

  build:
    commands:
      determinator:
        parameters:
          paths:
            description: Space seperated list of paths to tests against.
            type: string
        steps:
          - run:
              name: Checking for changes
              command: |
                paths=".circleci <<parameters.paths>>"
                echo "Checking paths [$paths]"
                for path in $paths; do
                  if [[ $(git diff master^ --name-only $path) ]]; then
                    echo "Found changes in $path"
                    exit 0
                  fi
                done
                echo "No changes in [$paths]"
                circleci step halt
      docker_repo_login:
        parameters:
          docker_repo:
            description: The base url of the docker repository to pull from
            type: string
          user:
            description: The username to use to log in to the repo
            type: env_var_name
            default: ARTIFACTORY_USER
          api_key:
            description: The api key to use to log in to the repo
            type: env_var_name
            default: ARTIFACTORY_API_KEY
        steps:
          - run:
              name: Log in to Artifactory
              command: |
                docker login -u ${<< parameters.user >>} -p ${<< parameters.api_key >>} << parameters.docker_repo >>
      pull_or_build_then_push:
        parameters:
          docker_repo:
            description: The base url of the docker repository to pull from
            type: string
          image_name:
            description: The image name to pull
            type: string
          tag:
            description: The desired tag
            type: string
          build_cmd:
            description: The command to run if image is not yet pushed
            type: string
        steps:
          - run:
              name: Pull << parameters.image_name >> or, if unavailable, build it then push it
              command: |
                export FULL_NAME=<< parameters.docker_repo >>/<< parameters.image_name >>:<< parameters.tag >>
                echo "Checking to see if image exists locally."
                if [[ `docker images -q "${FULL_NAME}"` != "" ]]; then
                  echo "Found image ${FULL_NAME} locally."
                  exit 0
                fi
                echo "Couldn't find locally, attempting to pull from remote repo."
                if [[ `docker pull "${FULL_NAME}"` ]]; then
                  echo "Pulled << parameters.image_name >> from << parameters.docker_repo >>."
                  exit 0
                fi
                echo "Couldn't find image in remote repo, building using build_cmd."
                << parameters.build_cmd >>
                docker tag << parameters.image_name >> "${FULL_NAME}"
                docker push "${FULL_NAME}"

jobs:
  docusaurus_build_and_deploy:
    docker:
      - image: circleci/node:8.11.1
    steps:
      - checkout
      - run:
          name: Setup docusaurus expected directory structure
          command: |
            mv docs/docusaurus website/
            mv docs/readmes readmes/
            rm -rf docs/
            mv readmes/ docs/
      - run:
          name: Deploying to GitHub Pages
          command: |
            git config --global user.email "docusaurus-bot@users.noreply.github.com"
            git config --global user.name "docusaurus-bot"
            echo "machine github.com login docusaurus-bot password $GITHUB_TOKEN" > ~/.netrc
            cd website && yarn install
            CUSTOM_COMMIT_MESSAGE="[skip ci] Deploy website" GIT_USER=docusaurus-bot yarn run publish-gh-pages

  symphony_check_bootstrap:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Prepare environment
          command: |
            sudo apt-get update -y
            sudo apt-get install -y realpath
            pyenv global 3.7.0
            python -m pip install pyyaml
      - run:
          name: Testing the agent<->orc8r bootstrap process
          command: |
            export MAGMA_ROOT=$PWD
            cd "${MAGMA_ROOT}"/.circleci/common/test_scripts
            bash ./create_test_certs.sh
      - build/docker_repo_login:
          docker_repo: facebookconnectivity-southpoll-dev-docker.jfrog.io
      - build/pull_or_build_then_push:
          docker_repo: facebookconnectivity-southpoll-dev-docker.jfrog.io
          image_name: orc8r_controller
          tag: "${CIRCLE_PR_NUMBER}-${CIRCLE_BUILD_NUM}"
          build_cmd: export MAGMA_ROOT=$PWD && export MAGMA_MODULES_FILE=${MAGMA_ROOT}/.circleci/common/test_files/modules.yml && cd "${MAGMA_ROOT}"/orc8r/cloud/docker && python build.py
      - build/pull_or_build_then_push:
          docker_repo: facebookconnectivity-southpoll-dev-docker.jfrog.io
          image_name: orc8r_proxy
          tag: "${CIRCLE_PR_NUMBER}-${CIRCLE_BUILD_NUM}"
          build_cmd: export MAGMA_ROOT=$PWD && export MAGMA_MODULES_FILE=${MAGMA_ROOT}/.circleci/common/test_files/modules.yml && cd "${MAGMA_ROOT}"/orc8r/cloud/docker && python build.py
      - build/pull_or_build_then_push:
          docker_repo: facebookconnectivity-southpoll-dev-docker.jfrog.io
          image_name: symphony-agent
          tag: "${CIRCLE_PR_NUMBER}-${CIRCLE_BUILD_NUM}"
          build_cmd: export MAGMA_ROOT=$PWD && cd $MAGMA_ROOT/devmand/gateway/docker && ./scripts/build
      - run:
          name: tag and push and everything else
          command: |
            export MAGMA_ROOT=$PWD
            export TAG="${CIRCLE_PR_NUMBER}-${CIRCLE_BUILD_NUM}"
            export ART_URL=facebookconnectivity-southpoll-dev-docker.jfrog.io

            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            docker tag orc8r_controller:latest ${ART_URL}/orc8r_controller:${TAG}
            docker tag orc8r_proxy:latest ${ART_URL}/orc8r_proxy:${TAG}
            docker-compose up -d

            docker exec $(docker ps -qf name=controller) envdir /var/opt/magma/envdir /var/opt/magma/bin/accessc add-admin -cert admin_operator admin_operator
            docker exec $(docker ps -qf name=controller) ls /
            for certfile in admin_operator.pem admin_operator.key.pem
            do
                docker cp $(docker ps -qf name=controller):/${certfile} ${MAGMA_ROOT}/.cache/test_certs/${certfile}
            done

            cd $MAGMA_ROOT/devmand/gateway/docker
            docker tag ${ART_URL}/symphony-agent:latest ${ART_URL}/symphony-agent:${TAG}
            docker-compose -f docker-compose.yml -f $MAGMA_ROOT/.circleci/devmand/test_files/docker-compose.orc8r-test.yml up -d
            cd $MAGMA_ROOT/.circleci/devmand/test_scripts
            bash test_bootstrap.sh

  southpoll_lint:
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - run:
          name: Running lints on the devmand image
          command: |
            sudo dnf update -y
            sudo dnf install -y clang-format
            cd ./devmand/gateway/
            ./format
            if [[ $(git diff HEAD --name-only) ]]; then
               echo "############################"
               echo "Changes required!"
               git diff HEAD | less
               echo "Please run the format script"
               echo "############################"
               exit 1
            fi

  southpoll_test:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - build/docker_repo_login:
          docker_repo: facebookconnectivity-southpoll-dev-docker.jfrog.io
      - run:
          name: Testing the Devmand Image
          command: |
            sudo apt-get update -y
            sudo apt-get install -y realpath
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build
            ./scripts/test

  southpoll_publish_dev:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - build/docker_repo_login:
          docker_repo: facebookconnectivity-southpoll-dev-docker.jfrog.io
      - run:
          name: Publishing all southpoll images to southpoll-dev
          command: |
            sudo apt-get update -y
            sudo apt-get install -y realpath
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build
            ./scripts/push

  southpoll_publish_prod:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - build/docker_repo_login:
          docker_repo: facebookconnectivity-southpoll-prod-docker.jfrog.io
      - run:
          name: Publishing all southpoll images to southpoll-prod
          command: |
            sudo apt-get update -y
            sudo apt-get install -y realpath
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build
            ./scripts/push_prod

  southpoll_firstparty:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "orc8r/gateway/c/common"
      - run:
          name: Building southpoll firstparty image
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            export SYMPHONY_DOCKER_REGISTRY=facebookconnectivity-southpoll-prod-docker.jfrog.io
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-prod-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build

  southpoll_thirdparty:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "devmand/gateway/docker/thirdparty"
      - run:
          name: Building southpoll thirdparty image
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            export SYMPHONY_DOCKER_REGISTRY=facebookconnectivity-southpoll-prod-docker.jfrog.io
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-prod-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached
            ./scripts/build

workflows:
  version: 2.1

  docusaurus_build_and_deploy:
    jobs:
      - docusaurus_build_and_deploy:
          <<: *only_master

  symphony_agent_cloud_integration:
    jobs:
      - symphony_check_bootstrap

  southpoll_test_and_publish:
    jobs:
      - southpoll_thirdparty
      - southpoll_firstparty
      - southpoll_lint
      - southpoll_test
      - southpoll_publish_dev:
          requires:
            - southpoll_lint
            - southpoll_test
      - southpoll_publish_prod:
          requires:
            - southpoll_lint
            - southpoll_test
          <<: *only_master
