// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkCarrierWifiConfigs Carrier WiFi configuration for a network
// swagger:model network_carrier_wifi_configs
type NetworkCarrierWifiConfigs struct {

	// aaa server
	AaaServer *NetworkCarrierWifiConfigsAaaServer `json:"aaa_server,omitempty"`

	// default rule id
	DefaultRuleID string `json:"default_rule_id,omitempty"`

	// eap aka
	EapAka *NetworkCarrierWifiConfigsEapAka `json:"eap_aka,omitempty"`

	// feg network id
	FegNetworkID string `json:"feg_network_id,omitempty"`

	// nat enabled
	NatEnabled bool `json:"nat_enabled,omitempty"`

	// Configuration for network services. Services will be instantiated in the listed order.
	NetworkServices []string `json:"network_services,omitempty"`

	// relay enabled
	RelayEnabled bool `json:"relay_enabled,omitempty"`
}

// Validate validates this network carrier wifi configs
func (m *NetworkCarrierWifiConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAaaServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapAka(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkCarrierWifiConfigs) validateAaaServer(formats strfmt.Registry) error {

	if swag.IsZero(m.AaaServer) { // not required
		return nil
	}

	if m.AaaServer != nil {
		if err := m.AaaServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aaa_server")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkCarrierWifiConfigs) validateEapAka(formats strfmt.Registry) error {

	if swag.IsZero(m.EapAka) { // not required
		return nil
	}

	if m.EapAka != nil {
		if err := m.EapAka.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eap_aka")
			}
			return err
		}
	}

	return nil
}

var networkCarrierWifiConfigsNetworkServicesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["metering","dpi","policy_enforcement"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkCarrierWifiConfigsNetworkServicesItemsEnum = append(networkCarrierWifiConfigsNetworkServicesItemsEnum, v)
	}
}

func (m *NetworkCarrierWifiConfigs) validateNetworkServicesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkCarrierWifiConfigsNetworkServicesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkCarrierWifiConfigs) validateNetworkServices(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkServices) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkServices); i++ {

		// value enum
		if err := m.validateNetworkServicesItemsEnum("network_services"+"."+strconv.Itoa(i), "body", m.NetworkServices[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkCarrierWifiConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkCarrierWifiConfigs) UnmarshalBinary(b []byte) error {
	var res NetworkCarrierWifiConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkCarrierWifiConfigsAaaServer network carrier wifi configs aaa server
// swagger:model NetworkCarrierWifiConfigsAaaServer
type NetworkCarrierWifiConfigsAaaServer struct {

	// accounting enabled
	AccountingEnabled bool `json:"accounting_enabled,omitempty"`

	// create session on auth
	CreateSessionOnAuth bool `json:"create_session_on_auth,omitempty"`

	// idle session timeout ms
	IDLESessionTimeoutMs uint32 `json:"idle_session_timeout_ms,omitempty" magma_alt_name:"IdleSessionTimeoutMs"`
}

// Validate validates this network carrier wifi configs aaa server
func (m *NetworkCarrierWifiConfigsAaaServer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkCarrierWifiConfigsAaaServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkCarrierWifiConfigsAaaServer) UnmarshalBinary(b []byte) error {
	var res NetworkCarrierWifiConfigsAaaServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkCarrierWifiConfigsEapAka network carrier wifi configs eap aka
// swagger:model NetworkCarrierWifiConfigsEapAka
type NetworkCarrierWifiConfigsEapAka struct {

	// plmn ids
	PlmnIds []string `json:"plmn_ids"`

	// timeout
	Timeout *EapAkaTimeouts `json:"timeout,omitempty"`
}

// Validate validates this network carrier wifi configs eap aka
func (m *NetworkCarrierWifiConfigsEapAka) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlmnIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkCarrierWifiConfigsEapAka) validatePlmnIds(formats strfmt.Registry) error {

	if swag.IsZero(m.PlmnIds) { // not required
		return nil
	}

	for i := 0; i < len(m.PlmnIds); i++ {

		if err := validate.MinLength("eap_aka"+"."+"plmn_ids"+"."+strconv.Itoa(i), "body", string(m.PlmnIds[i]), 5); err != nil {
			return err
		}

		if err := validate.MaxLength("eap_aka"+"."+"plmn_ids"+"."+strconv.Itoa(i), "body", string(m.PlmnIds[i]), 6); err != nil {
			return err
		}

		if err := validate.Pattern("eap_aka"+"."+"plmn_ids"+"."+strconv.Itoa(i), "body", string(m.PlmnIds[i]), `^(\d{5,6})$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *NetworkCarrierWifiConfigsEapAka) validateTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if m.Timeout != nil {
		if err := m.Timeout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eap_aka" + "." + "timeout")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkCarrierWifiConfigsEapAka) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkCarrierWifiConfigsEapAka) UnmarshalBinary(b []byte) error {
	var res NetworkCarrierWifiConfigsEapAka
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
